[{"id":"d91109d265d01fb54bc36b235350542e","title":"John The Ripper","content":"Hello Hackers üöÄToday we will be solving the challenges in John The Ripper room on TryHacKMe \nTASK 1 - John WhoWelcomeJohn the Ripper is one of the most well known, well-loved and versatile hash cracking tools out there. It combines a fast cracking speed, with an extraordinary range of compatible hash types. This room will assume no previous knowledge, so we must first cover some basic terms and concepts before we move into practical hash cracking.\nWhat are Hashes?A hash is a way of taking a piece of data of any length and  representing it in another form that is a fixed length. This masks the original value of the data. This is done by running the original data through a hashing algorithm. There are many popular hashing algorithms, such as MD4,MD5, SHA1 and NTLM. Lets try and show this with an example:\nIf we take ‚Äúpolo‚Äù, a string of 4 characters- and run it through an MD5 hashing algorithm, we end up with an output of: b53759f3ce692de7aff1b5779d3964da a standard 32 character MD5 hash.\nLikewise, if we take ‚Äúpolomints‚Äù, a string of 9 characters- and run it through the same MD5 hashing algorithm, we end up with an output of: 584b6e4f4586e136bc280f27f9c64f3b another standard 32 character MD5 hash.\nWhat makes Hashes secure?Hashing functions are designed as one-way functions. In other words, it is easy to calculate the hash value of a given input; however, it is a difficult problem to find the original input given the hash value. By ‚Äúdifficult‚Äù, we mean that it is computationally infeasible. This has its roots in mathematics and P vs NP.\nIn computer science, P and NP are two classes of problems that help us understand the efficiency of algorithms:\nP (Polynomial Time): Class P covers the problems whose solution can be found in polynomial time. Consider sorting a list in increasing order. The longer the list, the longer it would take to sort; nonetheless, the increase in time is not exponential.NP (Non-deterministic Polynomial Time): Problems in the class NP are those for which a given solution can be checked quickly, even though finding the solution itself might be hard. In fact, we don‚Äôt know if there is a fast algorithm to find the solution in the first place.While this is an extremely interesting mathematical concept that proves fundamental to computing and cryptography, it is completely outside the scope of this room. But abstractly it means that the algorithm to hash the value will be ‚ÄúP‚Äù and can therefore be calculated reasonably. However an un-hashing algorithm would be ‚ÄúNP‚Äù and intractable to solve- meaning that it cannot be computed in a reasonable time using standard computers.\nWhere John Comes in‚Ä¶Even though the algorithm itself is not feasibly reversible. That doesn‚Äôt mean that cracking the hashes is impossible. If you have the hashed version of a password, for example- and you know the hashing algorithm- you can use that hashing algorithm to hash a large number of words, called a dictionary. You can then compare these hashes to the one you‚Äôre trying to crack, to see if any of them match. If they do, you now know what word corresponds to that hash- you‚Äôve cracked it!\nThis process is called a dictionary attack and John the Ripper, or John as it‚Äôs commonly shortened to, is a tool to allow you to conduct fast brute force attacks on a large array of different hash types.\nTASK 2 - Setting Up John The RipperSetting Up John The RipperJohn the Ripper is supported on many different Operating Systems, not just Linux Distributions. As a note before we go through this, there are multiple versions of John, the standard ‚Äúcore‚Äù distribution, as well as multiple community editions- which extend the feature set of the original John distribution. The most popular of these distributions is the ‚ÄúJumbo John‚Äù- which we will be using specific features of later.\nParrot, Kali and AttackBoxIf you‚Äôre using Parrot OS, Kali Linux or TryHackMe‚Äôs own AttackBox- you should already have Jumbo John installed. You can double check this by typing john into the terminal. You should be met with a usage guide for john, with the first line reading: ‚ÄúJohn the Ripper 1.9.0-jumbo-1‚Äù or similar with a different version number. If not, you can use sudo apt install john to install it.\nBlackarchIf you‚Äôre using Blackarch, or the Blackarch repositories you may or may not have Jumbo John installed, to check if you do, use the command pacman -Qe | grep &quot;john&quot; You should be met with an output similar to ‚Äújohn 1.9.0.jumbo1-5‚Äù or similar with a different version number. If you do not have it installed, you can simply use pacman -S john to install it.\nBuilding from Source for LinuxIf you wish to build the package from source to meet your system requirements, you can do this in five fairly straightforward steps. Further advice on the installation process and how to configure your build from source can be found here.\nUse git clone https://github.com/openwall/john -b bleeding-jumbo john to clone the jumbo johnrepository to your current workingThen cd john/src/ to change your current directory to where the source code is.Once you‚Äôre in this directory, use ./configure to check the required dependencies and options that have been configured.If you‚Äôre happy with this output, and have installed any required dependencies that are needed, use make -s clean &amp;&amp; make -sj4 to build a binary of john. This binary will be in the above run directory, which you can change to with cd ../runYou can test this binary using ./john --test\nTASK 3 - WordlistsWordlistsAs we explained in the first task, in order to dictionary attack hashes, you need a list of words that you can hash and compare, unsurprisingly this is called a wordlist. There are many different wordlists out there, a good collection to use can be found in the SecLists repository. There are a few places you can look for wordlists on your attacking system of choice, we will quickly run through where you can find them.\nParrot, Kali and AttackBoxOn Parrot, Kali and TryHackMe‚Äôs AttackBox- you can find a series of amazing wordlists in the /usr/share/wordlists directory.\nRockYouFor all of the tasks in this room, we will be using the infamous rockyou.txt wordlist- which is a very large common password wordlist, obtained from a data breach on a website called rockyou.com in 2009. If you are not using any of the above distributions, you can get the rockyou.txt wordlist from the SecLists repository under the /Passwords/Leaked-Databases subsection. You may need to extract it from .tar.gz format, using tar xvzf rockyou.txt.tar.gz.\nNow that we have our hash cracker and wordlists all set up, lets move onto some hash cracking!\nQuestions and Answer in this Task\nQuestion : What website was the rockyou.txt wordlist created from a breach on?\nAnswer: rockyou.com\n\nTASK 4 - Cracking Basic HashesCracking Basic HashesThere are multiple ways to use John the Ripper to crack simple hashes, we‚Äôre going to walk through a few, before moving on to cracking some ourselves.\nJohn Basic SyntaxThe basic syntax of John the Ripper commands is as follows. We will cover the specific options and modifiers used as we use them.john [options] [path to file]john - Invokes the John the Ripper program[path to file] - The file containing the hash you‚Äôre trying to crack, if it‚Äôs in the same directory you won‚Äôt need to name a path, just the file.\nAutomatic CrackingJohn has built-in features to detect what type of hash it‚Äôs being given, and to select appropriate rules and formats to crack it for you, this isn‚Äôt always the best idea as it can be unreliable- but if you can‚Äôt identify what hash type you‚Äôre working with and just want to try cracking it, it can be a good option! To do this we use the following syntax:\njohn --wordlist=[path to wordlist] [path to file]\n--wordlist= - Specifies using wordlist mode, reading from the file that you supply in the following path‚Ä¶\n[path to wordlist] - The path to the wordlist you‚Äôre using, as described in the previous task.\nExample Usage:\njohn --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt\nIdentifying HashesSometimes John won‚Äôt play nicely with automatically recognising and loading hashes, that‚Äôs okay! We‚Äôre able to use other tools to identify the hash, and then set john to use a specific format. There are multiple ways to do this, such as using an online hash identifier like this one. I like to use a tool called hash-identifier, a Python tool that is super easy to use and will tell you what different types of hashes the one you enter is likely to be, giving you more options if the first one fails.\nTo use hash-identifier, you can just pull the python file from gitlab using: wget https://gitlab.com/kalilinux/packages/hash-identifier/-/raw/kali/master/hash-id.py.Then simply launch it with python3 hash-id.py and then enter the hash you‚Äôre trying to identify- and it will give you possible formats!\nFormat-Specific CrackingOnce you have identified the hash that you‚Äôre dealing with, you can tell john to use it while cracking the provided hash using the following syntax:\njohn --format=[format] --wordlist=[path to wordlist] [path to file]\n--format= - This is the flag to tell John that you‚Äôre giving it a hash of a specific format, and to use the following format to crack it\n[format] - The format that the hash is in\nExample Usage:\njohn --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt\nA Note on Formats:\nWhen you are telling john to use formats, if you‚Äôre dealing with a standard hash type, e.g. md5 as in the example above, you have to prefix it with raw- to tell john you‚Äôre just dealing with a standard hash type, though this doesn‚Äôt always apply. To check if you need to add the prefix or not, you can list all of John‚Äôs formats using john --list=formats and either check manually, or grep for your hash type using something like john --list=formats | grep -iF &quot;md5&quot;.\nPracticalNow you know the syntax, modifiers and methods to crack basic hashes, try it yourself! Download the attached .txt files that\nDownload the Files*\nDownload Here\n\nQuestions and Answers of the TaskQ1. What type of hash is hash1.txt?Answer: We can check the hash type by using hash-id tool as we discusdded previosuly\n\nlaunch the tool using the command : python3 hash-id.py\ncopy the hash content from the file you have downloaded\nWe can see the hash type is md5:\n\n  \n\nso the answer is MD5\n\nQ2. What is the cracked value of hash1.txt?Answer:We can find the value of hash1.txt using John The Ripper\n\nuse the following command to crarck the hashjohn --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash.txtOUTPUT\nWe can see the cracked value of the hash1&#x2F;txt is : biscuit\nSo the Answer is biscuit\n\nQ3. What type of hash is hash2.txt?\n\nWe can again use hash-id tool as we did for Question 1\n\nso the Answer is sha1\n\nQ4. What is the cracked value of hash2.txt\n\nwe can use the john the ripper as we did in Question 2\nCommand: john --format=raw-sha256 --wordlist=/usr/share/wordlists/rockyou.txt hash.txtReplace the hash value in hash.txt file\n\nso the Answer is kangeroo\n\nQ5. What type of hash is hash3.txt?\n\nuse hash-id tool to find the type of hash :\n\nso the answer is SHA256\n\nQ6. What is the cracked value of hash3.txt\n\nuse &#96;John The Ripper‚Äô as we did in Question 2\nCommand : john --format=raw-sha256 --wordlist=/usr/share/wordlists/rockyou.txt hash.txtreplace the hash value hash.txt file\nso the Answer is microphone\n\nNow for Q7 &amp; Q8 repeat the process as we did for the above QuestionsAnswers should be : Q7.Whirlpool &amp; Q8.colossal\nTASK 5 - Cracking Windows Authentication HashesCracking Windows HashesNow that we understand the basic syntax and usage of John the Ripper- lets move on to cracking something a little bit more difficult, something that you may even want to attempt if you‚Äôre on a real Penetration Test or Red Team engagement. Authentication hashes are the hashed versions of passwords that are stored by operating systems, it is sometimes possible to crack them using the brute-force methods that we‚Äôre using. To get your hands on these hashes, you must often already be a privileged user- so we will explain some of the hashes that we plan on cracking as we attempt them.\nNTHash &#x2F; NTLMNThash is the hash format that modern Windows Operating System machines will store user and service passwords in. It‚Äôs also commonly referred to as ‚ÄúNTLM‚Äù which references the previous version of Windows format for hashing passwords known as ‚ÄúLM‚Äù, thus ‚ÄúNT&#x2F;LM‚Äù.\nA little bit of history, the NT designation for Windows products originally meant ‚ÄúNew Technology‚Äù, and was used- starting with Windows NT, to denote products that were not built up from the MS-DOS Operating System. Eventually, the ‚ÄúNT‚Äù line became the standard Operating System type to be released by Microsoft and the name was dropped, but it still lives on in the names of some Microsoft technologies. \nYou can acquire NTHash&#x2F;NTLM hashes by dumping the SAM database on a Windows machine, by using a tool like Mimikatz or from the Active Directory database: NTDS.dit. You may not have to crack the hash to continue privilege escalation- as you can often conduct a ‚Äúpass the hash‚Äù attack instead, but sometimes hash cracking is a viable option if there is a weak password policy.\nPracticalNow that you know the theory behind it, see if you can use the techniques we practiced in the last task, and the knowledge of what type of hash this is to crack the ntlm.txt file!\nDownload the files Here\nQustions and Answers in the TaskQ1. What do we need to set the ‚Äúformat‚Äù flag to, in order to crack this?\n\nNT\n\nQ2. What is the cracked value of this password?\n\nwe can use John The Ripper to crack the given hash\nCommand : ohn --format=nt --wordlist=/usr/share/wordlists/rockyou.txt /home/kali/Desktop/ntlm_1605054722641.txt\n\nso the Answer is mushroom\n\nTASK 6 - Cracking &#x2F;etc&#x2F;shadow HashesCracking Hashes from &#x2F;etc&#x2F;shadowThe &#x2F;etc&#x2F;shadow file is the file on Linux machines where password hashes are stored. It also stores other information, such as the date of last password change and password expiration information. It contains one entry per line for each user or user account of the system. This file is usually only accessible by the root user- so in order to get your hands on the hashes you must have sufficient privileges, but if you do- there is a chance that you will be able to crack some of the hashes.\nUnshadowingJohn can be very particular about the formats it needs data in to be able to work with it, for this reason- in order to crack /etc/shadow passwords, you must combine it with the /etc/passwd file in order for John to understand the data it‚Äôs being given. To do this, we use a tool built into the John suite of tools called unshadow. The basic syntax of unshadow is as follows:\nunshadow [path to passwd] [path to shadow]unshadow - Invokes the unshadow tool[path to passwd] - The file that contains the copy of the &#x2F;etc&#x2F;passwd file you‚Äôve taken from the target machine[path to shadow] - The file that contains the copy of the &#x2F;etc&#x2F;shadow file you‚Äôve taken from the target machine\nExample Usage:\n\nunshadow local_passwd local_shadow &gt; unshadowed.txt Note on the files\n\nWhen using unshadow, you can either use the entire /etc/passwd and /etc/shadow file- if youhave them available, or you can use the relevant line from each, for example:\n\nFILE 1 - local_passwdContains the /etc/passwd line for the root user:root:x:0:0::/root:/bin/bash\n\nFILE 2 - local_shadow Contains the /etc/shadow line for the root user: root:$6$2nwjN454g.dv4HN/$m9Z/r2xVfweYVkrr.v5Ft8Ws3/YYksfNwq96UL1FX0OJjY1L6l.DS3KEVsZ9rOVLB/ldTeEL/OIhJZ4GMFMGA0:18576::::::\n\n\nCrackingWe‚Äôre then able to feed the output from unshadow, in our example use case called ‚Äúunshadowed.txt‚Äù directly into John. We should not need to specify a mode here as we have made the input specifically for John, however in some cases you will need to specify the format as we have done previously using: --format=sha512cryptjohn --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt unshadowed.txt\nPracticalNow, see if you can follow the process to crack the password hash of the root user that is provided in the ‚Äúetchashes.txt‚Äù file. Good luck!Download the files Here\nQuestions and Answers of the taskQ1. What is the root password?A:\n\nWe can use John The Ripper Tool to crack the hash\nEnter the command : john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt /home/kali/Desktop/etc_hashes_1605054759028.txt\nAnswer : 1234\n\nTASK 7 - Single Crack ModeSingle Crack ModeSo far we‚Äôve been using John‚Äôs wordlist mode to deal with brute forcing simple., and not so simple hashes. But John also has another mode, called Single Crack mode. In this mode, John uses only the information provided in the username, to try and work out possible passwords heuristically, by slightly changing the letters and numbers contained within the username.\nWord ManglingThe best way to show what Single Crack mode is,  and what word mangling is, is to actually go through an example:If we take the username: Markus\nSome possible passwords could be:\nMarkus1, Markus2, Markus3 (etc.)MArkus, MARkus, MARKus (etc.)Markus!, Markus$, Markus* (etc.)This technique is called word mangling. John is building it‚Äôs own dictionary based on the information that it has been fed and uses a set of rules called ‚Äúmangling rules‚Äù which define how it can mutate the word it started with to generate a wordlist based off of relevant factors for the target you‚Äôre trying to crack. This is exploiting how poor passwords can be based off of information about the username, or the service they‚Äôre logging into.\nGECOSJohn‚Äôs implementation of word mangling also features compatibility with the Gecos fields of the UNIX operating system, and other UNIX-like operating systems such as Linux. So what are Gecos? Remember in the last task where we were looking at the entries of both /etc/shadow and /etc/passwd? Well if you look closely You can see that each field is seperated by a colon &quot;:&quot;. Each one of the fields that these records are split into are called Gecos fields. John can take information stored in those records, such as full name and home directory name to add in to the wordlist it generates when cracking /etc/shadow hashes with single crack mode.\nUsing Single Crack ModeTo use single crack mode, we use roughly the same syntax that we‚Äôve used to so far, for example if we wanted to crack the password of the user named ‚ÄúMike‚Äú, using single mode, we‚Äôd use:john --single --format=[format] [path to file]--single - This flag lets john know you want to use the single hash cracking mode.Example Usage:john --single --format=raw-sha256 hashes.txt\nA Note on File Formats in Single Crack Mode:\nIf you‚Äôre cracking hashes in single crack mode, you need to change the file format that you‚Äôre feeding john for it to understand what data to create a wordlist from. You do this by prepending the hash with the username that the hash belongs to, so according to the above example- we would change the file hashes.txt\n1234From:1efee03cdcb96d90ad48ccc7b8666033Tomike:1efee03cdcb96d90ad48ccc7b8666033\n\nPracticalNow you‚Äôre familiar with the Syntax for John‚Äôs single crack mode, download the attached hash and crack it, assuming that the user it belongs to is called ‚ÄúJoker‚Äù.\nQuestions and Answers in the taskQ1. What is Joker‚Äôs password?\n\nAnswer :\nwe can use John to crack the hash\nfirst we need determine what type of hash it is\nWe can do that by using hash-id tool\n\nnow we can specify the format as raw-md5 in john -Crack the hash by using  ‚Äòjohn ‚Äìsingle ‚Äìformat&#x3D;raw-md5 &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;ntlm_1605054722641.txt‚Äô  Make sure you insert joker before the hash  The final hash should like this :  joker:7bf6d9bb82bed1302f331fc6b816aada\nCommand : john --single --format=raw-md5 /home/kali/Desktop/ntlm_1605054722641.txt\n\n","slug":"John-The-Ripper","date":"2024-05-20T11:12:16.000Z","categories_index":"","tags_index":"","author_index":"Satvik"},{"id":"2fabf1408eddff0177ed3e3bbe3ade2f","title":"Nmap Post Port Scans","content":"TASK 1 - Introduction:This room is the last in the Nmap series (part of the Introduction to Network Security module). In this room, we focus on the steps that follow port-scanning: in particular, service detection, OS detection, Nmap scripting engine, and saving the scan results.\nNmap Live Host DiscoveryNmap Basic Port ScansNmap Advanced Port ScansNmap Post Port ScansIn the first room of this series, we have learned how Nmap can enumerate targets, discover live hosts, and use reverse-DNS to find interesting names. The second and third rooms of the series focused on the basic and advanced types of scans for network ports.\nIn the last room, as shown in the figure below, we focus on how Nmap can be used to:\nDetect versions of the running services (on all open ports)Detect the OS based on any signs revealed by the targetRun Nmap‚Äôs tracerouteRun select Nmap scriptsSave the scan results in various formats\nThis room will focus on these steps and how to execute them after the port scan.\nQuestions and Answers of the task:\nTASK 2 - Service Detection:Once Nmap discovers open ports, you can probe the available port to detect the running service. Further investigation of open ports is an essential piece of information as the pentester can use it to learn if there are any known vulnerabilities of the service. Join Vulnerabilities 101 to learn more about searching for vulnerable services.\nAdding -sV to your Nmap command will collect and determine service and version information for the open ports. You can control the intensity with --version-intensity LEVEL where the level ranges between 0, the lightest, and 9, the most complete. -sV --version-light has an intensity of 2, while -sV --version-all has an intensity of 9.\nIt is important to note that using -sV will force Nmap to proceed with the TCP 3-way handshake and establish the connection. The connection establishment is necessary because Nmap cannot discover the version without establishing a connection fully and communicating with the listening service. In other words, stealth SYN scan -sS is not possible when -sV option is chosen.\nThe console output below shows a simple Nmap stealth SYN scan with the -sV option. Adding the -sV option leads to a new column in the output showing the version for each detected service. For instance, in the case of TCP port 22 being open, instead of 22&#x2F;tcp open ssh, we obtain 22&#x2F;tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0). Notice that the SSH protocol is guessed as the service because TCP port 22 is open; Nmap didn‚Äôt need to connect to port 22 to confirm. However, -sV required connecting to this open port to grab the service banner and any version information it can get, such as nginx 1.6.2. Hence, unlike the service column, the version column is not a guess.\nPentester Terminal\n1234567891011121314151617pentester@TryHackMe$ sudo nmap -sV MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-10 05:03 BSTNmap scan report for MACHINE_IPHost is up (0.0040s latency).Not shown: 995 closed portsPORT    STATE SERVICE VERSION22/tcp  open  ssh     OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0)25/tcp  open  smtp    Postfix smtpd80/tcp  open  http    nginx 1.6.2110/tcp open  pop3    Dovecot pop3d111/tcp open  rpcbind 2-4 (RPC #100000)MAC Address: 02:A0:E7:B5:B6:C5 (Unknown)Service Info: Host:  debra2.thm.local; OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 8.40 seconds\nNote that many Nmap options require root privileges. Unless you are running Nmap as root, you need to use sudo as in the example above.\nStart the VM. Once it is ready, open the terminal on the AttackBox to answer the following questions.\nQuestions and answers of the task\nTASK 3 - OS Detection and TraceRouteOS DetectionNmap can detect the Operating System (OS) based on its behaviour and any telltale signs in its responses. OS detection can be enabled using -O ; this is an uppercase O as in OS. In this example, we ran nmap -sS -O  MACHINE_IP on the AttackBox. Nmap detected the OS to be Linux 3.X, and then it guessed further that it was running kernel 3.13.\nPentester Terminal\n12345678910111213141516171819202122pentester@TryHackMe$ sudo nmap -sS -O  MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-10 05:04 BSTNmap scan report for MACHINE_IPHost is up (0.00099s latency).Not shown: 994 closed portsPORT    STATE SERVICE22/tcp  open  ssh25/tcp  open  smtp80/tcp  open  http110/tcp open  pop3111/tcp open  rpcbind143/tcp open  imapMAC Address: 02:A0:E7:B5:B6:C5 (Unknown)Device type: general purposeRunning: Linux 3.XOS CPE: cpe:/o:linux:linux_kernel:3.13OS details: Linux 3.13Network Distance: 1 hopOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 3.91 seconds\nThe system that we scanned and attempted to detect its OS version is running kernel version 3.16. Nmap was able to make a close guess in this case. In another case, we scanned a Fedora Linux system with kernel 5.13.14; however, Nmap detected it as Linux 2.6.X. The good news is that Nmap detected the OS correctly; the not-so-good news is that the kernel version was wrong.\nThe OS detection is very convenient, but many factors might affect its accuracy. First and foremost, Nmap needs to find at least one open and one closed port on the target to make a reliable guess. Furthermore, the guest OS fingerprints might get distorted due to the rising use of virtualization and similar technologies. Therefore, always take the OS version with a grain of salt.\nTracerouteIf you want Nmap to find the routers between you and the target, just add --traceroute. In the following example, Nmap appended a traceroute to its scan results. Note that Nmap‚Äôs traceroute works slightly different than the traceroute command found on Linux and macOS or tracert found on MS Windows. Standard traceroute starts with a packet of low TTL (Time to Live) and keeps increasing until it reaches the target. Nmap‚Äôs traceroute starts with a packet of high TTL and keeps decreasing it.\nIn the following example, we executed nmap -sS --traceroute MACHINE_IP on the AttackBox. We can see that there are no routers&#x2F;hops between the two as they are connected directly.\nPentester Terminal\n1234567891011121314151617181920pentester@TryHackMe$ sudo nmap -sS --traceroute MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-10 05:05 BSTNmap scan report for MACHINE_IPHost is up (0.0015s latency).Not shown: 994 closed portsPORT    STATE SERVICE22/tcp  open  ssh25/tcp  open  smtp80/tcp  open  http110/tcp open  pop3111/tcp open  rpcbind143/tcp open  imapMAC Address: 02:A0:E7:B5:B6:C5 (Unknown)TRACEROUTEHOP RTT     ADDRESS1   1.48 ms MACHINE_IPNmap done: 1 IP address (1 host up) scanned in 1.59 seconds\nIt is worth mentioning that many routers are configured not to send ICMP Time-to-Live exceeded, which would prevent us from discovering their IP addresses. For more information, visit the Active Reconnaissance room.\nQuestions and answers of this Task\nTASK -4 NMAP Scripting Engine[NSE]A script is a piece of code that does not need to be compiled. In other words, it remains in its original human-readable form and does not need to be converted to machine language. Many programs provide additional functionality via scripts; moreover, scripts make it possible to add custom functionality that did not exist via the built-in commands. Similarly, Nmap provides support for scripts using the Lua language. A part of Nmap, Nmap Scripting Engine (NSE) is a Lua interpreter that allows Nmap to execute Nmap scripts written in Lua language. However, we don‚Äôt need to learn Lua to make use of Nmap scripts.\nYour Nmap default installation can easily contain close to 600 scripts. Take a look at your Nmap installation folder. On the AttackBox, check the files at &#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts, and you will notice that there are hundreds of scripts conveniently named starting with the protocol they target. We listed all the scripts starting with the HTTP on the AttackBox in the console output below; we found around 130 scripts starting with http. With future updates, you can only expect the number of installed scripts to increase.\nPentester Terminal\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566pentester@AttackBox /usr/share/nmap/scripts# ls http*http-adobe-coldfusion-apsa1301.nse      http-passwd.nsehttp-affiliate-id.nse                   http-php-version.nsehttp-apache-negotiation.nse             http-phpmyadmin-dir-traversal.nsehttp-apache-server-status.nse           http-phpself-xss.nsehttp-aspnet-debug.nse                   http-proxy-brute.nsehttp-auth-finder.nse                    http-put.nsehttp-auth.nse                           http-qnap-nas-info.nsehttp-avaya-ipoffice-users.nse           http-referer-checker.nsehttp-awstatstotals-exec.nse             http-rfi-spider.nsehttp-axis2-dir-traversal.nse            http-robots.txt.nsehttp-backup-finder.nse                  http-robtex-reverse-ip.nsehttp-barracuda-dir-traversal.nse        http-robtex-shared-ns.nsehttp-brute.nse                          http-security-headers.nsehttp-cakephp-version.nse                http-server-header.nsehttp-chrono.nse                         http-shellshock.nsehttp-cisco-anyconnect.nse               http-sitemap-generator.nsehttp-coldfusion-subzero.nse             http-slowloris-check.nsehttp-comments-displayer.nse             http-slowloris.nsehttp-config-backup.nse                  http-sql-injection.nsehttp-cookie-flags.nse                   http-stored-xss.nsehttp-cors.nse                           http-svn-enum.nsehttp-cross-domain-policy.nse            http-svn-info.nsehttp-csrf.nse                           http-title.nsehttp-date.nse                           http-tplink-dir-traversal.nsehttp-default-accounts.nse               http-trace.nsehttp-devframework.nse                   http-traceroute.nsehttp-dlink-backdoor.nse                 http-unsafe-output-escaping.nsehttp-dombased-xss.nse                   http-useragent-tester.nsehttp-domino-enum-passwords.nse          http-userdir-enum.nsehttp-drupal-enum-users.nse              http-vhosts.nsehttp-drupal-enum.nse                    http-virustotal.nsehttp-enum.nse                           http-vlcstreamer-ls.nsehttp-errors.nse                         http-vmware-path-vuln.nsehttp-exif-spider.nse                    http-vuln-cve2006-3392.nsehttp-favicon.nse                        http-vuln-cve2009-3960.nsehttp-feed.nse                           http-vuln-cve2010-0738.nsehttp-fetch.nse                          http-vuln-cve2010-2861.nsehttp-fileupload-exploiter.nse           http-vuln-cve2011-3192.nsehttp-form-brute.nse                     http-vuln-cve2011-3368.nsehttp-form-fuzzer.nse                    http-vuln-cve2012-1823.nsehttp-frontpage-login.nse                http-vuln-cve2013-0156.nsehttp-generator.nse                      http-vuln-cve2013-6786.nsehttp-git.nse                            http-vuln-cve2013-7091.nsehttp-gitweb-projects-enum.nse           http-vuln-cve2014-2126.nsehttp-google-malware.nse                 http-vuln-cve2014-2127.nsehttp-grep.nse                           http-vuln-cve2014-2128.nsehttp-headers.nse                        http-vuln-cve2014-2129.nsehttp-huawei-hg5xx-vuln.nse              http-vuln-cve2014-3704.nsehttp-icloud-findmyiphone.nse            http-vuln-cve2014-8877.nsehttp-icloud-sendmsg.nse                 http-vuln-cve2015-1427.nsehttp-iis-short-name-brute.nse           http-vuln-cve2015-1635.nsehttp-iis-webdav-vuln.nse                http-vuln-cve2017-1001000.nsehttp-internal-ip-disclosure.nse         http-vuln-cve2017-5638.nsehttp-joomla-brute.nse                   http-vuln-cve2017-5689.nsehttp-litespeed-sourcecode-download.nse  http-vuln-cve2017-8917.nsehttp-ls.nse                             http-vuln-misfortune-cookie.nsehttp-majordomo2-dir-traversal.nse       http-vuln-wnr1000-creds.nsehttp-malware-host.nse                   http-waf-detect.nsehttp-mcmp.nse                           http-waf-fingerprint.nsehttp-method-tamper.nse                  http-webdav-scan.nsehttp-methods.nse                        http-wordpress-brute.nsehttp-mobileversion-checker.nse          http-wordpress-enum.nsehttp-ntlm-info.nse                      http-wordpress-users.nsehttp-open-proxy.nse                     http-xssed.nsehttp-open-redirect.nse\nYou can specify to use any or a group of these installed scripts; moreover, you can install other user‚Äôs scripts and use them for your scans. Let‚Äôs begin with the default scripts. You can choose to run the scripts in the default category using ‚Äìscript&#x3D;default or simply adding -sC. In addition to default, categories include auth, broadcast, brute, default, discovery, dos, exploit, external, fuzzer, intrusive, malware, safe, version, and vuln. A brief description is shown in the following table.\n\n\n\nScript Category\nDescription\n\n\n\nauth\nAuthentication related scripts\n\n\nbroadcast\nDiscover hosts by sending broadcast messages\n\n\nbrute\nPerforms brute-force password auditing against logins\n\n\ndefault\nDefault scripts, same as -sC\n\n\ndiscovery\nRetrieve accessible information, such as database tables and DNS names\n\n\ndos\nDetects servers vulnerable to Denial of Service (DoS)\n\n\nexploit\nAttempts to exploit various vulnerable services\n\n\nexternal\nChecks using a third-party service, such as Geoplugin and Virustotal\n\n\nfuzzer\nLaunch fuzzing attacks\n\n\nintrusive\nIntrusive scripts such as brute-force attacks and exploitation\n\n\nmalware\nScans for backdoors\n\n\nsafe\nSafe scripts that won‚Äôt crash the target\n\n\nversion\nRetrieve service versions\n\n\nvuln\nChecks for vulnerabilities or exploit vulnerable services\n\n\nSome scripts belong to more than one category. Moreover, some scripts launch brute-force attacks against services, while others launch DoS attacks and exploit systems. Hence, it is crucial to be careful when selecting scripts to run if you don‚Äôt want to crash services or exploit them.\nWe use Nmap to run a SYN scan against MACHINE_IP and execute the default scripts in the console shown below. The command is sudo nmap -sS -sC MACHINE_IP, where -sC will ensure that Nmap will execute the default scripts following the SYN scan. There are new details that appear below. Take a look at the SSH service at port 22; Nmap recovered all four public keys related to the running server. Consider another example, the HTTP service at port 80; Nmap retrieved the default page title. We can see that the page has been left as default.\nPentester Terminal\n1234567891011121314151617181920212223242526272829303132333435pentester@TryHackMe$ sudo nmap -sS -sC MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-10 05:08 BSTNmap scan report for ip-10-10-161-170.eu-west-1.compute.internal (10.10.161.170)Host is up (0.0011s latency).Not shown: 994 closed portsPORT    STATE SERVICE22/tcp  open  ssh| ssh-hostkey: |   1024 d5:80:97:a3:a8:3b:57:78:2f:0a:78:ae:ad:34:24:f4 (DSA)|   2048 aa:66:7a:45:eb:d1:8c:00:e3:12:31:d8:76:8e:ed:3a (RSA)|   256 3d:82:72:a3:07:49:2e:cb:d9:87:db:08:c6:90:56:65 (ECDSA)|_  256 dc:f0:0c:89:70:87:65:ba:52:b1:e9:59:f7:5d:d2:6a (EdDSA)25/tcp  open  smtp|_smtp-commands: debra2.thm.local, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, | ssl-cert: Subject: commonName=debra2.thm.local| Not valid before: 2021-08-10T12:10:58|_Not valid after:  2031-08-08T12:10:58|_ssl-date: TLS randomness does not represent time80/tcp  open  http|_http-title: Welcome to nginx on Debian!110/tcp open  pop3|_pop3-capabilities: RESP-CODES CAPA TOP SASL UIDL PIPELINING AUTH-RESP-CODE111/tcp open  rpcbind| rpcinfo: |   program version   port/proto  service|   100000  2,3,4        111/tcp  rpcbind|   100000  2,3,4        111/udp  rpcbind|   100024  1          38099/tcp  status|_  100024  1          54067/udp  status143/tcp open  imap|_imap-capabilities: LITERAL+ capabilities IMAP4rev1 OK Pre-login ENABLE have LOGINDISABLEDA0001 listed SASL-IR ID more post-login LOGIN-REFERRALS IDLEMAC Address: 02:A0:E7:B5:B6:C5 (Unknown)Nmap done: 1 IP address (1 host up) scanned in 2.21 seconds \nYou can also specify the script by name using ‚Äìscript ‚ÄúSCRIPT-NAME‚Äù or a pattern such as ‚Äìscript ‚Äúftp*‚Äù, which would include ftp-brute. If you are unsure what a script does, you can open the script file with a text reader, such as less, or a text editor. In the case of ftp-brute, it states: ‚ÄúPerforms brute force password auditing against FTP servers.‚Äù You have to be careful as some scripts are pretty intrusive. Moreover, some scripts might be for a specific server and, if chosen at random, will waste your time with no benefit. As usual, make sure that you are authorized to launch such tests on the target server.\nLet‚Äôs consider a benign script, http-date, which we guess would retrieve the http server date and time, and this is indeed confirmed in its description: ‚ÄúGets the date from HTTP-like services. Also, it prints how much the date differs from local time‚Ä¶‚Äù On the AttackBox, we execute sudo nmap -sS -n ‚Äìscript ‚Äúhttp-date‚Äù MACHINE_IP as shown in the console below.\nPentester Terminal\n1234567891011121314151617pentester@TryHackMe$ sudo nmap -sS -n --script &quot;http-date&quot; MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-10 08:04 BSTNmap scan report for MACHINE_IPHost is up (0.0011s latency).Not shown: 994 closed portsPORT    STATE SERVICE22/tcp  open  ssh25/tcp  open  smtp80/tcp  open  http|_http-date: Fri, 10 Sep 2021 07:04:26 GMT; 0s from local time.110/tcp open  pop3111/tcp open  rpcbind143/tcp open  imapMAC Address: 02:44:87:82:AC:83 (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.78 seconds\nFinally, you might expand the functionality of Nmap beyond the official Nmap scripts; you can write your script or download Nmap scripts from the Internet. Downloading and using a Nmap script from the Internet holds a certain level of risk. So it is a good idea not to run a script from an author you don‚Äôt trust.\nQuestions and Answers of the Task\nTASK - 5 Saving the Output:Whenever you run a Nmap scan, it is only reasonable to save the results in a file. Selecting and adopting a good naming convention for your filenames is also crucial. The number of files can quickly grow and hinder your ability to find a previous scan result. The three main formats are:\n-Normal-Grepable (grepable)-XMLThere is a fourth one that we cannot recommend:-Script Kiddie\nNormalAs the name implies, the normal format is similar to the output you get on the screen when scanning a target. You can save your scan in normal format by using -oN FILENAME; N stands for normal. Here is an example of the result.\nPentester Terminal\n12345678910111213141516171819202122pentester@TryHackMe$ cat MACHINE_IP_scan.nmap # Nmap 7.60 scan initiated Fri Sep 10 05:14:19 2021 as: nmap -sS -sV -O -oN MACHINE_IP_scan MACHINE_IPNmap scan report for MACHINE_IPHost is up (0.00086s latency).Not shown: 994 closed portsPORT    STATE SERVICE VERSION22/tcp  open  ssh     OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0)25/tcp  open  smtp    Postfix smtpd80/tcp  open  http    nginx 1.6.2110/tcp open  pop3    Dovecot pop3d111/tcp open  rpcbind 2-4 (RPC #100000)143/tcp open  imap    Dovecot imapdMAC Address: 02:A0:E7:B5:B6:C5 (Unknown)Device type: general purposeRunning: Linux 3.XOS CPE: cpe:/o:linux:linux_kernel:3.13OS details: Linux 3.13Network Distance: 1 hopService Info: Host:  debra2.thm.local; OS: Linux; CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Sep 10 05:14:28 2021 -- 1 IP address (1 host up) scanned in 9.99 seconds\nGrepableThe grepable format has its name from the command grep; grep stands for Global Regular Expression Printer. In simple terms, it makes filtering the scan output for specific keywords or terms efficient. You can save the scan result in grepable format using -oG FILENAME. The scan output, displayed above in normal format, is shown in the console below using grepable format. The normal output is 21 lines; however, the grepable output is only 4 lines. The main reason is that Nmap wants to make each line meaningful and complete when the user applies grep. As a result, in grepable output, the lines are so long and are not convenient to read compared to normal output.\nPentester Terminal\n12345pentester@TryHackMe$ cat MACHINE_IP_scan.gnmap # Nmap 7.60 scan initiated Fri Sep 10 05:14:19 2021 as: nmap -sS -sV -O -oG MACHINE_IP_scan MACHINE_IPHost: MACHINE_IP\tStatus: UpHost: MACHINE_IP\tPorts: 22/open/tcp//ssh//OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0)/, 25/open/tcp//smtp//Postfix smtpd/, 80/open/tcp//http//nginx 1.6.2/, 110/open/tcp//pop3//Dovecot pop3d/, 111/open/tcp//rpcbind//2-4 (RPC #100000)/, 143/open/tcp//imap//Dovecot imapd/\tIgnored State: closed (994)\tOS: Linux 3.13\tSeq Index: 257\tIP ID Seq: All zeros# Nmap done at Fri Sep 10 05:14:28 2021 -- 1 IP address (1 host up) scanned in 9.99 seconds\nAn example use of grep is grep KEYWORD TEXT_FILE; this command will display all the lines containing the provided keyword. Let‚Äôs compare the output of using grep on normal output and grepable output. You will notice that the former does not provide the IP address of the host. Instead, it returned 80&#x2F;tcp open http nginx 1.6.2, making it very inconvenient if you are sifting through the scan results of multiple systems. However, the latter provides enough information, such as the host‚Äôs IP address, in each line to make it complete.\nPentester Terminal\n123456pentester@TryHackMe$ grep http MACHINE_IP_scan.nmap 80/tcp  open  http    nginx 1.6.2OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Pentester Terminalpentester@TryHackMe$ grep http MACHINE_IP_scan.gnmap Host: MACHINE_IP\tPorts: 22/open/tcp//ssh//OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0)/, 25/open/tcp//smtp//Postfix smtpd/, 80/open/tcp//http//nginx 1.6.2/, 110/open/tcp//pop3//Dovecot pop3d/, 111/open/tcp//rpcbind//2-4 (RPC #100000)/, 143/open/tcp//imap//Dovecot imapd/\tIgnored State: closed (994)\tOS: Linux 3.13\tSeq Index: 257\tIP ID Seq: All zeros\nXMLThe third format is XML. You can save the scan results in XML format using -oX FILENAME. The XML format would be most convenient to process the output in other programs. Conveniently enough, you can save the scan output in all three formats using -oA FILENAME to combine -oN, -oG, and -oX for normal, grepable, and XML.\nScript KiddieA fourth format is script kiddie. You can see that this format is useless if you want to search the output for any interesting keywords or keep the results for future reference. However, you can use it to save the output of the scan nmap -sS 127.0.0.1 -oS FILENAME, display the output filename, and look 31337 in front of friends who are not tech-savvy.\nPentester Terminal\n12345678910111213141516171819pentester@TryHackMe$ cat MACHINE_IP_scan.kiddie $tart!ng nMaP 7.60 ( httpz://nMap.0rG ) at 2021-09-10 05:17 B$TNmap scan rEp0rt f0r |p-10-10-161-170.EU-w3$t-1.C0mputE.intErnaL (10.10.161.170)HOSt !s uP (0.00095s LatEncy).N0T $H0wn: 994 closed pOrtSPoRT    st4Te SeRViC3 VERS1on22/tcp  Open  ssH     Op3n$$H 6.7p1 Deb|an 5+dEb8u8 (pr0t0COl 2.0)25/tCp  Op3n  SmTp    P0$Tf!x Smtpd80/tcp  0p3n  http    Ng1nx 1.6.2110/tCP 0pen  pOP3    d0v3coT P0p3D111/TcP op3n  RpcbInd 2-4 (RPC #100000)143/Tcp opEn  Imap    Dovecot 1mApdmAC 4Ddr3sz: 02:40:e7:B5:B6:c5 (Unknown)Netw0rk d!stanc3: 1 h0p$3rv1c3 InFO: Ho$t:  dEBra2.thM.lOcal; 0s: Linux; cPe: cP3:/0:linux:l|nux_k3rnel0S and servIc3 D3tEcti0n pErf0rm3d. Plea$e r3p0rt any !nc0RrecT rE$ultz at hTtpz://nmap.0rg/$ubmit/ .Nmap d0nE: 1 |P addr3SS (1 hoSt up) $CaNnEd !n 21.80 s3c0Ndz \n\nQuestions and answers of this Task\nSUMMARYSummary of Nmap Options\nIn this room, we learned how to detect the running services and their versions along with the host operating system. We learned how to enable traceroute and we covered selecting one or more scripts to aid in penetration testing. Finally, we covered the different formats to save the scan results for future reference. The table below summarizes the most important options we covered in this room.\n\n\n\nOption\nMeaning\n\n\n\n-sV\ndetermine service&#x2F;version info on open ports\n\n\n-sV ‚Äìversion-light\ntry the most likely probes (2)\n\n\n-sV ‚Äìversion-all\ntry all available probes (9)\n\n\n-O\ndetect OS\n\n\n‚Äìtraceroute\nrun traceroute to target\n\n\n‚Äìscript&#x3D;SCRIPTS\nNmap scripts to run\n\n\n-sC or ‚Äìscript&#x3D;default\nrun default scripts\n\n\n-A\nequivalent to -sV -O -sC ‚Äìtraceroute\n\n\n-oN\nsave output in normal format\n\n\n-oG\nsave output in grepable format\n\n\n-oX\nsave output in XML format\n\n\n-oA\nsave output in normal, XML and Grepable formats\n\n\nThank you,Author : Satvik ‚ù§Ô∏è\n","slug":"Nmap-Post-Port-Scans","date":"2024-05-18T11:07:59.000Z","categories_index":"cybersecurity,THM,NMAP","tags_index":"tryhackme,nmap,information-gathering","author_index":"Satvik"},{"id":"cea3414c622367bb74c9fe88dd9fca82","title":"Nmap Advanced Port Scans","content":"Cheatsheet of the commands used in this room\n\n\nPort Scan Type\nExample Command\n\n\n\nTCP Null Scan\nsudo nmap -sN 10.10.214.83\n\n\nTCP FIN Scan\nsudo nmap -sF 10.10.214.83\n\n\nTCP Xmas Scan\nsudo nmap -sX 10.10.214.83\n\n\nTCP Maimon Scan\nsudo nmap -sM 10.10.214.83\n\n\nTCP ACK Scan\nsudo nmap -sA 10.10.214.83\n\n\nTCP Window Scan\nsudo nmap -sW 10.10.214.83\n\n\nCustom TCP Scan\nsudo nmap ‚Äìscanflags URGACKPSHRSTSYNFIN 10.10.214.83\n\n\nSpoofed Source IP\nsudo nmap -S SPOOFED_IP 10.10.214.83\n\n\nSpoofed MAC Address\n‚Äìspoof-mac SPOOFED_MAC\n\n\nDecoy Scan\nnmap -D DECOY_IP,ME 10.10.214.83\n\n\nIdle (Zombie) Scan\nsudo nmap -sI ZOMBIE_IP 10.10.214.83\n\n\nFragment IP data into 8 bytes\n-f\n\n\nFragment IP data into 16 bytes\n-ff\n\n\n\n\n\nOption\nPurpose\n\n\n\n‚Äìsource-port PORT_NUM\nspecify source port number\n\n\n‚Äìdata-length NUM\nappend random data to reach given length\n\n\nThese scan types rely on setting TCP flags in unexpected ways to prompt ports for a reply. Null, FIN, and Xmas scans provoke a response from closed ports, while Maimon, ACK, and Window scans provoke a response from open and closed ports.\n\n\n\nOption\nPurpose\n\n\n\n‚Äìreason\nexplains how Nmap made its conclusion\n\n\n-v\nverbose\n\n\n-vv\nvery verbose\n\n\n-d\ndebugging\n\n\n-dd\nmore details for debugging\n\n\n\nIntroductionThis room is the third in the Nmap series (part of the Introduction to Network Security module). In the first two rooms, we learned about live host discovery and basic port scans.\n\nNmap Live Host Discovery\nNmap Basic Port Scans\nNmap Advanced Port Scans\nNmap Post Port ScansIn Nmap Basic Port Scans, we covered TCP flags and reviewed the TCP 3-way handshake. To initiate a connection, TCP requires the first packet to have the SYN flag set. Consequently, we can tell if a TCP port is open based on the response we receive.\n\nSecurity researchers and hackers contemplated the TCP flags, shown in the figure below and explained in the previous room, and started to experiment. They wanted to know what would happen if we send a TCP packet, which is not part of any ongoing TCP connection, with one or more flags set.\n\nFor instance, an ACK flag is set when you want to acknowledge received data. An ACK scan is like trying to acknowledge data that was neither sent nor received in the first place. Consider this simple analogy, someone coming to you out of nowhere to tell you, ‚Äúyes, I hear you, please continue.‚Äù when you haven‚Äôt said anything.\nThis room explains advanced types of scans and scan options. Some of these scan types can be useful against specific systems, while others are useful in particular network setups. We will cover the following types of port scans:\nNull ScanFIN ScanXmas ScanMaimon ScanACK ScanWindow ScanCustom Scan\nMoreover, we will cover the following:\nSpoofing IPSpoofing MACDecoy ScanFragmented PacketsIdle&#x2F;Zombie ScanWe will discuss options and techniques to evade firewalls and IDS systems. We also cover options to get more verbose details from Nmap.\nQuestions &amp; Answers in the TaskLaunch the AttackBox by using the Start AttackBox button and get ready to experiment with different types of Nmap scans against different virtual machines.Answer : Click Submit\nTASK-2 TCP Null Scan, FIN Scan, and Xmas ScanLet‚Äôs start with the following three types of scans:\n\nNull Scan\nFIN Scan\nXmas Scan\n\nNull ScanThe null scan does not set any flag; all six flag bits are set to zero. You can choose this scan using the -sN option. A TCP packet with no flags set will not trigger any response when it reaches an open port, as shown in the figure below. Therefore, from Nmap‚Äôs perspective, a lack of reply in a null scan indicates that either the port is open or a firewall is blocking the packet.\n\nHowever, we expect the target server to respond with an RST packet if the port is closed. Consequently, we can use the lack of RST response to figure out the ports that are not closed: open or filtered.\n\nBelow is an example of a null scan against a Linux server. The null scan we carried out has successfully identified the six open ports on the target system. Because the null scan relies on the lack of a response to infer that the port is not closed, it cannot indicate with certainty that these ports are open; there is a possibility that the ports are not responding due to a firewall rule.\nPentester Terminal\n12345678910111213141516pentester@TryHackMe$ sudo nmap -sN MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:30 BSTNmap scan report for MACHINE_IPHost is up (0.00066s latency).Not shown: 994 closed portsPORT    STATE         SERVICE22/tcp  open|filtered ssh25/tcp  open|filtered smtp80/tcp  open|filtered http110/tcp open|filtered pop3111/tcp open|filtered rpcbind143/tcp open|filtered imapMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 96.50 seconds\nNote that many Nmap options require root privileges. Unless you are running Nmap as root, you need to use sudo as in the example above using the -sN option.\nFIN ScanThe FIN scan sends a TCP packet with the FIN flag set. You can choose this scan type using the -sF option. Similarly, no response will be sent if the TCP port is open. Again, Nmap cannot be sure if the port is open or if a firewall is blocking the traffic related to this TCP port.\n\nHowever, the target system should respond with an RST if the port is closed. Consequently, we will be able to know which ports are closed and use this knowledge to infer the ports that are open or filtered. It‚Äôs worth noting some firewalls will ‚Äòsilently‚Äô drop the traffic without sending an RST.\n\nBelow is an example of a FIN scan against a Linux server. The result is quite similar to the result we obtained earlier using a null scan.\nPentester Terminal\n12345678910111213141516pentester@TryHackMe$ sudo nmap -sF MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:32 BSTNmap scan report for MACHINE_IPHost is up (0.0018s latency).Not shown: 994 closed portsPORT    STATE         SERVICE22/tcp  open|filtered ssh25/tcp  open|filtered smtp80/tcp  open|filtered http110/tcp open|filtered pop3111/tcp open|filtered rpcbind143/tcp open|filtered imapMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 96.52 seconds\n\nXmas ScanThe Xmas scan gets its name after Christmas tree lights. An Xmas scan sets the FIN, PSH, and URG flags simultaneously. You can select Xmas scan with the option -sX.\nLike the Null scan and FIN scan, if an RST packet is received, it means that the port is closed. Otherwise, it will be reported as open|filtered.\nThe following two figures show the case when the TCP port is open and the case when the TCP port is closed.\n\nThe console output below shows an example of a Xmas scan against a Linux server. The obtained results are pretty similar to that of the null scan and the FIN scan.\nPentester Terminal\n1234567891011121314151617pentester@TryHackMe$ sudo nmap -sX MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:34 BSTNmap scan report for MACHINE_IPHost is up (0.00087s latency).Not shown: 994 closed portsPORT    STATE         SERVICE22/tcp  open|filtered ssh25/tcp  open|filtered smtp80/tcp  open|filtered http110/tcp open|filtered pop3111/tcp open|filtered rpcbind143/tcp open|filtered imapMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 84.85 seconds\nOne scenario where these three scan types can be efficient is when scanning a target behind a stateless (non-stateful) firewall. A stateless firewall will check if the incoming packet has the SYN flag set to detect a connection attempt. Using a flag combination that does not match the SYN packet makes it possible to deceive the firewall and reach the system behind it. However, a stateful firewall will practically block all such crafted packets and render this kind of scan useless.\nQuestions and answers of the task\nTASK 3 - TCP  Maimon ScanUriel Maimon first described this scan in 1996. In this scan, the FIN and ACK bits are set. The target should send an RST packet as a response. However, certain BSD-derived systems drop the packet if it is an open port exposing the open ports. This scan won‚Äôt work on most targets encountered in modern networks; however, we include it in this room to better understand the port scanning mechanism and the hacking mindset. To select this scan type, use the -sM option.\nMost target systems respond with an RST packet regardless of whether the TCP port is open. In such a case, we won‚Äôt be able to discover the open ports. The figure below shows the expected behaviour in the cases of both open and closed TCP ports.\n\nThe console output below is an example of a TCP Maimon scan against a Linux server. As mentioned, because open ports and closed ports are behaving the same way, the Maimon scan could not discover any open ports on the target system.\nPentester Terminal\n123456789pentester@TryHackMe$ sudo nmap -sM 10.10.252.27Starting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:36 BSTNmap scan report for ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27)Host is up (0.00095s latency).All 1000 scanned ports on ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27) are closedMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.61 seconds\nThis type of scan is not the first scan one would pick to discover a system; however, it is important to know about it as you don‚Äôt know when it could come in handy.\nQuestions&amp;Answers of the task\nTASK 4 - TCP ACK, Window, and Custom ScanThis task will cover how to perform a TCP ACK scan, a TCP window scan, and how to create your custom flag scan.\nTCP ACK ScanLet‚Äôs start with the TCP ACK scan. As the name implies, an ACK scan will send a TCP packet with the ACK flag set. Use the -sA option to choose this scan. As we show in the figure below, the target would respond to the ACK with RST regardless of the state of the port. This behaviour happens because a TCP packet with the ACK flag set should be sent only in response to a received TCP packet to acknowledge the receipt of some data, unlike our case. Hence, this scan won‚Äôt tell us whether the target port is open in a simple setup.\n\nIn the following example, we scanned the target VM before installing a firewall on it. As expected, we couldn‚Äôt learn which ports were open.\nPentester Terminal\n123456789pentester@TryHackMe$ sudo nmap -sA MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:37 BSTNmap scan report for MACHINE_IPHost is up (0.0013s latency).All 1000 scanned ports on MACHINE_IP are unfilteredMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.68 seconds\nThis kind of scan would be helpful if there is a firewall in front of the target. Consequently, based on which ACK packets resulted in responses, you will learn which ports were not blocked by the firewall. In other words, this type of scan is more suitable to discover firewall rule sets and configuration.\nAfter setting up the target VM MACHINE_IP with a firewall, we repeated the ACK scan. This time, we received some interesting results. As seen in the console output below, we have three ports that aren‚Äôt being blocked by the firewall. This result indicates that the firewall is blocking all other ports except for these three ports.\nPentester Terminal\n12345678910111213pentester@TryHackMe$ sudo nmap -sA MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-07 11:34 BSTNmap scan report for MACHINE_IPHost is up (0.00046s latency).Not shown: 997 filtered portsPORT    STATE      SERVICE22/tcp  unfiltered ssh25/tcp  unfiltered smtp80/tcp  unfiltered httpMAC Address: 02:78:C0:D0:4E:E9 (Unknown)Nmap done: 1 IP address (1 host up) scanned in 15.45 seconds\n\nWindow ScanAnother similar scan is the TCP window scan. The TCP window scan is almost the same as the ACK scan; however, it examines the TCP Window field of the RST packets returned. On specific systems, this can reveal that the port is open. You can select this scan type with the option -sW. As shown in the figure below, we expect to get an RST packet in reply to our ‚Äúuninvited‚Äù ACK packets, regardless of whether the port is open or closed.\n\nSimilarly, launching a TCP window scan against a Linux system with no firewall will not provide much information. As we can see in the console output below, the results of the window scan against a Linux server with no firewall didn‚Äôt give any extra information compared to the ACK scan executed earlier.\nPentester Terminal\n123456789pentester@TryHackMe$ sudo nmap -sW MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:38 BSTNmap scan report for MACHINE_IPHost is up (0.0011s latency).All 1000 scanned ports on ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27) are closedMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.60 seconds\nHowever, as you would expect, if we repeat our TCP window scan against a server behind a firewall, we expect to get more satisfying results. In the console output shown below, the TCP window scan pointed that three ports are detected as closed. (This is in contrast with the ACK scan that labelled the same three ports as unfiltered.) Although we know that these three ports are not closed, we realize they responded differently, indicating that the firewall does not block them.\nPentester Terminal\npentester@TryHackMe$ sudo nmap -sW MACHINE_IP123456789101112Starting Nmap 7.60 ( https://nmap.org ) at 2021-09-07 11:39 BSTNmap scan report for MACHINE_IPHost is up (0.00040s latency).Not shown: 997 filtered portsPORT    STATE  SERVICE22/tcp  closed ssh25/tcp  closed smtp80/tcp  closed httpMAC Address: 02:78:C0:D0:4E:E9 (Unknown)Nmap done: 1 IP address (1 host up) scanned in 14.84 seconds\n\nCustom ScanIf you want to experiment with a new TCP flag combination beyond the built-in TCP scan types, you can do so using ‚Äìscanflags. For instance, if you want to set SYN, RST, and FIN simultaneously, you can do so using ‚Äìscanflags RSTSYNFIN. As shown in the figure below, if you develop your custom scan, you need to know how the different ports will behave to interpret the results in different scenarios correctly.\n\nFinally, it is essential to note that the ACK scan and the window scan were very efficient at helping us map out the firewall rules. However, it is vital to remember that just because a firewall is not blocking a specific port, it does not necessarily mean that a service is listening on that port. For example, there is a possibility that the firewall rules need to be updated to reflect recent service changes. Hence, ACK and window scans are exposing the firewall rules, not the services.\nQuestions and Answers of this Task\nTASK 5 Spoofing and DecoysIn some network setups, you will be able to scan a target system using a spoofed IP address and even a spoofed MAC address. Such a scan is only beneficial in a situation where you can guarantee to capture the response. If you try to scan a target from some random network using a spoofed IP address, chances are you won‚Äôt have any response routed to you, and the scan results could be unreliable.\nThe following figure shows the attacker launching the command nmap -S SPOOFED_IP MACHINE_IP. Consequently, Nmap will craft all the packets using the provided source IP address SPOOFED_IP. The target machine will respond to the incoming packets sending the replies to the destination IP address SPOOFED_IP. For this scan to work and give accurate results, the attacker needs to monitor the network traffic to analyze the replies.\n\nIn brief, scanning with a spoofed IP address is three steps:\nAttacker sends a packet with a spoofed source IP address to the target machine.Target machine replies to the spoofed IP address as the destination.Attacker captures the replies to figure out open ports.In general, you expect to specify the network interface using -e and to explicitly disable ping scan -Pn. Therefore, instead of nmap -S SPOOFED_IP MACHINE_IP, you will need to issue nmap -e NET_INTERFACE -Pn -S SPOOFED_IP MACHINE_IP to tell Nmap explicitly which network interface to use and not to expect to receive a ping reply. It is worth repeating that this scan will be useless if the attacker system cannot monitor the network for responses.\nWhen you are on the same subnet as the target machine, you would be able to spoof your MAC address as well. You can specify the source MAC address using ‚Äìspoof-mac SPOOFED_MAC. This address spoofing is only possible if the attacker and the target machine are on the same Ethernet (802.3) network or same WiFi (802.11).\nSpoofing only works in a minimal number of cases where certain conditions are met. Therefore, the attacker might resort to using decoys to make it more challenging to be pinpointed. The concept is simple, make the scan appear to be coming from many IP addresses so that the attacker‚Äôs IP address would be lost among them. As we see in the figure below, the scan of the target machine will appear to be coming from 3 different sources, and consequently, the replies will go the decoys as well.\n\nYou can launch a decoy scan by specifying a specific or random IP address after -D. For example, nmap -D 10.10.0.1,10.10.0.2,ME MACHINE_IP will make the scan of MACHINE_IP appear as coming from the IP addresses 10.10.0.1, 10.10.0.2, and then ME to indicate that your IP address should appear in the third order. Another example command would be nmap -D 10.10.0.1,10.10.0.2,RND,RND,ME MACHINE_IP, where the third and fourth source IP addresses are assigned randomly, while the fifth source is going to be the attacker‚Äôs IP address. In other words, each time you execute the latter command, you would expect two new random IP addresses to be the third and fourth decoy sources.\nTASK 6 - Fragmented PacketsFirewallA firewall is a piece of software or hardware that permits packets to pass through or blocks them. It functions based on firewall rules, summarized as blocking all traffic with exceptions or allowing all traffic with exceptions. For instance, you might block all traffic to your server except those coming to your web server. A traditional firewall inspects, at least, the IP header and the transport layer header. A more sophisticated firewall would also try to examine the data carried by the transport layer.\nIDSAn intrusion detection system (IDS) inspects network packets for select behavioural patterns or specific content signatures. It raises an alert whenever a malicious rule is met. In addition to the IP header and transport layer header, an IDS would inspect the data contents in the transport layer and check if it matches any malicious patterns. How can you make it less likely for a traditional firewall&#x2F;IDS to detect your Nmap activity? It is not easy to answer this; however, depending on the type of firewall&#x2F;IDS, you might benefit from dividing the packet into smaller packets.\nFragmented PacketsNmap provides the option -f to fragment packets. Once chosen, the IP data will be divided into 8 bytes or less. Adding another -f (-f -f or -ff) will split the data into 16 byte-fragments instead of 8. You can change the default value by using the ‚Äìmtu; however, you should always choose a multiple of 8.\nTo properly understand fragmentation, we need to look at the IP header in the figure below. It might look complicated at first, but we notice that we know most of its fields. In particular, notice the source address taking 32 bits (4 bytes) on the fourth row, while the destination address is taking another 4 bytes on the fifth row. The data that we will fragment across multiple packets is highlighted in red. To aid in the reassembly on the recipient side, IP uses the identification (ID) and fragment offset, shown on the second row of the figure below.\n\nLet‚Äôs compare running sudo nmap -sS -p80 10.20.30.144 and sudo nmap -sS -p80 -f 10.20.30.144. As you know by now, this will use stealth TCP SYN scan on port 80; however, in the second command, we are requesting Nmap to fragment the IP packets.\nIn the first two lines, we can see an ARP query and response. Nmap issued an ARP query because the target is on the same Ethernet. The second two lines show a TCP SYN ping and a reply. The fifth line is the beginning of the port scan; Nmap sends a TCP SYN packet to port 80. In this case, the IP header is 20 bytes, and the TCP header is 24 bytes. Note that the minimum size of the TCP header is 20 bytes.\n\nWith fragmentation requested via -f, the 24 bytes of the TCP header will be divided into multiples of 8 bytes, with the last fragment containing 8 bytes or less of the TCP header. Since 24 is divisible by 8, we got 3 IP fragments; each has 20 bytes of IP header and 8 bytes of TCP header. We can see the three fragments between the fifth and the seventh lines.\n\nNote that if you added -ff (or -f -f), the fragmentation of the data will be multiples of 16. In other words, the 24 bytes of the TCP header, in this case, would be divided over two IP fragments, the first containing 16 bytes and the second containing 8 bytes of the TCP header.\nOn the other hand, if you prefer to increase the size of your packets to make them look innocuous, you can use the option ‚Äìdata-length NUM, where num specifies the number of bytes you want to append to your packets.\nQuestion and Answers of the task\nTASK 7 - Idle &#x2F; Zombie ScanSpoofing the source IP address can be a great approach to scanning stealthily. However, spoofing will only work in specific network setups. It requires you to be in a position where you can monitor the traffic. Considering these limitations, spoofing your IP address can have little use; however, we can give it an upgrade with the idle scan.\nThe idle scan, or zombie scan, requires an idle system connected to the network that you can communicate with. Practically, Nmap will make each probe appear as if coming from the idle (zombie) host, then it will check for indicators whether the idle (zombie) host received any response to the spoofed probe. This is accomplished by checking the IP identification (IP ID) value in the IP header. You can run an idle scan using nmap -sI ZOMBIE_IP MACHINE_IP, where ZOMBIE_IP is the IP address of the idle host (zombie).\nThe idle (zombie) scan requires the following three steps to discover whether a port is open:\nTrigger the idle host to respond so that you can record the current IP ID on the idle host.Send a SYN packet to a TCP port on the target. The packet should be spoofed to appear as if it was coming from the idle host (zombie) IP address.Trigger the idle machine again to respond so that you can compare the new IP ID with the one received earlier.Let‚Äôs explain with figures. In the figure below, we have the attacker system probing an idle machine, a multi-function printer. By sending a SYN&#x2F;ACK, it responds with an RST packet containing its newly incremented IP ID.\n\nThe attacker will send a SYN packet to the TCP port they want to check on the target machine in the next step. However, this packet will use the idle host (zombie) IP address as the source. Three scenarios would arise. In the first scenario, shown in the figure below, the TCP port is closed; therefore, the target machine responds to the idle host with an RST packet. The idle host does not respond; hence its IP ID is not incremented.\n\nIn the second scenario, as shown below, the TCP port is open, so the target machine responds with a SYN&#x2F;ACK to the idle host (zombie). The idle host responds to this unexpected packet with an RST packet, thus incrementing its IP ID.\n\nIn the third scenario, the target machine does not respond at all due to firewall rules. This lack of response will lead to the same result as with the closed port; the idle host won‚Äôt increase the IP ID.\nFor the final step, the attacker sends another SYN&#x2F;ACK to the idle host. The idle host responds with an RST packet, incrementing the IP ID by one again. The attacker needs to compare the IP ID of the RST packet received in the first step with the IP ID of the RST packet received in this third step. If the difference is 1, it means the port on the target machine was closed or filtered. However, if the difference is 2, it means that the port on the target was open.\nIt is worth repeating that this scan is called an idle scan because choosing an idle host is indispensable for the accuracy of the scan. If the ‚Äúidle host‚Äù is busy, all the returned IP IDs would be useless.\nQuestions and answers of this task\nTASK 8 - Getting more dteailsYou might consider adding ‚Äìreason if you want Nmap to provide more details regarding its reasoning and conclusions. Consider the two scans below to the system; however, the latter adds ‚Äìreason.\nPentester Terminal\n12345678910111213141516pentester@TryHackMe$ sudo nmap -sS 10.10.252.27Starting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:39 BSTNmap scan report for ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27)Host is up (0.0020s latency).Not shown: 994 closed portsPORT    STATE SERVICE22/tcp  open  ssh25/tcp  open  smtp80/tcp  open  http110/tcp open  pop3111/tcp open  rpcbind143/tcp open  imapMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.60 seconds\nPentester Terminal\npentester@TryHackMe$ sudo nmap -sS --reason 10.10.252.2712345678910111213141516Starting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:40 BSTNmap scan report for ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27)Host is up, received arp-response (0.0020s latency).Not shown: 994 closed portsReason: 994 resetsPORT    STATE SERVICE REASON22/tcp  open  ssh     syn-ack ttl 6425/tcp  open  smtp    syn-ack ttl 6480/tcp  open  http    syn-ack ttl 64110/tcp open  pop3    syn-ack ttl 64111/tcp open  rpcbind syn-ack ttl 64143/tcp open  imap    syn-ack ttl 64MAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.59 seconds\nProviding the ‚Äìreason flag gives us the explicit reason why Nmap concluded that the system is up or a particular port is open. In this console output above, we can see that this system is considered online because Nmap ‚Äúreceived arp-response.‚Äù On the other hand, we know that the SSH port is deemed to be open because Nmap received a ‚Äúsyn-ack‚Äù packet back.\nFor more detailed output, you can consider using -v for verbose output or -vv for even more verbosity.\nPentester Terminal12345678910111213141516171819202122232425262728293031323334pentester@TryHackMe$ sudo nmap -sS -vv 10.10.252.27Starting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:41 BSTInitiating ARP Ping Scan at 10:41Scanning 10.10.252.27 [1 port]Completed ARP Ping Scan at 10:41, 0.22s elapsed (1 total hosts)Initiating Parallel DNS resolution of 1 host. at 10:41Completed Parallel DNS resolution of 1 host. at 10:41, 0.00s elapsedInitiating SYN Stealth Scan at 10:41Scanning ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27) [1000 ports]Discovered open port 22/tcp on 10.10.252.27Discovered open port 25/tcp on 10.10.252.27Discovered open port 80/tcp on 10.10.252.27Discovered open port 110/tcp on 10.10.252.27Discovered open port 111/tcp on 10.10.252.27Discovered open port 143/tcp on 10.10.252.27Completed SYN Stealth Scan at 10:41, 1.25s elapsed (1000 total ports)Nmap scan report for ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27)Host is up, received arp-response (0.0019s latency).Scanned at 2021-08-30 10:41:02 BST for 1sNot shown: 994 closed portsReason: 994 resetsPORT    STATE SERVICE REASON22/tcp  open  ssh     syn-ack ttl 6425/tcp  open  smtp    syn-ack ttl 6480/tcp  open  http    syn-ack ttl 64110/tcp open  pop3    syn-ack ttl 64111/tcp open  rpcbind syn-ack ttl 64143/tcp open  imap    syn-ack ttl 64MAC Address: 02:45:BF:8A:2D:6B (Unknown)Read data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 1.59 seconds           Raw packets sent: 1002 (44.072KB) | Rcvd: 1002 (40.092KB)\nIf -vv does not satisfy your curiosity, you can use -d for debugging details or -dd for even more details. You can guarantee that using -d will create an output that extends beyond a single screen.\nQuestions and answers of this task\nSUMMARY\n\n\nPort Scan Type\nExample Command\n\n\n\nTCP Null Scan\nsudo nmap -sN 10.10.214.83\n\n\nTCP FIN Scan\nsudo nmap -sF 10.10.214.83\n\n\nTCP Xmas Scan\nsudo nmap -sX 10.10.214.83\n\n\nTCP Maimon Scan\nsudo nmap -sM 10.10.214.83\n\n\nTCP ACK Scan\nsudo nmap -sA 10.10.214.83\n\n\nTCP Window Scan\nsudo nmap -sW 10.10.214.83\n\n\nCustom TCP Scan\nsudo nmap ‚Äìscanflags URGACKPSHRSTSYNFIN 10.10.214.83\n\n\nSpoofed Source IP\nsudo nmap -S SPOOFED_IP 10.10.214.83\n\n\nSpoofed MAC Address\n‚Äìspoof-mac SPOOFED_MAC\n\n\nDecoy Scan\nnmap -D DECOY_IP,ME 10.10.214.83\n\n\nIdle (Zombie) Scan\nsudo nmap -sI ZOMBIE_IP 10.10.214.83\n\n\nFragment IP data into 8 bytes\n-f\n\n\nFragment IP data into 16 bytes\n-ff\n\n\n\n\n\nOption\nPurpose\n\n\n\n‚Äìsource-port PORT_NUM\nspecify source port number\n\n\n‚Äìdata-length NUM\nappend random data to reach given length\n\n\nThese scan types rely on setting TCP flags in unexpected ways to prompt ports for a reply. Null, FIN, and Xmas scans provoke a response from closed ports, while Maimon, ACK, and Window scans provoke a response from open and closed ports.\n\n\n\nOption\nPurpose\n\n\n\n‚Äìreason\nexplains how Nmap made its conclusion\n\n\n-v\nverbose\n\n\n-vv\nvery verbose\n\n\n-d\ndebugging\n\n\n-dd\nmore details for debugging\n\n\n\n","slug":"Nmap-Advanced-Port-Scans","date":"2024-05-16T15:27:44.000Z","categories_index":"cybersecurity,THM,NMAP","tags_index":"tryhackme,nmap,information-gathering","author_index":"Satvik"},{"id":"2bcf8d570917965c65fd2618756df225","title":"Live Host Discovery - NMAP","content":"IntroductionWe can find live hosts on a network by using any of the 3 scans that are named below:\n\nARP scan: This scan uses ARP requests to discover live hosts\nICMP scan: This scan uses ICMP requests to identify live hosts\nTCP&#x2F;UDP ping scan: This scan sends packets to TCP ports and UDP ports to determine live hosts.\n\nA Nmap scan usually goes through the steps shown in the figure below, although many are optional and depend on the command-line arguments you provide.\n\n\nTASK 2 - SUBNETWORKSA network segment is a group of computers connected using a shared medium. For instance, the medium can be the Ethernet switch or WiFi access point. In an IP network, a subnetwork is usually the equivalent of one or more network segments connected together and configured to use the same router. The network segment refers to a physical connection, while a subnetwork refers to a logical connection.\nIn the following network diagram, we have four network segments or subnetworks. Generally speaking, your system would be connected to one of these network segments&#x2F;subnetworks. A subnetwork, or simply a subnet, has its own IP address range and is connected to a more extensive network via a router. There might be a firewall enforcing security policies depending on each network.\n\nThe figure above shows two types of subnets:\n\nSubnets with /16, which means that the subnet mask can be written as 255.255.0.0. This subnet can have around 65 thousand hosts.\nSubnets with /24, which indicates that the subnet mask can be expressed as 255.255.255.0. This subnet can have around 250 hosts\n\nIf you are in Network A, you can use ARP only to discover the devices within that subnet (10.1.100.0&#x2F;24). Suppose you are connected to a subnet different from the subnet of the target system(s). In that case, all packets generated by your scanner will be routed via the default gateway (router) to reach the systems on another subnet; however, the ARP queries won‚Äôt be routed and hence cannot cross the subnet router. ARP is a link-layer protocol, and ARP packets are bound to their subnet.\nAnswer the questions below\nSend a packet with the following:\n\n\nFrom computer1\nTo computer1 (to indicate it is broadcast)\nPacket Type: ‚ÄúARP Request‚Äù\nData: computer6 (because we are asking for computer6 MAC address using ARP Request)\n\nHow many devices can see the ARP Request?\nAnswer : 4\nDid computer6 receive the ARP Request? (Y&#x2F;N)Answer : N\nSend a packet with the following:\n\n\nFrom computer4\nTo computer4 (to indicate it is broadcast)\nPacket Type: ‚ÄúARP Request‚Äù\nData: computer6 (because we are asking for computer6 MAC address using ARP Request)\n\nHow many devices can see the ARP Request?\nAnswer : 4\nDid computer6 reply to the ARP Request? (Y&#x2F;N)\nAnswer : Y\n\nTASK 3 - Enumerating TargetsWe mentioned the different techniques we can use for scanning in Task 1. Before we explain each in detail and put it into use against a live target, we need to specify the targets we want to scan. Generally speaking, you can provide a list, a range, or a subnet. Examples of target specification are:\n\nlist: MACHINE_IP scanme.nmap.org example.com will scan 3 IP addresses.\nrange: 10.11.12.15-20 will scan 6 IP addresses: 10.11.12.15, **10.11.12.16‚Ä¶ and 10.11.12.20.\nsubnet: MACHINE_IP/30 will scan 4 IP addresses.\n\nYou can also provide a file as input for your list of targets, nmap -iL list_of_hosts.txt.\nIf you want to check the list of hosts that Nmap will scan, you can use nmap -sL TARGETS. This option will give you a detailed list of the hosts that Nmap will scan without scanning them; however, Nmap will attempt a reverse-DNS resolution on all the targets to obtain their names. Names might reveal various information to the pentester. (If you don‚Äôt want Nmap to the DNS server, you can add -n.)\nLaunch the AttackBox using the Start AttackBox button, open the terminal when the AttackBox is ready, and use Nmap to answer the following.\nQ1 . What is the first IP address Nmap would scan if you provided 10.10.12.13/29 as your target?\nAnswer :we can use the command nmap -sL 10.10.12.13/29 \n\nso the answer is10.10.12.8\n**Q2.**How many IP addresses will Nmap scan if you provide the following range 10.10.0-255.101-125? \nwe can use the command nmap -sL **10.10.0-255.101-125** \n\nTASK - 4 Discovering Live HostsLet‚Äôs revisit the TCP&#x2F;IP layers shown in the figure next. We will leverage the protocols to discover the live hosts. Starting from bottom to top, we can use:\n\nARP from Link Layer\nICMP from Network Layer\nTCP from Transport Layer\nUDP from Transport Layer\n\n\nBefore we discuss how scanners can use each in detail, we will briefly review these four protocols. ARP has one purpose: sending a frame to the broadcast address on the network segment and asking the computer with a specific IP address to respond by providing its MAC (hardware) address.\nICMP has many types. ICMP ping uses Type 8 (Echo) and Type 0 (Echo Reply).\nIf you want to ping a system on the same subnet, an ARP query should precede the ICMP Echo.\nAlthough TCP and UDP are transport layers, for network scanning purposes, a scanner can send a specially-crafted packet to common TCP or UDP ports to check whether the target will respond. This method is efficient, especially when ICMP Echo is blocked.\nIf you have closed the network simulator, click on the ‚ÄúView Site‚Äù button in Task 2 to display it again.\nAnswer the questions below\nSend a packet with the following:\n\nFrom computer1\nTo computer3\nPacket Type: ‚ÄúPing Request‚Äù\n\nWhat is the type of packet that computer1 sent before the ping?\nAnswer: ARP REQUEST\nWhat is the type of packet that computer1 received before being able to send the ping?\nAnswer: ARP RESPONSE\nHow many computers responded to the ping request?\nAnswer: 1\nSend a packet with the following:\n\nFrom computer2\nTo computer5\nPacket Type: ‚ÄúPing Request‚Äù\n\nWhat is the name of the first device that responded to the first ARP Request?\nAnswer: Router\nWhat is the name of the first device that responded to the second ARP Request?\nAnswer: Computer5\n\nTASK 5 - Nmap Host Discovery Using ARPHow would you know which hosts are up and running? It is essential to avoid wasting our time port-scanning an offline host or an IP address not in use. There are various ways to discover online hosts. When no host discovery options are provided, Nmap follows the following approaches to discover live hosts:\n\nWhen a privileged user tries to scan targets on a local network (Ethernet), Nmap uses ARP requests. A privileged user is root or a user who belongs to sudoers and can run sudo.\nWhen a privileged user tries to scan targets outside the local network, Nmap uses ICMP echo requests, TCP ACK (Acknowledge) to port 80, TCP SYN (Synchronize) to port 443, and ICMP timestamp request.\nWhen an unprivileged user tries to scan targets outside the local network, Nmap resorts to a TCP 3-way handshake by sending SYN packets to ports 80 and 443.\n\nNmap, by default, uses a ping scan to find live hosts, then proceeds to scan live hosts only. If you want to use Nmap to discover online hosts without port-scanning the live systems, you can issue nmap -sn TARGETS. Let‚Äôs dig deeper into the different techniques used.\nARP scan is possible only if you are on the same subnet as the target systems. On an Ethernet (802.3) and WiFi (802.11), you need to know the MAC address of any system before you can communicate with it. The MAC address is necessary for the link-layer header; the header contains the source MAC address and the destination MAC address among other fields. To get the MAC address, the OS sends an ARP query. A host that replies to ARP queries is up. The ARP query only works if the target is on the same subnet as yourself, i.e., on the same Ethernet&#x2F;WiFi. You should expect to see many ARP queries generated during a Nmap scan of a local network. If you want Nmap only to perform an ARP scan without port-scanning, you can use nmap -PR -sn TARGETS, where -PR indicates that you only want an ARP scan. The following example shows Nmap using ARP for host discovery without any port scanning. We run nmap -PR -sn MACHINE_IP/24 to discover all the live systems on the same subnet as our target machine.\nPentester Terminal\n1234567891011121314pentester@TryHackMe$ sudo nmap -PR -sn 10.10.210.6/24Starting Nmap 7.60 ( https://nmap.org ) at 2021-09-02 07:12 BSTNmap scan report for ip-10-10-210-75.eu-west-1.compute.internal (10.10.210.75)Host is up (0.00013s latency).MAC Address: 02:83:75:3A:F2:89 (Unknown)Nmap scan report for ip-10-10-210-100.eu-west-1.compute.internal (10.10.210.100)Host is up (-0.100s latency).MAC Address: 02:63:D0:1B:2D:CD (Unknown)Nmap scan report for ip-10-10-210-165.eu-west-1.compute.internal (10.10.210.165)Host is up (0.00025s latency).MAC Address: 02:59:79:4F:17:B7 (Unknown)Nmap scan report for ip-10-10-210-6.eu-west-1.compute.internal (10.10.210.6)Host is up.Nmap done: 256 IP addresses (4 hosts up) scanned in 3.12 secondsIn this case, the AttackBox had the IP address 10.10.210.6, and it used ARP requests to discover the live hosts on the same subnet. ARP scan works, as shown in the figure below. Nmap sends ARP requests to all the target computers, and those online should send an ARP reply back.\n\nIf we look at the packets generated using a tool such as tcpdump or Wireshark, we will see network traffic similar to the figure below. In the figure below, Wireshark displays the source MAC address, destination MAC address, protocol, and query related to each ARP request. The source address is the MAC address of our AttackBox, while the destination is the broadcast address as we don‚Äôt know the MAC address of the target. However, we see the target‚Äôs IP address, which appears in the Info column. In the figure, we can see that we are requesting the MAC addresses of all the IP addresses on the subnet, starting with 10.10.210.1. The host with the IP address we are asking about will send an ARP reply with its MAC address, and that‚Äôs how we will know that it is online.\nTalking about ARP scans, we should mention a scanner built around ARP queries: arp-scan; it provides many options to customize your scan. Visit the arp-scan wiki for detailed information. One popular choice is arp-scan ‚Äìlocalnet or simply arp-scan -l. This command will send ARP queries to all valid IP addresses on your local networks. Moreover, if your system has more than one interface and you are interested in discovering the live hosts on one of them, you can specify the interface using -I. For instance, sudo arp-scan -I eth0 -l will send ARP queries for all valid IP addresses on the eth0 interface.\nNote that arp-scan is not installed on the AttackBox; however, it can be installed using apt install arp-scan.\nIn the example below, we scanned the subnet of the AttackBox using arp-scan ATTACKBOX_IP&#x2F;24. Since we ran this scan at a time frame close to the previous one nmap -PR -sn ATTACKBOX_IP&#x2F;24, we obtained the same three live targets.\n123456789pentester@TryHackMe$ sudo arp-scan 10.10.210.6/24Interface: eth0, datalink type: EN10MB (Ethernet)WARNING: host part of 10.10.210.6/24 is non-zeroStarting arp-scan 1.9 with 256 hosts (http://www.nta-monitor.com/tools/arp-scan/)10.10.210.75\t02:83:75:3a:f2:89\t(Unknown)10.10.210.100\t02:63:d0:1b:2d:cd\t(Unknown)10.10.210.165\t02:59:79:4F:17:B7\t(Unknown)4 packets received by filter, 0 packets dropped by kernelEnding arp-scan 1.9: 256 hosts scanned in 2.726 seconds (93.91 hosts/sec). 3 responded\nSimilarly, the command arp-scan will generate many ARP queries that we can see using tcpdump, Wireshark, or a similar tool. We can notice that the packet capture for arp-scan and nmap -PR -sn yield similar traffic patterns. Below is the Wireshark output.\n\nIf you have closed the network simulator, click on the ‚ÄúVisit Site‚Äù button in Task 2 to display it again.\nAnswer the questions below:\nWe will be sending broadcast ARP Requests packets with the following options:\n\nFrom computer1\nTo computer1 (to indicate it is broadcast)\nPacket Type: ‚ÄúARP Request‚Äù\nData: try all the possible eight devices (other than computer1) in the network: computer2, computer3, computer4, computer5, computer6, switch1, switch2, and router.\n\nHow many devices are you able to discover using ARP requests?\n3\n\nTASK 6 - NMAP HOST DISCOVERY USING ICMPWe can ping every IP address on a target network and see who would respond to our ping (ICMP Type 8&#x2F;Echo) requests with a ping reply (ICMP Type 0). Simple, isn‚Äôt it? Although this would be the most straightforward approach, it is not always reliable. Many firewalls block ICMP echo; new versions of MS Windows are configured with a host firewall that blocks ICMP echo requests by default. Remember that an ARP query will precede the ICMP request if your target is on the same subnet.\nTo use ICMP echo request to discover live hosts, add the option -PE. (Remember to add -sn if you don‚Äôt want to follow that with a port scan.) As shown in the following figure, an ICMP echo scan works by sending an ICMP echo request and expects the target to reply with an ICMP echo reply if it is online.\n\nIn the example below, we scanned the target‚Äôs subnet using nmap -PE -sn MACHINE_IP/24. This scan will send ICMP echo packets to every IP address on the subnet. Again, we expect live hosts to reply; however, it is wise to remember that many firewalls block ICMP. The output below shows the result of scanning the virtual machine‚Äôs class C subnet using sudo nmap -PE -sn MACHINE_IP/24 from the AttackBox.\n12345678910111213141516171819202122232425262728**Pentester Terminal:**pentester@TryHackMe$ sudo nmap -PE -sn 10.10.68.220/24Starting Nmap 7.60 ( https://nmap.org ) at 2021-09-02 10:16 BSTNmap scan report for ip-10-10-68-50.eu-west-1.compute.internal (10.10.68.50)Host is up (0.00017s latency).MAC Address: 02:95:36:71:5B:87 (Unknown)Nmap scan report for ip-10-10-68-52.eu-west-1.compute.internal (10.10.68.52)Host is up (0.00017s latency).MAC Address: 02:48:E8:BF:78:E7 (Unknown)Nmap scan report for ip-10-10-68-77.eu-west-1.compute.internal (10.10.68.77)Host is up (-0.100s latency).MAC Address: 02:0F:0A:1D:76:35 (Unknown)Nmap scan report for ip-10-10-68-110.eu-west-1.compute.internal (10.10.68.110)Host is up (-0.10s latency).MAC Address: 02:6B:50:E9:C2:91 (Unknown)Nmap scan report for ip-10-10-68-140.eu-west-1.compute.internal (10.10.68.140)Host is up (0.00021s latency).MAC Address: 02:58:59:63:0B:6B (Unknown)Nmap scan report for ip-10-10-68-142.eu-west-1.compute.internal (10.10.68.142)Host is up (0.00016s latency).MAC Address: 02:C6:41:51:0A:0F (Unknown)Nmap scan report for ip-10-10-68-220.eu-west-1.compute.internal (10.10.68.220)Host is up (0.00026s latency).MAC Address: 02:25:3F:DB:EE:0B (Unknown)Nmap scan report for ip-10-10-68-222.eu-west-1.compute.internal (10.10.68.222)Host is up (0.00025s latency).MAC Address: 02:28:B1:2E:B0:1B (Unknown)Nmap done: 256 IP addresses (8 hosts up) scanned in 2.11 seconds\n\nThe scan output shows that eight hosts are up; moreover, it shows their MAC addresses. Generally speaking, we don‚Äôt expect to learn the MAC addresses of the targets unless they are on the same subnet as our system. The output above indicates that Nmap didn‚Äôt need to send ICMP packets as it confirmed that these hosts are up based on the ARP responses it received.\nWe will repeat the scan above; however, this time, we will scan from a system that belongs to a different subnet. The results are similar but without the MAC addresses.\n12345678910111213141516171819Pentester Terminal pentester@TryHackMe$ sudo nmap -PE -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 12:16 EESTNmap scan report for 10.10.68.50Host is up (0.12s latency).Nmap scan report for 10.10.68.52Host is up (0.12s latency).Nmap scan report for 10.10.68.77Host is up (0.11s latency).Nmap scan report for 10.10.68.110Host is up (0.11s latency).Nmap scan report for 10.10.68.140Host is up (0.11s latency).Nmap scan report for 10.10.68.142Host is up (0.11s latency).Nmap scan report for 10.10.68.220Host is up (0.11s latency).Nmap scan report for 10.10.68.222Host is up (0.11s latency).Nmap done: 256 IP addresses (8 hosts up) scanned in 8.26 second\n\nIf you look at the network packets using a tool like Wireshark, you will see something similar to the image below. You can see that we have one source IP address on a different subnet than that of the destination subnet, sending ICMP echo requests to all the IP addresses in the target subnet to see which one will reply.\n\nBecause ICMP echo requests tend to be blocked, you might also consider ICMP Timestamp or ICMP Address Mask requests to tell if a system is online. Nmap uses timestamp request (ICMP Type 13) and checks whether it will get a Timestamp reply (ICMP Type 14). Adding the -PP option tells Nmap to use ICMP timestamp requests. As shown in the figure below, you expect live hosts to reply.\n\nIn the following example, we run nmap -PP -sn MACHINE_IP/24 to discover the online computers on the target machine subnet.\nPentester Terminal\n12345678910111213141516171819pentester@TryHackMe$ sudo nmap -PP -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 12:06 EESTNmap scan report for 10.10.68.50Host is up (0.13s latency).Nmap scan report for 10.10.68.52Host is up (0.25s latency).Nmap scan report for 10.10.68.77Host is up (0.14s latency).Nmap scan report for 10.10.68.110Host is up (0.14s latency).Nmap scan report for 10.10.68.140Host is up (0.15s latency).Nmap scan report for 10.10.68.209Host is up (0.14s latency).Nmap scan report for 10.10.68.220Host is up (0.14s latency).Nmap scan report for 10.10.68.222Host is up (0.14s latency).Nmap done: 256 IP addresses (8 hosts up) scanned in 10.93 seconds\n\nSimilar to the previous ICMP scan, this scan will send many ICMP timestamp requests to every valid IP address in the target subnet. In the Wireshark screenshot below, you can see one source IP address sending ICMP packets to every possible IP address to discover online hosts.\n\nSimilarly, Nmap uses address mask queries (ICMP Type 17) and checks whether it gets an address mask reply (ICMP Type 18). This scan can be enabled with the option -PM. As shown in the figure below, live hosts are expected to reply to ICMP address mask requests.\n\nIn an attempt to discover live hosts using ICMP address mask queries, we run the command nmap -PM -sn MACHINE_IP/24. Although, based on earlier scans, we know that at least eight hosts are up, this scan returned none. The reason is that the target system or a firewall on the route is blocking this type of ICMP packet. Therefore, it is essential to learn multiple approaches to achieve the same result. If one type of packet is being blocked, we can always choose another to discover the target network and services.\nPentester Terminal\n123pentester@TryHackMe$ sudo nmap -PM -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 12:13 EESTNmap done: 256 IP addresses (0 hosts up) scanned in 52.17 seconds\n\n\nAlthough we didn‚Äôt get any reply and could not figure out which hosts are online, it is essential to note that this scan sent ICMP address mask requests to every valid IP address and waited for a reply. Each ICMP request was sent twice, as we can see in the screenshot below.\n\nAnswer the questions below\nWhat is the option required to tell Nmap to use ICMP Timestamp to discover live hosts?\nCorrect Answer : -pp\nWhat is the option required to tell Nmap to use ICMP Address Mask to discover live hosts?\nCorrect Answer : -PN\nWhat is the option required to tell Nmap to use ICMP Echo to discover live hosts?\nCorrect Answer : -PE\nTASK 7 - Nmap Host Discovery Using TCP and UDPTCP¬†SYN Ping\nWe can send a packet with the SYN (Synchronize) flag set to a¬†TCP¬†port, 80 by default, and wait for a response. An open port should reply with a SYN&#x2F;ACK (Acknowledge); a closed port would result in an RST (Reset). In this case, we only check whether we will get any response to infer whether the host is up. The specific state of the port is not significant here. The figure below is a reminder of how a¬†TCP¬†3-way handshake usually works.\n\nIf you want Nmap to use¬†TCP¬†SYN ping, you can do so via the option -PS followed by the port number, range, list, or a combination of them. For example, -PS21 will target port 21, while -PS21-25 will target ports 21, 22, 23, 24, and 25. Finally -PS80,443,8080 will target the three ports 80, 443, and 8080.\nPrivileged users (root and sudoers) can send¬†TCP¬†SYN packets and don‚Äôt need to complete the¬†TCP¬†3-way handshake even if the port is open, as shown in the figure below. Unprivileged users have no choice but to complete the 3-way handshake if the port is open.\n\nWe will run nmap -PS -sn MACHINE_IP/24 to scan the target¬†VM¬†subnet. As we can see in the output below, we were able to discover five hosts.\nPentester Terminal\n123456789101112pentester@TryHackMe$ sudo nmap -PS -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 13:45 EESTNmap scan report for 10.10.68.52Host is up (0.10s latency).Nmap scan report for 10.10.68.121Host is up (0.16s latency).Nmap scan report for 10.10.68.125Host is up (0.089s latency).Nmap scan report for 10.10.68.134Host is up (0.13s latency).Nmap scan report for 10.10.68.220Host is up (0.11s latency).Nmap done: 256 IP addresses (5 hosts up) scanned in 17.38 seconds\n\nLet‚Äôs take a closer look at what happened behind the scenes by looking at the network traffic on Wireshark in the figure below. Technically speaking, since we didn‚Äôt specify any¬†TCP¬†ports to use in the¬†TCP¬†ping scan, Nmap used common ports; in this case, it is¬†TCP¬†port 80. Any service listening on port 80 is expected to reply, indirectly indicating that the host is online.\n\nTCP¬†ACK Ping\nAs you have guessed, this sends a packet with an ACK flag set. You must be running¬†Nmap¬†as a privileged user to be able to accomplish this. If you try it as an unprivileged user,¬†Nmap¬†will attempt a 3-way handshake.\nBy default, port 80 is used. The syntax is similar to¬†TCP¬†SYN ping. -PA should be followed by a port number, range, list, or a combination of them. For example, consider -PA21, -PA21-25 and -PA80,443,8080. If no port is specified, port 80 will be used.\nThe following figure shows that any¬†TCP¬†packet with an ACK flag should get a¬†TCP¬†packet back with an RST flag set. The target responds with the RST flag set because the¬†TCP¬†packet with the ACK flag is not part of any ongoing connection. The expected response is used to detect if the target host is up.\n\nIn this example, we run sudo nmap -PA -sn MACHINE_IP/24 to discover the online hosts on the target‚Äôs subnet. We can see that the¬†TCP¬†ACK ping scan detected five hosts as up.\nPentester Terminal\n123456789101112pentester@TryHackMe$ sudo nmap -PA -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 13:46 EESTNmap scan report for 10.10.68.52Host is up (0.11s latency).Nmap scan report for 10.10.68.121Host is up (0.12s latency).Nmap scan report for 10.10.68.125Host is up (0.10s latency).Nmap scan report for 10.10.68.134Host is up (0.10s latency).Nmap scan report for 10.10.68.220Host is up (0.10s latency).Nmap done: 256 IP addresses (5 hosts up) scanned in 29.89 seconds\n\nIf we peek at the network traffic as shown in the figure below, we will discover many packets with the ACK flag set and sent to port 80 of the target systems.¬†Nmap¬†sends each packet twice. The systems that don‚Äôt respond are offline or inaccessible.\n\nUDP¬†Ping\nFinally, we can use¬†UDP¬†to discover if the host is online. Contrary to TCP SYN ping, sending a¬†UDP¬†packet to an open port is not expected to lead to any reply. However, if we send a¬†UDP¬†packet to a closed¬†UDP¬†port, we expect to get an ICMP port unreachable packet; this indicates that the target system is up and available.\nIn the following figure, we see a¬†UDP¬†packet sent to an open¬†UDP¬†port and not triggering any response. However, sending a¬†UDP¬†packet to any closed¬†UDP¬†port can trigger a response indirectly indicating that the target is online.\n\n\nThe syntax to specify the ports is similar to that of¬†TCP¬†SYN ping and¬†TCP¬†ACK ping;¬†Nmap¬†uses -PU for¬†UDP¬†ping. In the following example, we use a¬†UDP¬†scan, and we discover five live hosts.\nPentester Terminal\n123456789101112pentester@TryHackMe$ sudo nmap -PU -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 13:45 EESTNmap scan report for 10.10.68.52Host is up (0.10s latency).Nmap scan report for 10.10.68.121Host is up (0.10s latency).Nmap scan report for 10.10.68.125Host is up (0.14s latency).Nmap scan report for 10.10.68.134Host is up (0.096s latency).Nmap scan report for 10.10.68.220Host is up (0.11s latency).Nmap done: 256 IP addresses (5 hosts up) scanned in 9.20 second\nLet‚Äôs inspect the¬†UDP¬†packets generated. In the following Wireshark screenshot, we notice Nmap sending¬†UDP¬†packets to¬†UDP¬†ports that are most likely closed. The image below shows that Nmap uses an uncommon¬†UDP¬†port to trigger an ICMP destination unreachable (port unreachable) error.\n\nMasscan\nOn a side note, Masscan uses a similar approach to discover the available systems. However, to finish its network scan quickly, Masscan is quite aggressive with the rate of packets it generates. The syntax is quite similar: -p can be followed by a port number, list, or range. Consider the following examples:\n\nmasscan MACHINE_IP/24 -p443\nmasscan MACHINE_IP/24 -p80,443\nmasscan MACHINE_IP/24 -p22-25\nmasscan MACHINE_IP/24 ‚Äê‚Äêtop-ports 100\n\nMasscan is not installed on the AttackBox; however, it can be installed using apt install masscan.\nAnswer the questions below\nWhich TCP ping scan does not require a privileged account?\nTCP SYN PING\nWhich TCP ping scan requires a privileged account?\nTCP ACK PING\nWhat option do you need to add to Nmap to run a TCP SYN ping scan on the telnet port?\n-ps23\nTASK 8 - USING REVERSE DNS LOOKUPNmap‚Äôs default behaviour is to use reverse-DNS¬†online hosts. Because the hostnames can reveal a lot, this can be a helpful step. However, if you don‚Äôt want to send such¬†DNS¬†queries, you use¬†-n¬†to skip this step.\nBy default,¬†Nmap¬†will look up online hosts; however, you can use the option¬†-R¬†to query the¬†DNS¬†server even for offline hosts. If you want to use a specific¬†DNS¬†server, you can add the¬†--dns-servers DNS_SERVER¬†option.\nAnswer the questions below\nWe want Nmap to issue a reverse DNS lookup for all the possibles hosts on a subnet, hoping to get some insights from the names. What option should we add?\nCorrect Answer : -R\n\nSUMMARY OF THE ROOM\nYou have learned how ARP, ICMP, TCP, and¬†UDP¬†can detect live hosts by completing this room. Any response from a host is an indication that it is online. Below is a quick summary of the command-line options for¬†Nmap¬†that we have covered.\n\n\n\nScan Type\nExample Command\n\n\n\nARP¬†Scan\nsudo nmap -PR -sn MACHINE_IP&#x2F;24\n\n\nICMP Echo Scan\nsudo nmap -PE¬†-sn MACHINE_IP&#x2F;24\n\n\nICMP Timestamp Scan\nsudo nmap -PP -sn MACHINE_IP&#x2F;24\n\n\nICMP Address Mask Scan\nsudo nmap -PM -sn MACHINE_IP&#x2F;24\n\n\nTCP¬†SYN Ping Scan\nsudo nmap -PS22,80,443 -sn MACHINE_IP&#x2F;30\n\n\nTCP¬†ACK Ping Scan\nsudo nmap -PA22,80,443 -sn MACHINE_IP&#x2F;30\n\n\nUDP¬†Ping Scan\nsudo nmap -PU53,161,162 -sn MACHINE_IP&#x2F;30\n\n\nRemember to add¬†-sn¬†if you are only interested in host discovery without port-scanning. Omitting¬†-sn¬†will let¬†Nmap¬†default to port-scanning the live hosts.\n\n\n\nOption\nPurpose\n\n\n\n-n\nno¬†DNS¬†lookup\n\n\n-R\nreverse-DNS¬†lookup for all hosts\n\n\n-sn\nhost discovery only\n\n\nThank YouSatvik\n","slug":"Live-Host-Discovery","date":"2024-05-16T13:59:01.000Z","categories_index":"cybersecurity,THM,NMAP","tags_index":"tryhackme,nmap,information-gathering","author_index":"Satvik"},{"id":"58abb440477d90f4f081be1f94565844","title":"Basic Port Scan - NMAP","content":"Nmap Basic Port ScansINTRODUCTIONThe next step would be checking which ports are open and listening and which ports are closed. Therefore, in this room and the next one, we focus on port scanning and the different types of port scans used by nmap. This room explains:\n\nTCP connect port scan\nTCP SYN port scan\nUDP port scan\n\nMoreover, we discuss the different options to specify the ports, the scan rate, and the number of parallel probes.\nTASK - 2 TCP and UDP PORTSIn the same sense that an IP address specifies a host on a network among many others, a TCP port or UDP port is used to identify a network service running on that host. A server provides the network service, and it adheres to a specific network protocol. Examples include providing time, responding to DNS queries, and serving web pages. A port is usually linked to a service using that specific port number. For instance, an HTTP server would bind to TCP port 80 by default; moreover, if the HTTP server supports SSL&#x2F;TLS, it would listen on TCP port 443. (TCP ports 80 and 443 are the default ports for HTTP and HTTPS; however, the webserver administrator might choose other port numbers if necessary.) Furthermore, no more than one service can listen on any TCP or UDP port (on the same IP address).\nAt the risk of oversimplification, we can classify ports in two states:\n\nOpen port indicates that there is some service listening on that port.\nClosed port indicates that there is no service listening on that port.\n\nHowever, in practical situations, we need to consider the impact of firewalls. For instance, a port might be open, but a firewall might be blocking the packets. Therefore, Nmap considers the following six states:\n\nOpen: indicates that a service is listening on the specified port.\nClosed: indicates that no service is listening on the specified port, although the port is accessible. By accessible, we mean that it is reachable and is not blocked by a firewall or other security appliances&#x2F;programs.\nFiltered: means that Nmap cannot determine if the port is open or closed because the port is not accessible. This state is usually due to a firewall preventing Nmap from reaching that port. Nmap‚Äôs packets may be blocked from reaching the port; alternatively, the responses are blocked from reaching Nmap‚Äôs host.\nUnfiltered: means that Nmap cannot determine if the port is open or closed, although the port is accessible. This state is encountered when using an ACK scan -sA.\nOpen|Filtered: This means that Nmap cannot determine whether the port is open or filtered.\nClosed|Filtered: This means that Nmap cannot decide whether a port is closed or filtered.\n\nANSWERS\nWhich service uses UDP port 53 by default?\n\nCorrect Answer: DNS\n\n\nWhich service uses TCP port 22 by default?\n\nCorrect Answer: SSH\n\n\nHow many port states does Nmap consider?\n\nCorrect Answer: 6\n\n\nWhich port state is the most interesting to discover as a pentester?\n\nCorrect Answer: Open\n\n\n\nTASK 3 - TCP FLAGSNmap supports different types of TCP port scans. To understand the difference between these port scans, we need to review the TCP header. The TCP header is the first 24 bytes of a TCP segment. The following figure shows the TCP header as defined in RFC 793. This figure looks sophisticated at first; however, it is pretty simple to understand. In the first row, we have the source TCP port number and the destination port number. We can see that the port number is allocated 16 bits (2 bytes). In the second and third rows, we have the sequence number and the acknowledgment number. Each row has 32 bits (4 bytes) allocated, with six rows total, making up 24 bytes.\nIn particular, we need to focus on the flags that Nmap can set or unset. We have highlighted the TCP flags in red. Setting a flag bit means setting its value to 1. From left to right, the TCP header flags are:\n\nURG: Urgent flag indicates that the urgent pointer filed is significant. The urgent pointer indicates that the incoming data is urgent, and that a TCP segment with the URG flag set is processed immediately without consideration of having to wait on previously sent TCP segments.\nACK: Acknowledgment flag indicates that the acknowledgment number is significant. It is used to acknowledge the receipt of a TCP segment.\nPSH: Push flag asking TCP to pass the data to the application promptly.\nRST: Reset flag is used to reset the connection. Another device, such as a firewall, might send it to tear a TCP connection. This flag is also used when data is sent to a host and there is no service on the receiving end to answer.\nSYN: Synchronize flag is used to initiate a TCP 3-way handshake and synchronize sequence numbers with the other host. The sequence number should be set randomly during TCP connection establishment.\nFIN: The sender has no more data to send.\n\nANSWERS\nWhat 3 letters represent the Reset flag?\n\nCorrect Answer: RST\n\n\nWhich flag needs to be set when you initiate a TCP connection (first packet of TCP 3-way handshake)?\n\nCorrect Answer: SYN\n\n\n\nTASK 4 - TCP CONNECT SCANTCP connect scan works by completing the TCP 3-way handshake. In standard TCP connection establishment, the client sends a TCP packet with SYN flag set, and the server responds with SYN&#x2F;ACK if the port is open; finally, the client completes the 3-way handshake by sending an ACK.\nWe are interested in learning whether the TCP port is open, not establishing a TCP connection. Hence the connection is torn as soon as its state is confirmed by sending a RST&#x2F;ACK. You can choose to run TCP connect scan using -sT.\nIt is important to note that if you are not a privileged user (root or sudoer), a TCP connect scan is the only possible option to discover open TCP ports.\nQuestion:\nLaunch the VM. Open the AttackBox and execute nmap -sT 10.10.23.101 via the terminal. A new service has been installed on this VM since our last scan. Which port number was closed in the scan above but is now open on this target VM? \n\nAnswer: 110\n\nCommand: nmap -sT 10.10.23.101\nNew service: POP3\n\n\nTASK 5 - TCP SYN SCANUnprivileged users are limited to connect scan. However, the default scan mode is SYN scan, and it requires a privileged (root or sudoer) user to run it. SYN scan does not need to complete the TCP 3-way handshake; instead, it tears down the connection once it receives a response from the server. Because we didn‚Äôt establish a TCP connection, this decreases the chances of the scan being logged. We can select this scan type by using the -sS option.\nQuestions:\nWhat is the new open port?\n\nCorrect Answer: 6667\n\n\nWhat is Nmap‚Äôs guess of the service name?\n\nCorrect Answer: irc\n\n\n\nTask 7: Fine-Tuning Scope and PerformanceYou can specify the ports you want to scan instead of the default 1000 ports. Specifying the ports is intuitive by now. Let‚Äôs see some examples:\n\nPort list: -p22,80,443 will scan ports 22, 80, and 443.\nPort range: -p1-1023 will scan all ports between 1 and 1023 inclusive, while -p20-25 will scan ports between 20 and 25 inclusive.\nYou can request the scan of all ports by using -p-, which will scan all 65535 ports. If you want to scan the most common 100 ports, add -F. Using --top-ports 10 will check the ten most common ports.\n\nYou can control the scan timing using -T&lt;0-5&gt;. -T0 is the slowest (paranoid), while -T5 is the fastest. According to the Nmap manual page, there are six templates:\n\nParanoid (0)\nSneaky (1)\nPolite (2)\nNormal (3)\nAggressive (4)\nInsane (5)\n\nTo avoid IDS alerts, you might consider -T0 or -T1. For instance, -T0 scans one port at a time and waits 5 minutes between sending each probe. If you don‚Äôt specify any timing, Nmap uses normal -T3. Note that -T5 is the most aggressive in terms of speed; however, this can affect the accuracy of the scan results due to the increased likelihood of packet loss. Note that -T4 is often used during CTFs and when learning to scan on practice targets, whereas -T1 is often used during real engagements where stealth is more important.\nAlternatively, you can choose to control the packet rate using --min-rate &lt;number&gt; and --max-rate &lt;number&gt;. For example, --max-rate 10 or --max-rate=10 ensures that your scanner is not sending more than ten packets per second.\nMoreover, you can control probing parallelization using --min-parallelism &lt;numprobes&gt; and --max-parallelism &lt;numprobes&gt;. Nmap probes the targets to discover which hosts are live and which ports are open; probing parallelization specifies the number of such probes that can be run in parallel. For instance, --min-parallelism=512 pushes Nmap to maintain at least 512 probes in parallel; these 512 probes are related to host discovery and open ports.\nTASK 8 - SUMMARYThis room covered three types of scans:\n\nTCP Connect\nTCP SYN\nUDP\n\nThese scan types should get you started discovering running TCP and UDP services on a target host.\nDONE\nTHANK YOU,Satvik Shetty\n","slug":"Basic-Port-Scan-THM","date":"2024-05-16T10:05:28.000Z","categories_index":"cybersecurity,THM","tags_index":"tryhackme,nmap,information-gathering","author_index":"Satvik"},{"id":"df002c45b5a83b11244a8755ec495303","title":"Beginner Resources 2024","content":"Online Tools and ResourcesIP and DNS Leak Testing\nipleak.net\ndiafygi.github.io&#x2F;webrtc-ips\ndnsleaktest.com\n\nTor Check üßÖ\n5deqglhxcoy3gbx6.onion\ntmkloc6vhxos3nde.onion\n\nSMS üì©\nreceive-sms-online.info\nreceive-sms-now.com\nreceivesmsonline.net\n\nFake Identity üôÉ\nfakena.me\nnames.igopaygo.com&#x2F;people&#x2F;fake_person\nfakenamegenerator.com\n\nNetwork Online Tools üåê\nyougetsignal.com\ndnswatch.info\nnirsoft.net&#x2F;countryip\ntcpiputils.com\nbgp.he.net\nsockets.com&#x2F;services.htm\nservices.ce3c.be&#x2F;ciprg\ncoffer.com&#x2F;mac_find\n\nVulnerabilities Database üéØ\ncve.mitre.org&#x2F;cve\ncvedetails.com\nosvdb.org\nkb.cert.org&#x2F;vuls\nsecunia.com&#x2F;community&#x2F;advisories&#x2F;search\nsecurityfocus.com&#x2F;bid\nlwn.net&#x2F;Vulnerabilities\ndenimgroup.com&#x2F;resources-threadfix\nvulnerability-lab.com\nsecdocs.org\nnvd.nist.gov\n\nExploits Database üí•\nexploit-db.com\nintelligentexploit.com\nshodanhq.com\npacketstormsecurity.com\n\n","slug":"Resources-2024-Beginners","date":"2024-05-15T19:12:11.000Z","categories_index":"","tags_index":"resources,cybersecurity,hacking","author_index":"Satvik"}]