{"title":"How Websites Work - THM Walkthrough","uid":"04c3f082e63bec82336499ba808815fb","slug":"THM/WEB/How-Websites-Work-THM-Walkthrough","date":"2024-05-23T09:28:53.000Z","updated":"2024-05-23T12:29:10.619Z","comments":true,"path":"api/articles/THM/WEB/How-Websites-Work-THM-Walkthrough.json","keywords":null,"cover":"https://tryhackme-images.s3.amazonaws.com/room-icons/4e3a3940e2a4ab1b058e2e199f2af0b4.svg","content":"<p>Hello Hackers üíå<br>Today we will be walking through a new room on tryhackme called <code>How Websites work</code><br>Let‚Äôs dive into the room and solve the challenges ahead !üöÄ</p>\n<h1 id=\"TASK-1-How-Websites-Work\"><a href=\"#TASK-1-How-Websites-Work\" class=\"headerlink\" title=\"TASK 1 - How Websites Work\"></a>TASK 1 - How Websites Work</h1><p>By the end of this room, you‚Äôll know how websites are created and will be introduced to some basic security issues.</p>\n<p>When you visit a website, your browser (like Safari or Google Chrome) makes a request to a web server asking for information about the page you‚Äôre visiting. It will respond with data that your browser uses to show you the page; a web server is just a dedicated computer somewhere else in the world that handles your requests.</p>\n<p><img src=\"https://dl.dropbox.com/scl/fi/ubhcqxqept9womy12wqst/howwebsiteworks.png?rlkey=eaha211hx6hu7ecpkjshzpjkg&st=9t2kkjct&dl=0\" alt=\"img\"></p>\n<p>There are two major components that make up a website:</p>\n<p>Front End (Client-Side) - the way your browser renders a website.<br>Back End (Server-Side) - a server that processes your request and returns a response.<br>There are many other processes involved in your browser making a request to a web server, but for now, you just need to understand that you make a request to a server, and it responds with data your browser uses to render information to you.</p>\n<h2 id=\"Questions-and-Answers-in-the-Task\"><a href=\"#Questions-and-Answers-in-the-Task\" class=\"headerlink\" title=\"Questions and Answers in the Task\"></a>Questions and Answers in the Task</h2><p><strong>1. What term best describes the component of a web application rendered by your browser?</strong></p>\n<ul>\n<li>Answer: <code>Front End</code></li>\n</ul>\n<h1 id=\"TASK-2-HTML\"><a href=\"#TASK-2-HTML\" class=\"headerlink\" title=\"TASK 2 - HTML\"></a>TASK 2 - HTML</h1><p>Websites are primarily created using:</p>\n<ul>\n<li><strong>HTML</strong>, to build websites and define their structure.</li>\n<li><strong>CSS</strong>, to make websites look pretty by adding styling options.</li>\n<li><strong>JavaScript</strong>, to implement complex features on pages using interactivity.</li>\n</ul>\n<p>HyperText Markup Language (HTML) is the language websites are written in. Elements (also known as tags) are the building blocks of HTML pages and tell the browser how to display content. The code snippet below shows a simple HTML document, the structure of which is the same for every website:</p>\n<p><img src=\"https://assets.tryhackme.com/additional/how-websites-work/example_html.png\" alt=\"img\"></p>\n<p>The HTML structure (as shown in the screenshot) has the following components:</p>\n<ul>\n<li>The <code>&lt;!DOCTYPE html&gt;</code> defines that the page is an HTML5 document. This helps with standardization across different browsers and tells the browser to use HTML5 to interpret the page.</li>\n<li>The <code>&lt;html&gt;</code> element is the root element of the HTML page - all other elements come after this element.</li>\n<li>The <code>&lt;head&gt;</code> element contains information about the page (such as the page title).</li>\n<li>The <code>&lt;body&gt;</code> element defines the HTML document‚Äôs body; only content inside of the body is shown in the browser.</li>\n<li>The <code>&lt;h1&gt;</code> element defines a large heading.</li>\n<li>The <code>&lt;p&gt;</code> element defines a paragraph.</li>\n</ul>\n<p>There are many other elements (tags) used for different purposes. For example, there are tags for buttons (<code>&lt;button&gt;</code>), images (<code>&lt;img&gt;</code>), lists, and much more. </p>\n<p>Tags can contain attributes such as the class attribute, which can be used to style an element (e.g., make the tag a different color) <code>&lt;p class=&quot;bold-text&quot;&gt;</code>, or the <code>src</code> attribute, which is used on images to specify the location of an image: <code>&lt;img src=&quot;img/cat.jpg&quot;&gt;</code>. An element can have multiple attributes each with its own unique purpose, e.g., <code>&lt;p attribute1=&quot;value1&quot; attribute2=&quot;value2&quot;&gt;</code>.</p>\n<p>Elements can also have an <code>id</code> attribute (<code>&lt;p id=&quot;example&quot;&gt;</code>), which is unique to the element. Unlike the class attribute, where multiple elements can use the same class, an element must have different ids to identify them uniquely. Element ids are used for styling and to identify it by JavaScript.</p>\n<p>You can view the HTML of any website by right-clicking and selecting ‚ÄúView Page Source‚Äù (Chrome) &#x2F; ‚ÄúShow Page Source‚Äù (Safari).</p>\n<h2 id=\"Questions-and-answers-in-the-task\"><a href=\"#Questions-and-answers-in-the-task\" class=\"headerlink\" title=\"Questions and answers in the task\"></a>Questions and answers in the task</h2><p><strong>1. One of the images on the cat website is broken - fix it, and the image will reveal the hidden text answer!</strong> </p>\n<p><img src=\"https://dl.dropbox.com/scl/fi/m5sxwi5ttiuvov9agdp6f/cat1.png?rlkey=kum96cn7wf3dmyjcic81hetcq&st=evaw2ow0&dl=0\" alt=\"cat1\"><br><img src=\"https://dl.dropbox.com/scl/fi/8vyuh8p057mu7ki1qydnt/cat2.png?rlkey=8bbc8e76pnieqbwm2jr84wwrt&st=d2jwa4h9&dl=0\" alt=\"cat2\"></p>\n<p>Answer: <code>HTMLHERO</code></p>\n<p><strong>2. Add a dog image to the page by adding another img tag (<img>) on line 11. The dog image location is img&#x2F;dog-1.png. What is the text in the dog image?</strong><br><img src=\"https://dl.dropbox.com/scl/fi/je1a07qkf1xmrd2e83n9f/DOG1.png?rlkey=imd2a9s3jgjoptrciftst4gk3&st=4wtd2uz1&dl=0\" alt=\"DOG1\"><br><img src=\"https://dl.dropbox.com/scl/fi/brhg4yjhgx26k0vc0pbmq/dog2.png?rlkey=4mvi6hmrdv1cilcuwc44wtxs9&st=xpkwftp5&dl=0\" alt=\"dog2\"></p>\n<ul>\n<li>Answer: <code>DOGHTML</code></li>\n</ul>\n<h1 id=\"TASK-3-Javascript\"><a href=\"#TASK-3-Javascript\" class=\"headerlink\" title=\"TASK 3 - Javascript\"></a>TASK 3 - Javascript</h1><p>JavaScript (JS) is one of the most popular coding languages in the world and allows pages to become interactive. HTML is used to create the website structure and content, while JavaScript is used to control the functionality of web pages - without JavaScript, a page would not have interactive elements and would always be static. JS can dynamically update the page in real-time, giving functionality to change the style of a button when a particular event on the page occurs (such as when a user clicks a button) or to display moving animations.</p>\n<p>JavaScript is added within the page source code and can be either loaded within <code>&lt;script&gt; tags or can be included remotely with the src attribute: &lt;script src=&quot;/location/of/javascript_file.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>The following JavaScript code finds a HTML element on the page with the id of <code>&quot;demo&quot;</code> and changes the element‚Äôs contents to <code>&quot;Hack the Planet&quot; : document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hack the Planet&quot;;</code></p>\n<p>HTML elements can also have events, such as ‚Äúonclick‚Äù or ‚Äúonhover‚Äù that execute JavaScript when the event occurs. The following code changes the text of the element with the demo ID to Button Clicked: <code>&lt;button onclick=&#39;document.getElementById(&quot;demo&quot;).innerHTML = &quot;Button Clicked&quot;;&#39;&gt;Click Me!&lt;/button&gt;</code> - onclick events can also be defined inside the JavaScript script tags, and not on elements directly.</p>\n<h2 id=\"Questions-and-Answers-in-the-task\"><a href=\"#Questions-and-Answers-in-the-task\" class=\"headerlink\" title=\"Questions and Answers in the task\"></a>Questions and Answers in the task</h2><p><strong>1. Click the ‚ÄúView Site‚Äù button on this task. On the right-hand side, add JavaScript that changes the demo element‚Äôs content to ‚ÄúHack the Planet‚Äù</strong><br><img src=\"https://dl.dropbox.com/scl/fi/u3564t3qjgyedv5j05j4h/j1.png?rlkey=00mcbu5e01aqcesih3m76eznn&st=mru5964z&dl=0\" alt=\"j1\"><br><img src=\"https://dl.dropbox.com/scl/fi/twwl8zwqx6robr41e4eo6/j2.png?rlkey=77en8pcykwiff7wbkxw9vhxfl&st=obmn2hks&dl=0\" alt=\"j2\"></p>\n<ul>\n<li>Answer: <code>JSISFUN</code></li>\n</ul>\n<h1 id=\"TASK-4-Sensitive-Data-Exposure\"><a href=\"#TASK-4-Sensitive-Data-Exposure\" class=\"headerlink\" title=\"TASK 4 - Sensitive Data Exposure\"></a>TASK 4 - Sensitive Data Exposure</h1><p>Sensitive Data Exposure occurs when a website doesn‚Äôt properly protect (or remove) sensitive clear-text information to the end-user; usually found in a site‚Äôs frontend source code.</p>\n<p><img src=\"https://assets.tryhackme.com/additional/how-websites-work/html_source.png\" alt=\"i\"><br>We now know that websites are built using many HTML elements (tags), all of which we can see simply by ‚Äúviewing the page source‚Äù. A website developer may have forgotten to remove login credentials, hidden links to private parts of the website or other sensitive data shown in HTML or JavaScript.</p>\n<p>Sensitive information can be potentially leveraged to further an attacker‚Äôs access within different parts of a web application. For example, there could be HTML comments with temporary login credentials, and if you viewed the page‚Äôs source code and found this, you could use these credentials to log in elsewhere on the application (or worse, used to access other backend components of the site).</p>\n<p>Whenever you‚Äôre assessing a web application for security issues, one of the first things you should do is review the page source code to see if you can find any exposed login credentials or hidden links.</p>\n<h2 id=\"Questions-and-Answers-in-the-Task-1\"><a href=\"#Questions-and-Answers-in-the-Task-1\" class=\"headerlink\" title=\"Questions and Answers in the Task\"></a>Questions and Answers in the Task</h2><p><strong>1. View the website on this <a href=\"https://static-labs.tryhackme.cloud/sites/howwebsiteswork/html_data_exposure/\">link</a>. What is the password hidden in the source code?</strong><br><img src=\"https://dl.dropbox.com/scl/fi/1w33f4x0jnvey4tw3v2py/js1.png?rlkey=5e0f4hi1xtim9xb2pojcnw8ry&st=xd3e5iz8&dl=0\" alt=\"i\"></p>\n<ul>\n<li>Answer: <code>testpasswd</code></li>\n</ul>\n<h1 id=\"TASK-5-HTML-Injection\"><a href=\"#TASK-5-HTML-Injection\" class=\"headerlink\" title=\"TASK 5 - HTML Injection\"></a>TASK 5 - HTML Injection</h1><p>HTML Injection is a vulnerability that occurs when unfiltered user input is displayed on the page. If a website fails to sanitise user input (filter any ‚Äúmalicious‚Äù text that a user inputs into a website), and that input is used on the page, an attacker can inject HTML code into a vulnerable website.</p>\n<p>Input sanitisation is very important in keeping a website secure, as information a user inputs into a website is often used in other frontend and backend functionality. A vulnerability you‚Äôll explore in another lab is database injection, where you can manipulate a database lookup query to log in as another user by controlling the input that‚Äôs directly used in the query - but for now, let‚Äôs focus on HTML injection (which is client-side).</p>\n<p>When a user has control of how their input is displayed, they can submit HTML (or JavaScript) code, and the browser will use it on the page, allowing the user to control the page‚Äôs appearance and functionality.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5c549500924ec576f953d9fc/room-content/9c3ea7c9bcd06f125950e03aa814116a.svg\" alt=\"i\"></p>\n<p>The image above shows how a form outputs text to the page. Whatever the user inputs into the ‚ÄúWhat‚Äôs your name‚Äù field is passed to a JavaScript function and output to the page, which means if the user adds their own HTML or JavaScript in the field, it‚Äôs used in the sayHi function and is added to the page - this means you can add your own HTML <code>(such as a &lt;h1&gt; tag)</code> and it will output your input as pure HTML</p>\n<p>The general rule is never to trust user input. To prevent malicious input, the website developer should sanitise everything the user enters before using it in the JavaScript function; in this case, the developer could remove any HTML tags.</p>\n<h2 id=\"Questions-and-Answers-in-the-task-1\"><a href=\"#Questions-and-Answers-in-the-task-1\" class=\"headerlink\" title=\"Questions and Answers in the task\"></a>Questions and Answers in the task</h2><p><strong>1. View the website on this task and inject HTML so that a malicious link to <code>http://hacker.com</code> is shown.</strong><br><img src=\"https://dl.dropbox.com/scl/fi/0ovuc9vwdqijz77ezt5cs/in1.png?rlkey=p11vmirkusvnunt1fja595pp7&st=abzv8blb&dl=0\" alt=\"in1\"><br><img src=\"https://dl.dropbox.com/scl/fi/f7gf8lmsrpukazruhwzwd/in2.png?rlkey=blbp66y127unnh8mt8birysg4&st=ctivfw4r&dl=0\" alt=\"in2\"></p>\n<ul>\n<li>Answer: <code>HTML_INJ3CTI0N</code></li>\n</ul>\n<p><strong>Thank You</strong> üíå<br><strong>Author:</strong> <code>Satvik Shetty</code>üßë‚Äçüíª<br><strong>See you again in another writeup</strong></p>\n","text":"Hello Hackers üíåToday we will be walking through a new room on tryhackme called H...","permalink":"/post/THM/WEB/How-Websites-Work-THM-Walkthrough","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"cybersecurity","slug":"cybersecurity","count":20,"path":"api/categories/cybersecurity.json"},{"name":"THM","slug":"cybersecurity/THM","count":19,"path":"api/categories/cybersecurity/THM.json"},{"name":"web","slug":"cybersecurity/THM/web","count":13,"path":"api/categories/cybersecurity/THM/web.json"}],"tags":[{"name":"tryhackme","slug":"tryhackme","count":19,"path":"api/tags/tryhackme.json"},{"name":"web","slug":"web","count":13,"path":"api/tags/web.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TASK-1-How-Websites-Work\"><span class=\"toc-text\">TASK 1 - How Websites Work</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Questions-and-Answers-in-the-Task\"><span class=\"toc-text\">Questions and Answers in the Task</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TASK-2-HTML\"><span class=\"toc-text\">TASK 2 - HTML</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Questions-and-answers-in-the-task\"><span class=\"toc-text\">Questions and answers in the task</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TASK-3-Javascript\"><span class=\"toc-text\">TASK 3 - Javascript</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Questions-and-Answers-in-the-task\"><span class=\"toc-text\">Questions and Answers in the task</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TASK-4-Sensitive-Data-Exposure\"><span class=\"toc-text\">TASK 4 - Sensitive Data Exposure</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Questions-and-Answers-in-the-Task-1\"><span class=\"toc-text\">Questions and Answers in the Task</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TASK-5-HTML-Injection\"><span class=\"toc-text\">TASK 5 - HTML Injection</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Questions-and-Answers-in-the-task-1\"><span class=\"toc-text\">Questions and Answers in the task</span></a></li></ol></li></ol>","author":{"name":"Satvik","slug":"blog-author","avatar":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","link":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","description":"An Aspiring Penetration Tester & a security Enthusiast üöÄ 127.0.0.1 / sudo rm -rf / üòÅ Dont Drink and Root üëÄ","socials":{"github":"https://github.com/satvik-vs","twitter":"https://twitter.com/SatvikVemulap2","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://instagram.com/satvikshetty"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Walking an Application - THM","uid":"3f7217341e6a6154d773e1a5d0dd33e9","slug":"THM/WEB/Walking-an-Application-THM","date":"2024-05-25T09:35:07.000Z","updated":"2024-05-26T18:05:46.206Z","comments":true,"path":"api/articles/THM/WEB/Walking-an-Application-THM.json","keywords":null,"cover":"https://tryhackme-images.s3.amazonaws.com/room-icons/6c8d2a41e835c68b049773bb4c30d5d6.svg","text":"Welcome to Another writeup guys üíåToday we will be walking through another room c...","permalink":"/post/THM/WEB/Walking-an-Application-THM","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"cybersecurity","slug":"cybersecurity","count":20,"path":"api/categories/cybersecurity.json"},{"name":"THM","slug":"cybersecurity/THM","count":19,"path":"api/categories/cybersecurity/THM.json"},{"name":"web","slug":"cybersecurity/THM/web","count":13,"path":"api/categories/cybersecurity/THM/web.json"}],"tags":[{"name":"tryhackme","slug":"tryhackme","count":19,"path":"api/tags/tryhackme.json"},{"name":"web","slug":"web","count":13,"path":"api/tags/web.json"}],"author":{"name":"Satvik","slug":"blog-author","avatar":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","link":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","description":"An Aspiring Penetration Tester & a security Enthusiast üöÄ 127.0.0.1 / sudo rm -rf / üòÅ Dont Drink and Root üëÄ","socials":{"github":"https://github.com/satvik-vs","twitter":"https://twitter.com/SatvikVemulap2","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://instagram.com/satvikshetty"}}}}},"next_post":{"title":"HTTP in detail - THM","uid":"5904c8f0bb1680bf04de5ca4eafa3e53","slug":"THM/WEB/HTTP-in-detail-THM","date":"2024-05-22T18:09:01.000Z","updated":"2024-05-22T18:52:02.661Z","comments":true,"path":"api/articles/THM/WEB/HTTP-in-detail-THM.json","keywords":null,"cover":"https://tryhackme-images.s3.amazonaws.com/room-icons/b0efa907bff6e3c77b2aa24ea6b8bb59.png","text":"HTTP in DetailWhat is HTTP? (HyperText Transfer Protocol)HTTP is what‚Äôs used whe...","permalink":"/post/THM/WEB/HTTP-in-detail-THM","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"cybersecurity","slug":"cybersecurity","count":20,"path":"api/categories/cybersecurity.json"},{"name":"THM","slug":"cybersecurity/THM","count":19,"path":"api/categories/cybersecurity/THM.json"},{"name":"web","slug":"cybersecurity/THM/web","count":13,"path":"api/categories/cybersecurity/THM/web.json"}],"tags":[{"name":"tryhackme","slug":"tryhackme","count":19,"path":"api/tags/tryhackme.json"},{"name":"web","slug":"web","count":13,"path":"api/tags/web.json"}],"author":{"name":"Satvik","slug":"blog-author","avatar":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","link":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","description":"An Aspiring Penetration Tester & a security Enthusiast üöÄ 127.0.0.1 / sudo rm -rf / üòÅ Dont Drink and Root üëÄ","socials":{"github":"https://github.com/satvik-vs","twitter":"https://twitter.com/SatvikVemulap2","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://instagram.com/satvikshetty"}}}}}}