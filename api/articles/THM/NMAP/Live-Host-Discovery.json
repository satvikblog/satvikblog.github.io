{"title":"Live Host Discovery - NMAP","uid":"2bcf8d570917965c65fd2618756df225","slug":"THM/NMAP/Live-Host-Discovery","date":"2024-05-16T13:59:01.000Z","updated":"2024-05-31T15:53:04.238Z","comments":true,"path":"api/articles/THM/NMAP/Live-Host-Discovery.json","keywords":null,"cover":"https://techyrick.com/wp-content/uploads/2021/09/nmap.webp","content":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>We can find live hosts on a network by using any of the 3 scans that are named below:</p>\n<ol>\n<li><strong>ARP scan:</strong> This scan uses ARP requests to discover live hosts</li>\n<li><strong>ICMP scan:</strong> This scan uses ICMP requests to identify live hosts</li>\n<li><strong>TCP&#x2F;UDP ping scan:</strong> This scan sends packets to TCP ports and UDP ports to determine live hosts.</li>\n</ol>\n<p>A Nmap scan usually goes through the steps shown in the figure below, although many are optional and depend on the command-line arguments you provide.</p>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/7c5c3d08-94f2-430a-91a5-78eb062f2a1e/edcf1322-b715-4fc0-81ac-2cbcba40f477/Untitled.png\" alt=\"Untitled\"></p>\n<hr>\n<h3 id=\"TASK-2-SUBNETWORKS\"><a href=\"#TASK-2-SUBNETWORKS\" class=\"headerlink\" title=\"TASK 2 - SUBNETWORKS\"></a><strong>TASK 2 - SUBNETWORKS</strong></h3><p>A <em>network segment</em> is a group of computers connected using a shared medium. For instance, the medium can be the Ethernet switch or WiFi access point. In an IP network, a <em>subnetwork</em> is usually the equivalent of one or more network segments connected together and configured to use the same router. The network segment refers to a physical connection, while a subnetwork refers to a logical connection.</p>\n<p>In the following network diagram, we have four network segments or subnetworks. Generally speaking, your system would be connected to one of these network segments&#x2F;subnetworks. A subnetwork, or simply a subnet, has its own IP address range and is connected to a more extensive network via a router. There might be a firewall enforcing security policies depending on each network.</p>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/7c5c3d08-94f2-430a-91a5-78eb062f2a1e/c08a9c09-a34a-4e95-b5d8-478e4e97b12e/Untitled.png\" alt=\"Untitled\"></p>\n<p>The figure above shows two types of subnets:</p>\n<ul>\n<li>Subnets with <strong><code>/16</code></strong>, which means that the subnet mask can be written as <strong><code>255.255.0.0</code></strong>. This subnet can have around 65 thousand hosts.</li>\n<li>Subnets with <strong><code>/24</code></strong>, which indicates that the subnet mask can be expressed as <strong><code>255.255.255.0</code></strong>. This subnet can have around 250 hosts</li>\n</ul>\n<p>If you are in Network A, you can use ARP only to discover the devices within that subnet (10.1.100.0&#x2F;24). Suppose you are connected to a subnet different from the subnet of the target system(s). In that case, all packets generated by your scanner will be routed via the default gateway (router) to reach the systems on another subnet; however, the ARP queries won’t be routed and hence cannot cross the subnet router. ARP is a link-layer protocol, and ARP packets are bound to their subnet.</p>\n<p><strong>Answer the questions below</strong></p>\n<p><strong>Send a packet with the following:</strong></p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/65a1bdee53403520174388d9de6410ba.png\" alt=\"ARP Request\"></p>\n<ul>\n<li>From computer1</li>\n<li>To computer1 (to indicate it is broadcast)</li>\n<li>Packet Type: “ARP Request”</li>\n<li>Data: computer6 (because we are asking for computer6 MAC address using ARP Request)</li>\n</ul>\n<p>How many devices can see the ARP Request?</p>\n<p><strong>Answer :</strong> 4</p>\n<p>Did computer6 receive the ARP Request? (Y&#x2F;N)<br><strong>Answer :</strong> N</p>\n<p>Send a packet with the following:</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/818d1c5a3a96a9962dde71069f9e1ee8.png\" alt=\"ARP Request\"></p>\n<ul>\n<li>From computer4</li>\n<li>To computer4 (to indicate it is broadcast)</li>\n<li>Packet Type: “ARP Request”</li>\n<li>Data: computer6 (because we are asking for computer6 MAC address using ARP Request)</li>\n</ul>\n<p>How many devices can see the ARP Request?</p>\n<p><strong>Answer :</strong> 4</p>\n<p>Did computer6 reply to the ARP Request? (Y&#x2F;N)</p>\n<p><strong>Answer :</strong> Y</p>\n<hr>\n<h3 id=\"TASK-3-Enumerating-Targets\"><a href=\"#TASK-3-Enumerating-Targets\" class=\"headerlink\" title=\"TASK 3 - Enumerating Targets\"></a>TASK 3 - Enumerating Targets</h3><p>We mentioned the different <em>techniques</em> we can use for scanning in Task 1. Before we explain each in detail and put it into use against a live target, we need to specify the targets we want to scan. Generally speaking, you can provide a list, a range, or a subnet. Examples of target specification are:</p>\n<ul>\n<li>list: <strong><code>MACHINE_IP scanme.nmap.org example.com</code></strong> will scan 3 IP addresses.</li>\n<li>range: <strong><code>10.11.12.15-20</code></strong> will scan 6 IP addresses: <strong><code>10.11.12.15</code></strong>, **<code>10.11.12.16</code>… and <strong><code>10.11.12.20</code></strong>.</li>\n<li>subnet: <strong><code>MACHINE_IP/30</code></strong> will scan 4 IP addresses.</li>\n</ul>\n<p>You can also provide a file as input for your list of targets, <strong><code>nmap -iL list_of_hosts.txt</code></strong>.</p>\n<p>If you want to check the list of hosts that Nmap will scan, you can use <strong><code>nmap -sL TARGETS</code></strong>. This option will give you a detailed list of the hosts that Nmap will scan without scanning them; however, Nmap will attempt a reverse-DNS resolution on all the targets to obtain their names. Names might reveal various information to the pentester. (If you don’t want Nmap to the DNS server, you can add <strong><code>-n</code></strong>.)</p>\n<p>Launch the AttackBox using the Start AttackBox button, open the terminal when the AttackBox is ready, and use Nmap to answer the following.</p>\n<p><strong>Q1 .</strong> What is the first IP address Nmap would scan if you provided <strong><code>10.10.12.13/29</code></strong> as your target?</p>\n<p>Answer :<br>we can use the command <code>nmap -sL 10.10.12.13/29</code> </p>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/7c5c3d08-94f2-430a-91a5-78eb062f2a1e/1c24d323-4dc4-4a2d-b0a7-b430ea073ebb/Untitled.png\" alt=\"Untitled\"></p>\n<p>so the answer is<br><strong>10.10.12.8</strong></p>\n<p>**Q2.**How many IP addresses will Nmap scan if you provide the following range <strong><code>10.10.0-255.101-125</code></strong>? </p>\n<p>we can use the command <code>nmap -sL **10.10.0-255.101-125</code>** </p>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/7c5c3d08-94f2-430a-91a5-78eb062f2a1e/0b6653a9-48c2-4011-8006-54fe5592218b/Untitled0\" alt=\"Untitled\"></p>\n<h3 id=\"TASK-4-Discovering-Live-Hosts\"><a href=\"#TASK-4-Discovering-Live-Hosts\" class=\"headerlink\" title=\"TASK - 4 Discovering Live Hosts\"></a>TASK - 4 Discovering Live Hosts</h3><p>Let’s revisit the TCP&#x2F;IP layers shown in the figure next. We will leverage the protocols to discover the live hosts. Starting from bottom to top, we can use:</p>\n<ul>\n<li>ARP from Link Layer</li>\n<li>ICMP from Network Layer</li>\n<li>TCP from Transport Layer</li>\n<li>UDP from Transport Layer</li>\n</ul>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/745e0412b319d324352c7b29863b74f4.png\" alt=\"TCP/IP Layers\"></p>\n<p>Before we discuss how scanners can use each in detail, we will briefly review these four protocols. ARP has one purpose: sending a frame to the broadcast address on the network segment and asking the computer with a specific IP address to respond by providing its MAC (hardware) address.</p>\n<p>ICMP has <a href=\"https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml\">many types</a>. ICMP ping uses Type 8 (Echo) and Type 0 (Echo Reply).</p>\n<p>If you want to ping a system on the same subnet, an ARP query should precede the ICMP Echo.</p>\n<p>Although TCP and UDP are transport layers, for network scanning purposes, a scanner can send a specially-crafted packet to common TCP or UDP ports to check whether the target will respond. This method is efficient, especially when ICMP Echo is blocked.</p>\n<p>If you have closed the network simulator, click on the “View Site” button in Task 2 to display it again.</p>\n<p>Answer the questions below</p>\n<p>Send a packet with the following:</p>\n<ul>\n<li>From computer1</li>\n<li>To computer3</li>\n<li>Packet Type: “Ping Request”</li>\n</ul>\n<p>What is the type of packet that computer1 sent before the ping?</p>\n<p><strong>Answer:</strong> ARP REQUEST</p>\n<p>What is the type of packet that computer1 received before being able to send the ping?</p>\n<p><strong>Answer:</strong> ARP RESPONSE</p>\n<p>How many computers responded to the ping request?</p>\n<p><strong>Answer:</strong> 1</p>\n<p>Send a packet with the following:</p>\n<ul>\n<li>From computer2</li>\n<li>To computer5</li>\n<li>Packet Type: “Ping Request”</li>\n</ul>\n<p>What is the name of the first device that responded to the first ARP Request?</p>\n<p><strong>Answer:</strong> Router</p>\n<p>What is the name of the first device that responded to the second ARP Request?</p>\n<p><strong>Answer:</strong> Computer5</p>\n<hr>\n<h3 id=\"TASK-5-Nmap-Host-Discovery-Using-ARP\"><a href=\"#TASK-5-Nmap-Host-Discovery-Using-ARP\" class=\"headerlink\" title=\"TASK 5 - Nmap Host Discovery Using ARP\"></a><strong>TASK 5 - Nmap Host Discovery Using ARP</strong></h3><p>How would you know which hosts are up and running? It is essential to avoid wasting our time port-scanning an offline host or an IP address not in use. There are various ways to discover online hosts. When no host discovery options are provided, Nmap follows the following approaches to discover live hosts:</p>\n<ol>\n<li>When a <em>privileged</em> user tries to scan targets on a local network (Ethernet), Nmap uses <em>ARP requests</em>. A privileged user is <strong><code>root</code></strong> or a user who belongs to <strong><code>sudoers</code></strong> and can run <strong><code>sudo</code></strong>.</li>\n<li>When a <em>privileged</em> user tries to scan targets outside the local network, Nmap uses ICMP echo requests, TCP ACK (Acknowledge) to port 80, TCP SYN (Synchronize) to port 443, and ICMP timestamp request.</li>\n<li>When an <em>unprivileged</em> user tries to scan targets outside the local network, Nmap resorts to a TCP 3-way handshake by sending SYN packets to ports 80 and 443.</li>\n</ol>\n<p>Nmap, by default, uses a ping scan to find live hosts, then proceeds to scan live hosts only. If you want to use Nmap to discover online hosts without port-scanning the live systems, you can issue <strong><code>nmap -sn TARGETS</code></strong>. Let’s dig deeper into the different techniques used.</p>\n<p>ARP scan is possible only if you are on the same subnet as the target systems. On an Ethernet (802.3) and WiFi (802.11), you need to know the MAC address of any system before you can communicate with it. The MAC address is necessary for the link-layer header; the header contains the source MAC address and the destination MAC address among other fields. To get the MAC address, the OS sends an ARP query. A host that replies to ARP queries is up. The ARP query only works if the target is on the same subnet as yourself, i.e., on the same Ethernet&#x2F;WiFi. You should expect to see many ARP queries generated during a Nmap scan of a local network. If you want Nmap only to perform an ARP scan without port-scanning, you can use <strong><code>nmap -PR -sn TARGETS</code></strong>, where <strong><code>-PR</code></strong> indicates that you only want an ARP scan. The following example shows Nmap using ARP for host discovery without any port scanning. We run <strong><code>nmap -PR -sn MACHINE_IP/24</code></strong> to discover all the live systems on the same subnet as our target machine.</p>\n<p>Pentester Terminal</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pentester@TryHackMe$ sudo nmap -PR -sn 10.10.210.6/24Starting Nmap 7.60 ( https://nmap.org ) at 2021-09-02 07:12 BST</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-210-75.eu-west-1.compute.internal (10.10.210.75)</span><br><span class=\"line\">Host is up (0.00013s latency).</span><br><span class=\"line\">MAC Address: 02:83:75:3A:F2:89 (Unknown)</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-210-100.eu-west-1.compute.internal (10.10.210.100)</span><br><span class=\"line\">Host is up (-0.100s latency).</span><br><span class=\"line\">MAC Address: 02:63:D0:1B:2D:CD (Unknown)</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-210-165.eu-west-1.compute.internal (10.10.210.165)</span><br><span class=\"line\">Host is up (0.00025s latency).</span><br><span class=\"line\">MAC Address: 02:59:79:4F:17:B7 (Unknown)</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-210-6.eu-west-1.compute.internal (10.10.210.6)</span><br><span class=\"line\">Host is up.</span><br><span class=\"line\">Nmap <span class=\"keyword\">done</span>: 256 IP addresses (4 hosts up) scanned <span class=\"keyword\">in</span> 3.12 seconds</span><br><span class=\"line\">In this <span class=\"keyword\">case</span>, the AttackBox had the IP address 10.10.210.6, and it used ARP requests to discover the live hosts on the same subnet. ARP scan works, as shown <span class=\"keyword\">in</span> the figure below. Nmap sends ARP requests to all the target computers, and those online should send an ARP reply back.</span><br></pre></td></tr></table></figure>\n\n<p>If we look at the packets generated using a tool such as tcpdump or Wireshark, we will see network traffic similar to the figure below. In the figure below, Wireshark displays the source MAC address, destination MAC address, protocol, and query related to each ARP request. The source address is the MAC address of our AttackBox, while the destination is the broadcast address as we don’t know the MAC address of the target. However, we see the target’s IP address, which appears in the Info column. In the figure, we can see that we are requesting the MAC addresses of all the IP addresses on the subnet, starting with 10.10.210.1. The host with the IP address we are asking about will send an ARP reply with its MAC address, and that’s how we will know that it is online.</p>\n<p>Talking about ARP scans, we should mention a scanner built around ARP queries: arp-scan; it provides many options to customize your scan. Visit the arp-scan wiki for detailed information. One popular choice is arp-scan –localnet or simply arp-scan -l. This command will send ARP queries to all valid IP addresses on your local networks. Moreover, if your system has more than one interface and you are interested in discovering the live hosts on one of them, you can specify the interface using -I. For instance, sudo arp-scan -I eth0 -l will send ARP queries for all valid IP addresses on the eth0 interface.</p>\n<p>Note that arp-scan is not installed on the AttackBox; however, it can be installed using apt install arp-scan.</p>\n<p>In the example below, we scanned the subnet of the AttackBox using arp-scan ATTACKBOX_IP&#x2F;24. Since we ran this scan at a time frame close to the previous one nmap -PR -sn ATTACKBOX_IP&#x2F;24, we obtained the same three live targets.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pentester@TryHackMe$ sudo arp-scan 10.10.210.6/24Interface: eth0, datalink <span class=\"built_in\">type</span>: EN10MB (Ethernet)</span><br><span class=\"line\">WARNING: host part of 10.10.210.6/24 is non-zero</span><br><span class=\"line\">Starting arp-scan 1.9 with 256 hosts (http://www.nta-monitor.com/tools/arp-scan/)</span><br><span class=\"line\">10.10.210.75\t02:83:75:3a:f2:89\t(Unknown)</span><br><span class=\"line\">10.10.210.100\t02:63:d0:1b:2d:<span class=\"built_in\">cd</span>\t(Unknown)</span><br><span class=\"line\">10.10.210.165\t02:59:79:4F:17:B7\t(Unknown)</span><br><span class=\"line\"></span><br><span class=\"line\">4 packets received by filter, 0 packets dropped by kernel</span><br><span class=\"line\">Ending arp-scan 1.9: 256 hosts scanned <span class=\"keyword\">in</span> 2.726 seconds (93.91 hosts/sec). 3 responded</span><br></pre></td></tr></table></figure>\n<p>Similarly, the command <strong><code>arp-scan</code></strong> will generate many ARP queries that we can see using tcpdump, Wireshark, or a similar tool. We can notice that the packet capture for <strong><code>arp-scan</code></strong> and <strong><code>nmap -PR -sn</code></strong> yield similar traffic patterns. Below is the Wireshark output.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/7a4f0b5fe57a09aaebd18da5d1e1af16.png\" alt=\"Wireshark Output\"></p>\n<p>If you have closed the network simulator, click on the “Visit Site” button in Task 2 to display it again.</p>\n<p><strong>Answer the questions below:</strong></p>\n<p>We will be sending broadcast ARP Requests packets with the following options:</p>\n<ul>\n<li>From computer1</li>\n<li>To computer1 (to indicate it is broadcast)</li>\n<li>Packet Type: “ARP Request”</li>\n<li>Data: try all the possible eight devices (other than computer1) in the network: computer2, computer3, computer4, computer5, computer6, switch1, switch2, and router.</li>\n</ul>\n<p><strong>How many devices are you able to discover using ARP requests?</strong></p>\n<p>3</p>\n<hr>\n<h3 id=\"TASK-6-NMAP-HOST-DISCOVERY-USING-ICMP\"><a href=\"#TASK-6-NMAP-HOST-DISCOVERY-USING-ICMP\" class=\"headerlink\" title=\"TASK 6 - NMAP HOST DISCOVERY USING ICMP\"></a><strong>TASK 6 - NMAP HOST DISCOVERY USING ICMP</strong></h3><p>We can ping every IP address on a target network and see who would respond to our <strong><code>ping</code></strong> (ICMP Type 8&#x2F;Echo) requests with a ping reply (ICMP Type 0). Simple, isn’t it? Although this would be the most straightforward approach, it is not always reliable. Many firewalls block ICMP echo; new versions of MS Windows are configured with a host firewall that blocks ICMP echo requests by default. Remember that an ARP query will precede the ICMP request if your target is on the same subnet.</p>\n<p>To use ICMP echo request to discover live hosts, add the option <strong><code>-PE</code></strong>. (Remember to add <strong><code>-sn</code></strong> if you don’t want to follow that with a port scan.) As shown in the following figure, an ICMP echo scan works by sending an ICMP echo request and expects the target to reply with an ICMP echo reply if it is online.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/25fb5fd5d2009cf69d7aae40e8fde2ec.png\" alt=\"ICMP Echo Scan\"></p>\n<p>In the example below, we scanned the target’s subnet using <strong><code>nmap -PE -sn MACHINE_IP/24</code></strong>. This scan will send ICMP echo packets to every IP address on the subnet. Again, we expect live hosts to reply; however, it is wise to remember that many firewalls block ICMP. The output below shows the result of scanning the virtual machine’s class C subnet using <strong><code>sudo nmap -PE -sn MACHINE_IP/24</code></strong> from the AttackBox.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**Pentester Terminal:**</span><br><span class=\"line\"></span><br><span class=\"line\">pentester@TryHackMe$ sudo nmap -PE -sn 10.10.68.220/24Starting Nmap 7.60 ( https://nmap.org ) at 2021-09-02 10:16 BST</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-68-50.eu-west-1.compute.internal (10.10.68.50)</span><br><span class=\"line\">Host is up (0.00017s latency).</span><br><span class=\"line\">MAC Address: 02:95:36:71:5B:87 (Unknown)</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-68-52.eu-west-1.compute.internal (10.10.68.52)</span><br><span class=\"line\">Host is up (0.00017s latency).</span><br><span class=\"line\">MAC Address: 02:48:E8:BF:78:E7 (Unknown)</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-68-77.eu-west-1.compute.internal (10.10.68.77)</span><br><span class=\"line\">Host is up (-0.100s latency).</span><br><span class=\"line\">MAC Address: 02:0F:0A:1D:76:35 (Unknown)</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-68-110.eu-west-1.compute.internal (10.10.68.110)</span><br><span class=\"line\">Host is up (-0.10s latency).</span><br><span class=\"line\">MAC Address: 02:6B:50:E9:C2:91 (Unknown)</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-68-140.eu-west-1.compute.internal (10.10.68.140)</span><br><span class=\"line\">Host is up (0.00021s latency).</span><br><span class=\"line\">MAC Address: 02:58:59:63:0B:6B (Unknown)</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-68-142.eu-west-1.compute.internal (10.10.68.142)</span><br><span class=\"line\">Host is up (0.00016s latency).</span><br><span class=\"line\">MAC Address: 02:C6:41:51:0A:0F (Unknown)</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-68-220.eu-west-1.compute.internal (10.10.68.220)</span><br><span class=\"line\">Host is up (0.00026s latency).</span><br><span class=\"line\">MAC Address: 02:25:3F:DB:EE:0B (Unknown)</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> ip-10-10-68-222.eu-west-1.compute.internal (10.10.68.222)</span><br><span class=\"line\">Host is up (0.00025s latency).</span><br><span class=\"line\">MAC Address: 02:28:B1:2E:B0:1B (Unknown)</span><br><span class=\"line\">Nmap <span class=\"keyword\">done</span>: 256 IP addresses (8 hosts up) scanned <span class=\"keyword\">in</span> 2.11 seconds</span><br></pre></td></tr></table></figure>\n\n<p>The scan output shows that eight hosts are up; moreover, it shows their MAC addresses. Generally speaking, we don’t expect to learn the MAC addresses of the targets unless they are on the same subnet as our system. The output above indicates that Nmap didn’t need to send ICMP packets as it confirmed that these hosts are up based on the ARP responses it received.</p>\n<p>We will repeat the scan above; however, this time, we will scan from a system that belongs to a different subnet. The results are similar but without the MAC addresses.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pentester Terminal </span><br><span class=\"line\">pentester@TryHackMe$ sudo nmap -PE -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 12:16 EEST</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.50</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.52</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.77</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.110</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.140</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.142</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.220</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.222</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Nmap <span class=\"keyword\">done</span>: 256 IP addresses (8 hosts up) scanned <span class=\"keyword\">in</span> 8.26 second</span><br></pre></td></tr></table></figure>\n\n<p>If you look at the network packets using a tool like Wireshark, you will see something similar to the image below. You can see that we have one source IP address on a different subnet than that of the destination subnet, sending ICMP echo requests to all the IP addresses in the target subnet to see which one will reply.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/0fa352ccc303a6e840929ab4a21848b1.png\" alt=\"Wireshark Screenshot\"></p>\n<p>Because ICMP echo requests tend to be blocked, you might also consider ICMP Timestamp or ICMP Address Mask requests to tell if a system is online. Nmap uses timestamp request (ICMP Type 13) and checks whether it will get a Timestamp reply (ICMP Type 14). Adding the <code>-PP</code> option tells Nmap to use ICMP timestamp requests. As shown in the figure below, you expect live hosts to reply.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/06443faaa41a349ff46732d60e2e3bcd.png\" alt=\"Nmap ICMP Timestamp Scan\"></p>\n<p>In the following example, we run <code>nmap -PP -sn MACHINE_IP/24</code> to discover the online computers on the target machine subnet.</p>\n<p>Pentester Terminal</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pentester@TryHackMe$ sudo nmap -PP -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 12:06 EEST</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.50</span><br><span class=\"line\">Host is up (0.13s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.52</span><br><span class=\"line\">Host is up (0.25s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.77</span><br><span class=\"line\">Host is up (0.14s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.110</span><br><span class=\"line\">Host is up (0.14s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.140</span><br><span class=\"line\">Host is up (0.15s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.209</span><br><span class=\"line\">Host is up (0.14s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.220</span><br><span class=\"line\">Host is up (0.14s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.222</span><br><span class=\"line\">Host is up (0.14s latency).</span><br><span class=\"line\">Nmap <span class=\"keyword\">done</span>: 256 IP addresses (8 hosts up) scanned <span class=\"keyword\">in</span> 10.93 seconds</span><br></pre></td></tr></table></figure>\n\n<p>Similar to the previous ICMP scan, this scan will send many ICMP timestamp requests to every valid IP address in the target subnet. In the Wireshark screenshot below, you can see one source IP address sending ICMP packets to every possible IP address to discover online hosts.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/61ddb58cf7ffb3472f12388ff3ac3f4b.png\" alt=\"Wireshark Screenshot\"></p>\n<p>Similarly, Nmap uses address mask queries (ICMP Type 17) and checks whether it gets an address mask reply (ICMP Type 18). This scan can be enabled with the option <code>-PM</code>. As shown in the figure below, live hosts are expected to reply to ICMP address mask requests.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/14c31c66e002e2f50b0f8525c8d8e456.png\" alt=\"Nmap ICMP Address Mask Scan\"></p>\n<p>In an attempt to discover live hosts using ICMP address mask queries, we run the command <code>nmap -PM -sn MACHINE_IP/24</code>. Although, based on earlier scans, we know that at least eight hosts are up, this scan returned none. The reason is that the target system or a firewall on the route is blocking this type of ICMP packet. Therefore, it is essential to learn multiple approaches to achieve the same result. If one type of packet is being blocked, we can always choose another to discover the target network and services.</p>\n<p>Pentester Terminal</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pentester@TryHackMe$ sudo nmap -PM -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 12:13 EEST</span><br><span class=\"line\">Nmap <span class=\"keyword\">done</span>: 256 IP addresses (0 hosts up) scanned <span class=\"keyword\">in</span> 52.17 seconds</span><br></pre></td></tr></table></figure>\n\n\n<p>Although we didn’t get any reply and could not figure out which hosts are online, it is essential to note that this scan sent ICMP address mask requests to every valid IP address and waited for a reply. Each ICMP request was sent twice, as we can see in the screenshot below.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/8281b22c8eff2c0e09cef3d81c9d299a.png\" alt=\"Wireshark Screenshot\"></p>\n<p>Answer the questions below</p>\n<p>What is the option required to tell Nmap to use ICMP Timestamp to discover live hosts?</p>\n<p>Correct Answer : -pp</p>\n<p>What is the option required to tell Nmap to use ICMP Address Mask to discover live hosts?</p>\n<p>Correct Answer : -PN</p>\n<p>What is the option required to tell Nmap to use ICMP Echo to discover live hosts?</p>\n<p>Correct Answer : -PE</p>\n<h3 id=\"TASK-7-Nmap-Host-Discovery-Using-TCP-and-UDP\"><a href=\"#TASK-7-Nmap-Host-Discovery-Using-TCP-and-UDP\" class=\"headerlink\" title=\"TASK 7 - Nmap Host Discovery Using TCP and UDP\"></a><strong>TASK 7 - Nmap Host Discovery Using TCP and UDP</strong></h3><p><strong>TCP SYN Ping</strong></p>\n<p>We can send a packet with the SYN (Synchronize) flag set to a TCP port, 80 by default, and wait for a response. An open port should reply with a SYN&#x2F;ACK (Acknowledge); a closed port would result in an RST (Reset). In this case, we only check whether we will get any response to infer whether the host is up. The specific state of the port is not significant here. The figure below is a reminder of how a TCP 3-way handshake usually works.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/23e7f481f78de8d3e89ef845b747002d.png\" alt=\"TCP 3-Way Handshake\"></p>\n<p>If you want Nmap to use TCP SYN ping, you can do so via the option <code>-PS</code> followed by the port number, range, list, or a combination of them. For example, <code>-PS21</code> will target port 21, while <code>-PS21-25</code> will target ports 21, 22, 23, 24, and 25. Finally <code>-PS80,443,8080</code> will target the three ports 80, 443, and 8080.</p>\n<p>Privileged users (root and sudoers) can send TCP SYN packets and don’t need to complete the TCP 3-way handshake even if the port is open, as shown in the figure below. Unprivileged users have no choice but to complete the 3-way handshake if the port is open.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/168d48701c5f872cf1930e08b32bcd6f.png\" alt=\"TCP SYN Packet\"></p>\n<p>We will run <code>nmap -PS -sn MACHINE_IP/24</code> to scan the target VM subnet. As we can see in the output below, we were able to discover five hosts.</p>\n<p>Pentester Terminal</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pentester@TryHackMe$ sudo nmap -PS -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 13:45 EEST</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.52</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.121</span><br><span class=\"line\">Host is up (0.16s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.125</span><br><span class=\"line\">Host is up (0.089s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.134</span><br><span class=\"line\">Host is up (0.13s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.220</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Nmap <span class=\"keyword\">done</span>: 256 IP addresses (5 hosts up) scanned <span class=\"keyword\">in</span> 17.38 seconds</span><br></pre></td></tr></table></figure>\n\n<p>Let’s take a closer look at what happened behind the scenes by looking at the network traffic on Wireshark in the figure below. Technically speaking, since we didn’t specify any TCP ports to use in the TCP ping scan, Nmap used common ports; in this case, it is TCP port 80. Any service listening on port 80 is expected to reply, indirectly indicating that the host is online.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/e580a3279be3798ddb78f61a9ee21587.png\" alt=\"Wireshark Capture\"></p>\n<p><strong>TCP ACK Ping</strong></p>\n<p>As you have guessed, this sends a packet with an ACK flag set. You must be running Nmap as a privileged user to be able to accomplish this. If you try it as an unprivileged user, Nmap will attempt a 3-way handshake.</p>\n<p>By default, port 80 is used. The syntax is similar to TCP SYN ping. <code>-PA</code> should be followed by a port number, range, list, or a combination of them. For example, consider <code>-PA21</code>, <code>-PA21-25</code> and <code>-PA80,443,8080</code>. If no port is specified, port 80 will be used.</p>\n<p>The following figure shows that any TCP packet with an ACK flag should get a TCP packet back with an RST flag set. The target responds with the RST flag set because the TCP packet with the ACK flag is not part of any ongoing connection. The expected response is used to detect if the target host is up.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/db5ab44a8c700c4ab0603e85e456040d.png\" alt=\"TCP ACK Packet\"></p>\n<p>In this example, we run <code>sudo nmap -PA -sn MACHINE_IP/24</code> to discover the online hosts on the target’s subnet. We can see that the TCP ACK ping scan detected five hosts as up.</p>\n<p>Pentester Terminal</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pentester@TryHackMe$ sudo nmap -PA -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 13:46 EEST</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.52</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.121</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.125</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.134</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.220</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Nmap <span class=\"keyword\">done</span>: 256 IP addresses (5 hosts up) scanned <span class=\"keyword\">in</span> 29.89 seconds</span><br></pre></td></tr></table></figure>\n\n<p>If we peek at the network traffic as shown in the figure below, we will discover many packets with the ACK flag set and sent to port 80 of the target systems. Nmap sends each packet twice. The systems that don’t respond are offline or inaccessible.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/6ccdba7337684b8e8f532a23c5259ffc.png\" alt=\"Wireshark Capture\"></p>\n<p><strong>UDP Ping</strong></p>\n<p>Finally, we can use UDP to discover if the host is online. Contrary to TCP SYN ping, sending a UDP packet to an open port is not expected to lead to any reply. However, if we send a UDP packet to a closed UDP port, we expect to get an ICMP port unreachable packet; this indicates that the target system is up and available.</p>\n<p>In the following figure, we see a UDP packet sent to an open UDP port and not triggering any response. However, sending a UDP packet to any closed UDP port can trigger a response indirectly indicating that the target is online.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/1b827ef60c39619e281c4ca51a6d57b6.png\" alt=\"UDP Packet to Open Port\"></p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/c8b2d403667487322058619e561186d2.png\" alt=\"UDP Packet to Closed Port\"></p>\n<p>The syntax to specify the ports is similar to that of TCP SYN ping and TCP ACK ping; Nmap uses <code>-PU</code> for UDP ping. In the following example, we use a UDP scan, and we discover five live hosts.</p>\n<p>Pentester Terminal</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pentester@TryHackMe$ sudo nmap -PU -sn 10.10.68.220/24Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-02 13:45 EEST</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.52</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.121</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.125</span><br><span class=\"line\">Host is up (0.14s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.134</span><br><span class=\"line\">Host is up (0.096s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.68.220</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Nmap <span class=\"keyword\">done</span>: 256 IP addresses (5 hosts up) scanned <span class=\"keyword\">in</span> 9.20 second</span><br></pre></td></tr></table></figure>\n<p>Let’s inspect the UDP packets generated. In the following Wireshark screenshot, we notice Nmap sending UDP packets to UDP ports that are most likely closed. The image below shows that Nmap uses an uncommon UDP port to trigger an ICMP destination unreachable (port unreachable) error.</p>\n<p><img src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/2417b8b03f00fe5f589a08d9e6e62209.png\" alt=\"Wireshark Capture\"></p>\n<p><strong>Masscan</strong></p>\n<p>On a side note, Masscan uses a similar approach to discover the available systems. However, to finish its network scan quickly, Masscan is quite aggressive with the rate of packets it generates. The syntax is quite similar: <code>-p</code> can be followed by a port number, list, or range. Consider the following examples:</p>\n<ul>\n<li><code>masscan MACHINE_IP/24 -p443</code></li>\n<li><code>masscan MACHINE_IP/24 -p80,443</code></li>\n<li><code>masscan MACHINE_IP/24 -p22-25</code></li>\n<li><code>masscan MACHINE_IP/24 ‐‐top-ports 100</code></li>\n</ul>\n<p>Masscan is not installed on the AttackBox; however, it can be installed using <code>apt install masscan</code>.</p>\n<p>Answer the questions below</p>\n<p>Which TCP ping scan does not require a privileged account?</p>\n<p><strong>TCP SYN PING</strong></p>\n<p>Which TCP ping scan requires a privileged account?</p>\n<p><strong>TCP ACK PING</strong></p>\n<p>What option do you need to add to Nmap to run a TCP SYN ping scan on the telnet port?</p>\n<p><strong>-ps23</strong></p>\n<h3 id=\"TASK-8-USING-REVERSE-DNS-LOOKUP\"><a href=\"#TASK-8-USING-REVERSE-DNS-LOOKUP\" class=\"headerlink\" title=\"TASK 8 - USING REVERSE DNS LOOKUP\"></a>TASK 8 - USING REVERSE DNS LOOKUP</h3><p>Nmap’s default behaviour is to use reverse-DNS online hosts. Because the hostnames can reveal a lot, this can be a helpful step. However, if you don’t want to send such DNS queries, you use <strong><code>-n</code></strong> to skip this step.</p>\n<p>By default, Nmap will look up online hosts; however, you can use the option <strong><code>-R</code></strong> to query the DNS server even for offline hosts. If you want to use a specific DNS server, you can add the <strong><code>--dns-servers DNS_SERVER</code></strong> option.</p>\n<p>Answer the questions below</p>\n<p>We want Nmap to issue a reverse DNS lookup for all the possibles hosts on a subnet, hoping to get some insights from the names. What option should we add?</p>\n<p>Correct Answer : <strong>-R</strong></p>\n<hr>\n<p>SUMMARY OF THE ROOM</p>\n<p>You have learned how ARP, ICMP, TCP, and UDP can detect live hosts by completing this room. Any response from a host is an indication that it is online. Below is a quick summary of the command-line options for Nmap that we have covered.</p>\n<table>\n<thead>\n<tr>\n<th>Scan Type</th>\n<th>Example Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ARP Scan</td>\n<td>sudo nmap -PR -sn MACHINE_IP&#x2F;24</td>\n</tr>\n<tr>\n<td>ICMP Echo Scan</td>\n<td>sudo nmap -PE -sn MACHINE_IP&#x2F;24</td>\n</tr>\n<tr>\n<td>ICMP Timestamp Scan</td>\n<td>sudo nmap -PP -sn MACHINE_IP&#x2F;24</td>\n</tr>\n<tr>\n<td>ICMP Address Mask Scan</td>\n<td>sudo nmap -PM -sn MACHINE_IP&#x2F;24</td>\n</tr>\n<tr>\n<td>TCP SYN Ping Scan</td>\n<td>sudo nmap -PS22,80,443 -sn MACHINE_IP&#x2F;30</td>\n</tr>\n<tr>\n<td>TCP ACK Ping Scan</td>\n<td>sudo nmap -PA22,80,443 -sn MACHINE_IP&#x2F;30</td>\n</tr>\n<tr>\n<td>UDP Ping Scan</td>\n<td>sudo nmap -PU53,161,162 -sn MACHINE_IP&#x2F;30</td>\n</tr>\n</tbody></table>\n<p>Remember to add <strong><code>-sn</code></strong> if you are only interested in host discovery without port-scanning. Omitting <strong><code>-sn</code></strong> will let Nmap default to port-scanning the live hosts.</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-n</td>\n<td>no DNS lookup</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>reverse-DNS lookup for all hosts</td>\n</tr>\n<tr>\n<td>-sn</td>\n<td>host discovery only</td>\n</tr>\n</tbody></table>\n<p><strong>Thank You</strong> 💌<br><strong>Author:</strong> <code>Satvik Shetty</code>🧑‍💻<br><strong>See you again in another writeup</strong></p>\n","feature":false,"text":"IntroductionWe can find live hosts on a network by using any of the 3 scans that...","permalink":"/post/THM/NMAP/Live-Host-Discovery","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"25 mins."},"categories":[{"name":"cybersecurity","slug":"cybersecurity","count":19,"path":"api/categories/cybersecurity.json"},{"name":"THM","slug":"cybersecurity/THM","count":18,"path":"api/categories/cybersecurity/THM.json"},{"name":"NMAP","slug":"cybersecurity/THM/NMAP","count":3,"path":"api/categories/cybersecurity/THM/NMAP.json"}],"tags":[{"name":"tryhackme","slug":"tryhackme","count":18,"path":"api/tags/tryhackme.json"},{"name":"nmap","slug":"nmap","count":4,"path":"api/tags/nmap.json"},{"name":"information-gathering","slug":"information-gathering","count":4,"path":"api/tags/information-gathering.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Introduction\"><span class=\"toc-text\">Introduction</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TASK-2-SUBNETWORKS\"><span class=\"toc-text\">TASK 2 - SUBNETWORKS</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TASK-3-Enumerating-Targets\"><span class=\"toc-text\">TASK 3 - Enumerating Targets</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TASK-4-Discovering-Live-Hosts\"><span class=\"toc-text\">TASK - 4 Discovering Live Hosts</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TASK-5-Nmap-Host-Discovery-Using-ARP\"><span class=\"toc-text\">TASK 5 - Nmap Host Discovery Using ARP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TASK-6-NMAP-HOST-DISCOVERY-USING-ICMP\"><span class=\"toc-text\">TASK 6 - NMAP HOST DISCOVERY USING ICMP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TASK-7-Nmap-Host-Discovery-Using-TCP-and-UDP\"><span class=\"toc-text\">TASK 7 - Nmap Host Discovery Using TCP and UDP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TASK-8-USING-REVERSE-DNS-LOOKUP\"><span class=\"toc-text\">TASK 8 - USING REVERSE DNS LOOKUP</span></a></li></ol>","author":{"name":"Satvik","slug":"blog-author","avatar":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","link":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","description":"An Aspiring Penetration Tester & a security Enthusiast 🚀 127.0.0.1 / sudo rm -rf / 😁 Dont Drink and Root 👀","socials":{"github":"https://github.com/satvik-vs","twitter":"https://twitter.com/SatvikVemulap2","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://instagram.com/satvikshetty"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Nmap Advanced Port Scans","uid":"cea3414c622367bb74c9fe88dd9fca82","slug":"THM/NMAP/Nmap-Advanced-Port-Scans","date":"2024-05-16T15:27:44.000Z","updated":"2024-05-31T15:53:15.813Z","comments":true,"path":"api/articles/THM/NMAP/Nmap-Advanced-Port-Scans.json","keywords":null,"cover":"https://tryhackme-images.s3.amazonaws.com/room-icons/4c839414544f794b63aafc6ed841848b.png","text":"Cheatsheet of the commands used in this room Port Scan Type Example Command TCP ...","permalink":"/post/THM/NMAP/Nmap-Advanced-Port-Scans","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"27 mins."},"categories":[{"name":"cybersecurity","slug":"cybersecurity","count":19,"path":"api/categories/cybersecurity.json"},{"name":"THM","slug":"cybersecurity/THM","count":18,"path":"api/categories/cybersecurity/THM.json"},{"name":"NMAP","slug":"cybersecurity/THM/NMAP","count":3,"path":"api/categories/cybersecurity/THM/NMAP.json"}],"tags":[{"name":"tryhackme","slug":"tryhackme","count":18,"path":"api/tags/tryhackme.json"},{"name":"nmap","slug":"nmap","count":4,"path":"api/tags/nmap.json"},{"name":"information-gathering","slug":"information-gathering","count":4,"path":"api/tags/information-gathering.json"}],"author":{"name":"Satvik","slug":"blog-author","avatar":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","link":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","description":"An Aspiring Penetration Tester & a security Enthusiast 🚀 127.0.0.1 / sudo rm -rf / 😁 Dont Drink and Root 👀","socials":{"github":"https://github.com/satvik-vs","twitter":"https://twitter.com/SatvikVemulap2","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://instagram.com/satvikshetty"}}}}},"next_post":{"title":"Basic Port Scan - NMAP","uid":"58abb440477d90f4f081be1f94565844","slug":"THM/NMAP/Basic-Port-Scan-THM","date":"2024-05-16T10:05:28.000Z","updated":"2024-05-31T15:52:59.990Z","comments":true,"path":"api/articles/THM/NMAP/Basic-Port-Scan-THM.json","keywords":null,"cover":"https://techyrick.com/wp-content/uploads/2021/09/nmap.webp","text":"Nmap Basic Port ScansINTRODUCTIONThe next step would be checking which ports are...","permalink":"/post/THM/NMAP/Basic-Port-Scan-THM","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[{"name":"cybersecurity","slug":"cybersecurity","count":19,"path":"api/categories/cybersecurity.json"},{"name":"THM","slug":"cybersecurity/THM","count":18,"path":"api/categories/cybersecurity/THM.json"}],"tags":[{"name":"tryhackme","slug":"tryhackme","count":18,"path":"api/tags/tryhackme.json"},{"name":"nmap","slug":"nmap","count":4,"path":"api/tags/nmap.json"},{"name":"information-gathering","slug":"information-gathering","count":4,"path":"api/tags/information-gathering.json"}],"author":{"name":"Satvik","slug":"blog-author","avatar":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","link":"https://dl.dropbox.com/scl/fi/00hpz9sf96v4gugpvx7t9/profile.jpg?rlkey=yet0g0rb9ofkl806vvhmkjail&st=3rw0pj88&dl=0","description":"An Aspiring Penetration Tester & a security Enthusiast 🚀 127.0.0.1 / sudo rm -rf / 😁 Dont Drink and Root 👀","socials":{"github":"https://github.com/satvik-vs","twitter":"https://twitter.com/SatvikVemulap2","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://instagram.com/satvikshetty"}}}}}}