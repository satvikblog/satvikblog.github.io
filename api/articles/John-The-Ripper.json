{"title":"John The Ripper","uid":"d91109d265d01fb54bc36b235350542e","slug":"John-The-Ripper","date":"2024-05-20T11:12:16.000Z","updated":"2024-05-20T14:52:33.858Z","comments":true,"path":"api/articles/John-The-Ripper.json","keywords":null,"cover":"https://tryhackme-images.s3.amazonaws.com/room-icons/00b6a8786d69f4bd3f4aa2683411421e.jpeg","content":"<h2 id=\"Hello-Hackers-üöÄ\"><a href=\"#Hello-Hackers-üöÄ\" class=\"headerlink\" title=\"Hello Hackers üöÄ\"></a>Hello Hackers üöÄ</h2><p>Today we will be solving the challenges in <a href=\"https://tryhackme.com/r/room/johntheripper0\"><em>John The Ripper</em></a> room on <a href=\"https://tryhackme.com/\"><em>TryHacKMe</em> </a></p>\n<h1 id=\"TASK-1-John-Who\"><a href=\"#TASK-1-John-Who\" class=\"headerlink\" title=\"TASK 1 - John Who\"></a>TASK 1 - John Who</h1><p><em>Welcome</em><br><code>John the Ripper</code> is one of the most well known, well-loved and versatile hash cracking tools out there. It combines a fast cracking speed, with an extraordinary range of compatible hash types. This room will assume no previous knowledge, so we must first cover some basic terms and concepts before we move into practical hash cracking.</p>\n<p><em>What are Hashes?</em><br>A hash is a way of taking a piece of data of any length and  representing it in another form that is a fixed length. This masks the original value of the data. This is done by running the original data through a hashing algorithm. There are many popular hashing algorithms, such as MD4,MD5, SHA1 and NTLM. Lets try and show this with an example:</p>\n<p>If we take ‚Äúpolo‚Äù, a string of 4 characters- and run it through an <code>MD5</code> hashing algorithm, we end up with an output of: <code>b53759f3ce692de7aff1b5779d3964da</code> a standard 32 character MD5 hash.</p>\n<p>Likewise, if we take ‚Äúpolomints‚Äù, a string of 9 characters- and run it through the same <code>MD5</code> hashing algorithm, we end up with an output of: <code>584b6e4f4586e136bc280f27f9c64f3b</code> another standard 32 character MD5 hash.</p>\n<p><em>What makes Hashes secure?</em><br>Hashing functions are designed as one-way functions. In other words, it is easy to calculate the hash value of a given input; however, it is a difficult problem to find the original input given the hash value. By ‚Äúdifficult‚Äù, we mean that it is computationally infeasible. This has its roots in mathematics and P vs NP.</p>\n<p>In computer science, P and NP are two classes of problems that help us understand the efficiency of algorithms:</p>\n<p><em>P (Polynomial Time):</em> Class P covers the problems whose solution can be found in polynomial time. Consider sorting a list in increasing order. The longer the list, the longer it would take to sort; nonetheless, the increase in time is not exponential.<br><em>NP (Non-deterministic Polynomial Time):</em> Problems in the class NP are those for which a given solution can be checked quickly, even though finding the solution itself might be hard. In fact, we don‚Äôt know if there is a fast algorithm to find the solution in the first place.<br>While this is an extremely interesting mathematical concept that proves fundamental to computing and cryptography, it is completely outside the scope of this room. But abstractly it means that the algorithm to hash the value will be ‚ÄúP‚Äù and can therefore be calculated reasonably. However an un-hashing algorithm would be ‚ÄúNP‚Äù and intractable to solve- meaning that it cannot be computed in a reasonable time using standard computers.</p>\n<p><em>Where John Comes in‚Ä¶</em><br>Even though the algorithm itself is not feasibly reversible. That doesn‚Äôt mean that cracking the hashes is impossible. If you have the hashed version of a password, for example- and you know the hashing algorithm- you can use that hashing algorithm to hash a large number of words, called a dictionary. You can then compare these hashes to the one you‚Äôre trying to crack, to see if any of them match. If they do, you now know what word corresponds to that hash- you‚Äôve cracked it!</p>\n<p>This process is called a dictionary attack and John the Ripper, or John as it‚Äôs commonly shortened to, is a tool to allow you to conduct fast brute force attacks on a large array of different hash types.</p>\n<h1 id=\"TASK-2-Setting-Up-John-The-Ripper\"><a href=\"#TASK-2-Setting-Up-John-The-Ripper\" class=\"headerlink\" title=\"TASK 2 - Setting Up John The Ripper\"></a>TASK 2 - Setting Up John The Ripper</h1><p><em>Setting Up John The Ripper</em><br>John the Ripper is supported on many different Operating Systems, not just Linux Distributions. As a note before we go through this, there are multiple versions of John, the standard ‚Äúcore‚Äù distribution, as well as multiple community editions- which extend the feature set of the original John distribution. The most popular of these distributions is the ‚ÄúJumbo John‚Äù- which we will be using specific features of later.</p>\n<p><em>Parrot, Kali and AttackBox</em><br>If you‚Äôre using Parrot OS, Kali Linux or TryHackMe‚Äôs own AttackBox- you should already have Jumbo John installed. You can double check this by typing john into the terminal. You should be met with a usage guide for john, with the first line reading: ‚ÄúJohn the Ripper 1.9.0-jumbo-1‚Äù or similar with a different version number. If not, you can use <code>sudo apt install john</code> to install it.</p>\n<p><em>Blackarch</em><br>If you‚Äôre using Blackarch, or the Blackarch repositories you may or may not have Jumbo John installed, to check if you do, use the command <code>pacman -Qe | grep &quot;john&quot;</code> You should be met with an output similar to ‚Äújohn 1.9.0.jumbo1-5‚Äù or similar with a different version number. If you do not have it installed, you can simply use <code>pacman -S john</code> to install it.</p>\n<p><em>Building from Source for Linux</em><br>If you wish to build the package from source to meet your system requirements, you can do this in five fairly straightforward steps. Further advice on the installation process and how to configure your build from source can be found here.</p>\n<p>Use <code>git clone https://github.com/openwall/john -b bleeding-jumbo john</code> to clone the jumbo johnrepository to your current working<br>Then <code>cd john/src/</code> to change your current directory to where the source code is.<br>Once you‚Äôre in this directory, use <code>./configure</code> to check the required dependencies and options that have been configured.<br>If you‚Äôre happy with this output, and have installed any required dependencies that are needed, use <code>make -s clean &amp;&amp; make -sj4</code> to build a binary of john. This binary will be in the above run directory, which you can change to with <code>cd ../run</code><br>You can test this binary using <code>./john --test</code></p>\n<h1 id=\"TASK-3-Wordlists\"><a href=\"#TASK-3-Wordlists\" class=\"headerlink\" title=\"TASK 3 - Wordlists\"></a>TASK 3 - Wordlists</h1><p><em>Wordlists</em><br>As we explained in the first task, in order to dictionary attack hashes, you need a list of words that you can hash and compare, unsurprisingly this is called a wordlist. There are many different wordlists out there, a good collection to use can be found in the <a href=\"https://github.com/danielmiessler/SecLists\">SecLists</a> repository. There are a few places you can look for wordlists on your attacking system of choice, we will quickly run through where you can find them.</p>\n<p><em>Parrot, Kali and AttackBox</em><br>On Parrot, Kali and TryHackMe‚Äôs AttackBox- you can find a series of amazing wordlists in the <code>/usr/share/wordlists</code> directory.</p>\n<p><em>RockYou</em><br>For all of the tasks in this room, we will be using the infamous rockyou.txt wordlist- which is a very large common password wordlist, obtained from a data breach on a website called rockyou.com in 2009. If you are not using any of the above distributions, you can get the rockyou.txt wordlist from the SecLists repository under the <code>/Passwords/Leaked-Databases</code> subsection. You may need to extract it from .tar.gz format, using <code>tar xvzf rockyou.txt.tar.gz</code>.</p>\n<p>Now that we have our hash cracker and wordlists all set up, lets move onto some hash cracking!</p>\n<h2 id=\"Questions-and-Answer-in-this-Task\"><a href=\"#Questions-and-Answer-in-this-Task\" class=\"headerlink\" title=\"Questions and Answer in this Task\"></a>Questions and Answer in this Task</h2><ul>\n<li><em>Question :</em> What website was the rockyou.txt wordlist created from a breach on?</li>\n<li><em>Answer:</em> <code>rockyou.com</code></li>\n</ul>\n<h1 id=\"TASK-4-Cracking-Basic-Hashes\"><a href=\"#TASK-4-Cracking-Basic-Hashes\" class=\"headerlink\" title=\"TASK 4 - Cracking Basic Hashes\"></a>TASK 4 - Cracking Basic Hashes</h1><p><em>Cracking Basic Hashes</em><br>There are multiple ways to use John the Ripper to crack simple hashes, we‚Äôre going to walk through a few, before moving on to cracking some ourselves.</p>\n<p><em>John Basic Syntax</em><br>The basic syntax of John the Ripper commands is as follows. We will cover the specific options and modifiers used as we use them.<br><code>john [options] [path to file]</code><br><code>john</code> - Invokes the John the Ripper program<br><code>[path to file]</code> - The file containing the hash you‚Äôre trying to crack, if it‚Äôs in the same directory you won‚Äôt need to name a path, just the file.</p>\n<p><em>Automatic Cracking</em><br>John has built-in features to detect what type of hash it‚Äôs being given, and to select appropriate rules and formats to crack it for you, this isn‚Äôt always the best idea as it can be unreliable- but if you can‚Äôt identify what hash type you‚Äôre working with and just want to try cracking it, it can be a good option! To do this we use the following syntax:</p>\n<p><code>john --wordlist=[path to wordlist] [path to file]</code></p>\n<p><code>--wordlist=</code> - Specifies using wordlist mode, reading from the file that you supply in the following path‚Ä¶</p>\n<p><code>[path to wordlist]</code> - The path to the wordlist you‚Äôre using, as described in the previous task.</p>\n<p>Example Usage:</p>\n<p><code>john --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt</code></p>\n<p><em>Identifying Hashes</em><br>Sometimes John won‚Äôt play nicely with automatically recognising and loading hashes, that‚Äôs okay! We‚Äôre able to use other tools to identify the hash, and then set john to use a specific format. There are multiple ways to do this, such as using an online hash identifier like this one. I like to use a tool called hash-identifier, a Python tool that is super easy to use and will tell you what different types of hashes the one you enter is likely to be, giving you more options if the first one fails.</p>\n<p>To use hash-identifier, you can just pull the python file from gitlab using: <code>wget https://gitlab.com/kalilinux/packages/hash-identifier/-/raw/kali/master/hash-id.py</code>.<br>Then simply launch it with python3 hash-id.py and then enter the hash you‚Äôre trying to identify- and it will give you possible formats!</p>\n<p><em>Format-Specific Cracking</em><br>Once you have identified the hash that you‚Äôre dealing with, you can tell john to use it while cracking the provided hash using the following syntax:</p>\n<p><code>john --format=[format] --wordlist=[path to wordlist] [path to file]</code></p>\n<p><code>--format=</code> - This is the flag to tell John that you‚Äôre giving it a hash of a specific format, and to use the following format to crack it</p>\n<p><code>[format]</code> - The format that the hash is in</p>\n<p><em>Example Usage:</em></p>\n<p><code>john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt</code></p>\n<p><em>A Note on Formats:</em></p>\n<p>When you are telling john to use formats, if you‚Äôre dealing with a standard hash type, e.g. <code>md5</code> as in the example above, you have to prefix it with <code>raw-</code> to tell john you‚Äôre just dealing with a standard hash type, though this doesn‚Äôt always apply. To check if you need to add the prefix or not, you can list all of John‚Äôs formats using <code>john --list=formats</code> and either check manually, or grep for your hash type using something like <code>john --list=formats | grep -iF &quot;md5&quot;</code>.</p>\n<p><em>Practical</em><br>Now you know the syntax, modifiers and methods to crack basic hashes, try it yourself! Download the attached .txt files that</p>\n<h4 id=\"Download-the-Files\"><a href=\"#Download-the-Files\" class=\"headerlink\" title=\"Download the Files*\"></a>Download the Files*</h4><ul>\n<li><a href=\"https://drive.google.com/file/d/1ieUOR2puA0QC3VL21uZuRz261Cer_VdM/view?usp=sharing\">Download Here</a></li>\n</ul>\n<h2 id=\"Questions-and-Answers-of-the-Task\"><a href=\"#Questions-and-Answers-of-the-Task\" class=\"headerlink\" title=\"Questions and Answers of the Task\"></a>Questions and Answers of the Task</h2><p>Q1. What type of hash is hash1.txt?<br>Answer:<br> We can check the hash type by using hash-id tool as we discusdded previosuly</p>\n<ul>\n<li>launch the tool using the command : <code>python3 hash-id.py</code></li>\n<li>copy the hash content from the file you have downloaded</li>\n<li>We can see the hash type is <code>md5</code>:</li>\n</ul>\n<p> <img src=\"https://i.imgur.com/wztrXN1.png\" alt=\"hash img\"> </p>\n<ul>\n<li>so the <em>answer is</em> <code>MD5</code></li>\n</ul>\n<p>Q2. What is the cracked value of hash1.txt?<br>Answer:<br>We can find the value of hash1.txt using <em>John The Ripper</em></p>\n<ul>\n<li>use the following command to crarck the hash<br><code>john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</code><br><em>OUTPUT</em><br><img src=\"https://i.imgur.com/uZdY2RL.png\" alt=\"img\"></li>\n<li>We can see the cracked value of the hash1&#x2F;txt is : <code>biscuit</code></li>\n<li>So the <em>Answer is</em> <code>biscuit</code></li>\n</ul>\n<p>Q3. What type of hash is hash2.txt?</p>\n<ul>\n<li>We can again use <code>hash-id</code> tool as we did for <em>Question 1</em></li>\n<li><img src=\"https://i.imgur.com/KHFDdAg.png\" alt=\"img\"></li>\n<li>so the <em>Answer is</em> <code>sha1</code></li>\n</ul>\n<p>Q4. What is the cracked value of hash2.txt</p>\n<ul>\n<li>we can use the <code>john the ripper</code> as we did in <em>Question 2</em></li>\n<li>Command: <code>john --format=raw-sha256 --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</code><br><strong>Replace the hash value in <code>hash.txt</code> file</strong></li>\n<li><img src=\"https://i.imgur.com/pxL9ZuG.png\" alt=\"img\"></li>\n<li>so the <em>Answer is</em> <code>kangeroo</code></li>\n</ul>\n<p>Q5. What type of hash is hash3.txt?</p>\n<ul>\n<li>use <code>hash-id</code> tool to find the type of hash :</li>\n<li><img src=\"https://i.imgur.com/zvU9GTQ.png\" alt=\"img\"></li>\n<li>so the <em>answer is</em> <code>SHA256</code></li>\n</ul>\n<p>Q6. What is the cracked value of hash3.txt</p>\n<ul>\n<li>use &#96;John The Ripper‚Äô as we did in <em>Question 2</em></li>\n<li>Command : <code>john --format=raw-sha256 --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</code><br><strong>replace the hash value <code>hash.txt</code> file</strong></li>\n<li>so the <em>Answer is <code>microphone</code></em></li>\n</ul>\n<p><strong>Now for Q7 &amp; Q8 repeat the process as we did for the above Questions</strong><br><code>Answers should be : Q7.Whirlpool &amp; Q8.colossal</code></p>\n<h1 id=\"TASK-5-Cracking-Windows-Authentication-Hashes\"><a href=\"#TASK-5-Cracking-Windows-Authentication-Hashes\" class=\"headerlink\" title=\"TASK 5 - Cracking Windows Authentication Hashes\"></a>TASK 5 - Cracking Windows Authentication Hashes</h1><p><strong>Cracking Windows Hashes</strong><br>Now that we understand the basic syntax and usage of John the Ripper- lets move on to cracking something a little bit more difficult, something that you may even want to attempt if you‚Äôre on a real Penetration Test or Red Team engagement. Authentication hashes are the hashed versions of passwords that are stored by operating systems, it is sometimes possible to crack them using the brute-force methods that we‚Äôre using. To get your hands on these hashes, you must often already be a privileged user- so we will explain some of the hashes that we plan on cracking as we attempt them.</p>\n<p><strong>NTHash &#x2F; NTLM</strong><br>NThash is the hash format that modern Windows Operating System machines will store user and service passwords in. It‚Äôs also commonly referred to as ‚ÄúNTLM‚Äù which references the previous version of Windows format for hashing passwords known as ‚ÄúLM‚Äù, thus ‚ÄúNT&#x2F;LM‚Äù.</p>\n<p>A little bit of history, the NT designation for Windows products originally meant ‚ÄúNew Technology‚Äù, and was used- starting with Windows NT, to denote products that were not built up from the MS-DOS Operating System. Eventually, the ‚ÄúNT‚Äù line became the standard Operating System type to be released by Microsoft and the name was dropped, but it still lives on in the names of some Microsoft technologies. </p>\n<p>You can acquire NTHash&#x2F;NTLM hashes by dumping the SAM database on a Windows machine, by using a tool like Mimikatz or from the Active Directory database: NTDS.dit. You may not have to crack the hash to continue privilege escalation- as you can often conduct a ‚Äúpass the hash‚Äù attack instead, but sometimes hash cracking is a viable option if there is a weak password policy.</p>\n<p><strong>Practical</strong><br>Now that you know the theory behind it, see if you can use the techniques we practiced in the last task, and the knowledge of what type of hash this is to crack the ntlm.txt file!</p>\n<p><strong>Download the files <a href=\"https://drive.google.com/file/d/1Phf2DcVCnSt-iv9OUxyU3BNcax9tt18P/view?usp=sharing\">Here</a></strong></p>\n<h2 id=\"Qustions-and-Answers-in-the-Task\"><a href=\"#Qustions-and-Answers-in-the-Task\" class=\"headerlink\" title=\"Qustions and Answers in the Task\"></a>Qustions and Answers in the Task</h2><p>Q1. What do we need to set the ‚Äúformat‚Äù flag to, in order to crack this?</p>\n<ul>\n<li><code>NT</code></li>\n</ul>\n<p>Q2. What is the cracked value of this password?</p>\n<ul>\n<li>we can use <code>John The Ripper</code> to crack the given hash</li>\n<li>Command : <code>ohn --format=nt --wordlist=/usr/share/wordlists/rockyou.txt /home/kali/Desktop/ntlm_1605054722641.txt</code></li>\n<li><img src=\"https://i.imgur.com/9EENj0a.png\" alt=\"img\"></li>\n<li>so the <em>Answer is</em> <code>mushroom</code></li>\n</ul>\n<h1 id=\"TASK-6-Cracking-etc-shadow-Hashes\"><a href=\"#TASK-6-Cracking-etc-shadow-Hashes\" class=\"headerlink\" title=\"TASK 6 - Cracking &#x2F;etc&#x2F;shadow Hashes\"></a>TASK 6 - Cracking &#x2F;etc&#x2F;shadow Hashes</h1><p><em>Cracking Hashes from &#x2F;etc&#x2F;shadow</em><br>The &#x2F;etc&#x2F;shadow file is the file on Linux machines where password hashes are stored. It also stores other information, such as the date of last password change and password expiration information. It contains one entry per line for each user or user account of the system. This file is usually only accessible by the root user- so in order to get your hands on the hashes you must have sufficient privileges, but if you do- there is a chance that you will be able to crack some of the hashes.</p>\n<p><em>Unshadowing</em><br>John can be very particular about the formats it needs data in to be able to work with it, for this reason- in order to crack <code>/etc/shadow</code> passwords, you must combine it with the <code>/etc/passwd</code> file in order for John to understand the data it‚Äôs being given. To do this, we use a tool built into the John suite of tools called unshadow. The basic syntax of unshadow is as follows:</p>\n<p><code>unshadow [path to passwd] [path to shadow]</code><br><code>unshadow</code> - Invokes the unshadow tool<br><code>[path to passwd]</code> - The file that contains the copy of the &#x2F;etc&#x2F;passwd file you‚Äôve taken from the target machine<br><code>[path to shadow]</code> - The file that contains the copy of the &#x2F;etc&#x2F;shadow file you‚Äôve taken from the target machine</p>\n<p><em>Example Usage:</em></p>\n<ul>\n<li><p><code>unshadow local_passwd local_shadow &gt; unshadowed.txt</code><br> <em>Note on the files</em></p>\n</li>\n<li><p>When using unshadow, you can either use the entire <code>/etc/passwd and /etc/shadow</code> file- if you<br>have them available, or you can use the relevant line from each, for example:</p>\n</li>\n<li><p><code>FILE 1 - local_passwd</code><br>Contains the <code>/etc/passwd</code> line for the <code>root</code> user:<br><code>root:x:0:0::/root:/bin/bash</code></p>\n</li>\n<li><p><code>FILE 2 - local_shadow</code><br> Contains the <code>/etc/shadow</code> line for the <code>root</code> user:<br> <code>root:$6$2nwjN454g.dv4HN/$m9Z/r2xVfweYVkrr.v5Ft8Ws3/YYksfNwq96UL1FX0OJjY1L6l.DS3KEVsZ9rOVLB/ldTeEL/OIhJZ4GMFMGA0:18576::::::</code></p>\n</li>\n</ul>\n<p><em>Cracking</em><br>We‚Äôre then able to feed the output from unshadow, in our example use case called ‚Äúunshadowed.txt‚Äù directly into John. We should not need to specify a mode here as we have made the input specifically for John, however in some cases you will need to specify the format as we have done previously using: <code>--format=sha512crypt</code><br><code>john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt unshadowed.txt</code></p>\n<p><code>Practical</code><br>Now, see if you can follow the process to crack the password hash of the root user that is provided in the ‚Äúetchashes.txt‚Äù file. Good luck!<br><strong>Download the files <a href=\"https://drive.google.com/file/d/1tP8RjaUn5wnDfAN-jx7BAB6HiJbyfX0c/view?usp=sharing\">Here</a></strong></p>\n<h2 id=\"Questions-and-Answers-of-the-task\"><a href=\"#Questions-and-Answers-of-the-task\" class=\"headerlink\" title=\"Questions and Answers of the task\"></a>Questions and Answers of the task</h2><p>Q1. What is the root password?<br>A:</p>\n<ul>\n<li>We can use John The Ripper Tool to crack the hash</li>\n<li>Enter the command : <code>john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt /home/kali/Desktop/etc_hashes_1605054759028.txt</code><br><img src=\"https://i.imgur.com/rFGQwpE.png\" alt=\"IMG\"></li>\n<li>Answer : <code>1234</code></li>\n</ul>\n","feature":true,"text":"Hello Hackers üöÄToday we will be solving the challenges in John The Ripper room o...","permalink":"/post/John-The-Ripper","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hello-Hackers-%F0%9F%9A%80\"><span class=\"toc-text\">Hello Hackers üöÄ</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TASK-1-John-Who\"><span class=\"toc-text\">TASK 1 - John Who</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TASK-2-Setting-Up-John-The-Ripper\"><span class=\"toc-text\">TASK 2 - Setting Up John The Ripper</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TASK-3-Wordlists\"><span class=\"toc-text\">TASK 3 - Wordlists</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Questions-and-Answer-in-this-Task\"><span class=\"toc-text\">Questions and Answer in this Task</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TASK-4-Cracking-Basic-Hashes\"><span class=\"toc-text\">TASK 4 - Cracking Basic Hashes</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Download-the-Files\"><span class=\"toc-text\">Download the Files*</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Questions-and-Answers-of-the-Task\"><span class=\"toc-text\">Questions and Answers of the Task</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TASK-5-Cracking-Windows-Authentication-Hashes\"><span class=\"toc-text\">TASK 5 - Cracking Windows Authentication Hashes</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Qustions-and-Answers-in-the-Task\"><span class=\"toc-text\">Qustions and Answers in the Task</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TASK-6-Cracking-etc-shadow-Hashes\"><span class=\"toc-text\">TASK 6 - Cracking &#x2F;etc&#x2F;shadow Hashes</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Questions-and-Answers-of-the-task\"><span class=\"toc-text\">Questions and Answers of the task</span></a></li></ol>","author":{"name":"Satvik","slug":"blog-author","avatar":"https://media.licdn.com/dms/image/D5603AQHDAkzc5VpLcQ/profile-displayphoto-shrink_800_800/0/1708273426443?e=1721260800&v=beta&t=6mDy44GnhG2deGxjMd9TUFy-WKUpt7jNSNcdJD47uYc","link":"https://media.licdn.com/dms/image/D5603AQHDAkzc5VpLcQ/profile-displayphoto-shrink_800_800/0/1708273426443?e=1721260800&v=beta&t=6mDy44GnhG2deGxjMd9TUFy-WKUpt7jNSNcdJD47uYc","description":"An Aspiring Penetration Tester & a security Enthusiast üöÄ 127.0.0.1 / sudo rm -rf / üòÅ Dont Drink and Root üëÄ","socials":{"github":"https://github.com/satvik-vs","twitter":"https://twitter.com/SatvikVemulap2","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://instagram.com/satvikshetty"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Nmap Post Port Scans","uid":"2fabf1408eddff0177ed3e3bbe3ade2f","slug":"Nmap-Post-Port-Scans","date":"2024-05-18T11:07:59.000Z","updated":"2024-05-20T11:12:21.800Z","comments":true,"path":"api/articles/Nmap-Post-Port-Scans.json","keywords":null,"cover":"https://techyrick.com/wp-content/uploads/2021/09/nmap.webp","text":"TASK 1 - Introduction:This room is the last in the Nmap series (part of the Intr...","permalink":"/post/Nmap-Post-Port-Scans","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"cybersecurity","slug":"cybersecurity","count":4,"path":"api/categories/cybersecurity.json"},{"name":"THM","slug":"cybersecurity/THM","count":4,"path":"api/categories/cybersecurity/THM.json"},{"name":"NMAP","slug":"cybersecurity/THM/NMAP","count":3,"path":"api/categories/cybersecurity/THM/NMAP.json"}],"tags":[{"name":"tryhackme","slug":"tryhackme","count":4,"path":"api/tags/tryhackme.json"},{"name":"nmap","slug":"nmap","count":4,"path":"api/tags/nmap.json"},{"name":"information-gathering","slug":"information-gathering","count":4,"path":"api/tags/information-gathering.json"}],"author":{"name":"Satvik","slug":"blog-author","avatar":"https://media.licdn.com/dms/image/D5603AQHDAkzc5VpLcQ/profile-displayphoto-shrink_800_800/0/1708273426443?e=1721260800&v=beta&t=6mDy44GnhG2deGxjMd9TUFy-WKUpt7jNSNcdJD47uYc","link":"https://media.licdn.com/dms/image/D5603AQHDAkzc5VpLcQ/profile-displayphoto-shrink_800_800/0/1708273426443?e=1721260800&v=beta&t=6mDy44GnhG2deGxjMd9TUFy-WKUpt7jNSNcdJD47uYc","description":"An Aspiring Penetration Tester & a security Enthusiast üöÄ 127.0.0.1 / sudo rm -rf / üòÅ Dont Drink and Root üëÄ","socials":{"github":"https://github.com/satvik-vs","twitter":"https://twitter.com/SatvikVemulap2","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://instagram.com/satvikshetty"}}}},"feature":true}}